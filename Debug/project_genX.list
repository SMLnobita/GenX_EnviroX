
project_genX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f2c  08004f2c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004f34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          0000071c  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000077c  2000077c  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018897  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1e  00000000  00000000  0001e927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000dc7d  00000000  00000000  00021445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001168  00000000  00000000  0002f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc2  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023872  00000000  00000000  00030ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ba51  00000000  00000000  00054864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbafc  00000000  00000000  000702b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014bdb1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000039d8  00000000  00000000  0014bdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008e  00000000  00000000  0014f7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800462c 	.word	0x0800462c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800462c 	.word	0x0800462c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DHT11_DelayUs>:
  * @param  tim: con trỏ timer
  * @param  us: thời gian trễ (microsecond)
  * @retval None
  */
static void DHT11_DelayUs(TIM_HandleTypeDef *tim, uint16_t us) {
    __HAL_TIM_SET_COUNTER(tim, 0);
 80005ac:	6803      	ldr	r3, [r0, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
    while(__HAL_TIM_GET_COUNTER(tim) < us);
 80005b2:	6803      	ldr	r3, [r0, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d3fb      	bcc.n	80005b2 <DHT11_DelayUs+0x6>
}
 80005ba:	4770      	bx	lr

080005bc <DHT11_CheckSum_Verify>:
  * @brief  Kiểm tra tính đúng đắn của checksum
  * @param  packets: mảng dữ liệu 5 bytes
  * @retval uint8_t: 1 nếu checksum đúng, 0 nếu sai
  */
static uint8_t DHT11_CheckSum_Verify(uint8_t *packets) {
    uint8_t sum = packets[0] + packets[1] + packets[2] + packets[3];
 80005bc:	7803      	ldrb	r3, [r0, #0]
 80005be:	7842      	ldrb	r2, [r0, #1]
 80005c0:	4413      	add	r3, r2
 80005c2:	7882      	ldrb	r2, [r0, #2]
 80005c4:	fa52 f383 	uxtab	r3, r2, r3
 80005c8:	78c2      	ldrb	r2, [r0, #3]
 80005ca:	fa52 f383 	uxtab	r3, r2, r3
 80005ce:	b2db      	uxtb	r3, r3
    return (sum == packets[4]) ? 1 : 0;
 80005d0:	7900      	ldrb	r0, [r0, #4]
}
 80005d2:	4298      	cmp	r0, r3
 80005d4:	bf14      	ite	ne
 80005d6:	2000      	movne	r0, #0
 80005d8:	2001      	moveq	r0, #1
 80005da:	4770      	bx	lr

080005dc <DHT11_ObserveState>:
static bool DHT11_ObserveState(DHT11_Data *dht11, uint8_t FinalState) {
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
 80005e0:	460d      	mov	r5, r1
    __HAL_TIM_SET_COUNTER(dht11->_Tim, 0);
 80005e2:	6943      	ldr	r3, [r0, #20]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
    while(__HAL_TIM_GET_COUNTER(dht11->_Tim) < DHT11_MAX_TIMEOUT) {
 80005ea:	6963      	ldr	r3, [r4, #20]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005f0:	2b63      	cmp	r3, #99	@ 0x63
 80005f2:	d807      	bhi.n	8000604 <DHT11_ObserveState+0x28>
        if(HAL_GPIO_ReadPin(dht11->_GPIOx, dht11->_Pin) == FinalState) return true;
 80005f4:	8a21      	ldrh	r1, [r4, #16]
 80005f6:	68e0      	ldr	r0, [r4, #12]
 80005f8:	f001 fda6 	bl	8002148 <HAL_GPIO_ReadPin>
 80005fc:	42a8      	cmp	r0, r5
 80005fe:	d1f4      	bne.n	80005ea <DHT11_ObserveState+0xe>
 8000600:	2001      	movs	r0, #1
 8000602:	e000      	b.n	8000606 <DHT11_ObserveState+0x2a>
    return false;
 8000604:	2000      	movs	r0, #0
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}

08000608 <DHT11_ReadBits>:
static DHT11_StatusTypeDef DHT11_ReadBits(DHT11_Data *dht11, uint8_t *packets) {
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	4604      	mov	r4, r0
 800060c:	460e      	mov	r6, r1
    uint8_t packetIndex = 0;
 800060e:	2500      	movs	r5, #0
    uint8_t bits = 0;
 8000610:	462f      	mov	r7, r5
    while(bits < DHT11_MAX_DATA_BITS) {
 8000612:	2f27      	cmp	r7, #39	@ 0x27
 8000614:	d82d      	bhi.n	8000672 <DHT11_ReadBits+0x6a>
        if(!DHT11_ObserveState(dht11, GPIO_PIN_SET)) {
 8000616:	2101      	movs	r1, #1
 8000618:	4620      	mov	r0, r4
 800061a:	f7ff ffdf 	bl	80005dc <DHT11_ObserveState>
 800061e:	b188      	cbz	r0, 8000644 <DHT11_ReadBits+0x3c>
        __HAL_TIM_SET_COUNTER(dht11->_Tim, 0);
 8000620:	6963      	ldr	r3, [r4, #20]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
        while(HAL_GPIO_ReadPin(dht11->_GPIOx, dht11->_Pin) == GPIO_PIN_SET) {
 8000628:	8a21      	ldrh	r1, [r4, #16]
 800062a:	68e0      	ldr	r0, [r4, #12]
 800062c:	f001 fd8c 	bl	8002148 <HAL_GPIO_ReadPin>
 8000630:	2801      	cmp	r0, #1
 8000632:	d10a      	bne.n	800064a <DHT11_ReadBits+0x42>
            if(__HAL_TIM_GET_COUNTER(dht11->_Tim) > DHT11_MAX_TIMEOUT) {
 8000634:	6963      	ldr	r3, [r4, #20]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063a:	2b64      	cmp	r3, #100	@ 0x64
 800063c:	d9f4      	bls.n	8000628 <DHT11_ReadBits+0x20>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800063e:	b662      	cpsie	i
                return DHT11_TIMEOUT;
 8000640:	2096      	movs	r0, #150	@ 0x96
}
 8000642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000644:	b662      	cpsie	i
            return DHT11_TIMEOUT;
 8000646:	2096      	movs	r0, #150	@ 0x96
 8000648:	e7fb      	b.n	8000642 <DHT11_ReadBits+0x3a>
        packets[packetIndex] = packets[packetIndex] << 1;
 800064a:	5d73      	ldrb	r3, [r6, r5]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	5573      	strb	r3, [r6, r5]
        packets[packetIndex] |= (__HAL_TIM_GET_COUNTER(dht11->_Tim) > DHT11_BIT_THRESHOLD);
 8000652:	6962      	ldr	r2, [r4, #20]
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000658:	2a32      	cmp	r2, #50	@ 0x32
 800065a:	bf88      	it	hi
 800065c:	f043 0301 	orrhi.w	r3, r3, #1
 8000660:	5573      	strb	r3, [r6, r5]
        bits++;
 8000662:	1c7b      	adds	r3, r7, #1
 8000664:	b2df      	uxtb	r7, r3
        if(!(bits % 8)) packetIndex++;
 8000666:	f013 0f07 	tst.w	r3, #7
 800066a:	d1d2      	bne.n	8000612 <DHT11_ReadBits+0xa>
 800066c:	3501      	adds	r5, #1
 800066e:	b2ed      	uxtb	r5, r5
 8000670:	e7cf      	b.n	8000612 <DHT11_ReadBits+0xa>
 8000672:	b662      	cpsie	i
    return DHT11_OK;
 8000674:	2000      	movs	r0, #0
 8000676:	e7e4      	b.n	8000642 <DHT11_ReadBits+0x3a>

08000678 <DHT11_SetPinMode>:
static void DHT11_SetPinMode(DHT11_Data *dht11, uint8_t MODE) {
 8000678:	b500      	push	{lr}
 800067a:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct = {
 800067c:	2300      	movs	r3, #0
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	9303      	str	r3, [sp, #12]
 8000684:	9304      	str	r3, [sp, #16]
 8000686:	9305      	str	r3, [sp, #20]
        .Pin = dht11->_Pin,
 8000688:	8a03      	ldrh	r3, [r0, #16]
    GPIO_InitTypeDef GPIO_InitStruct = {
 800068a:	9301      	str	r3, [sp, #4]
        .Mode = MODE ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP,
 800068c:	fab1 f181 	clz	r1, r1
 8000690:	0949      	lsrs	r1, r1, #5
    GPIO_InitTypeDef GPIO_InitStruct = {
 8000692:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(dht11->_GPIOx, &GPIO_InitStruct);
 8000694:	a901      	add	r1, sp, #4
 8000696:	68c0      	ldr	r0, [r0, #12]
 8000698:	f001 fc60 	bl	8001f5c <HAL_GPIO_Init>
}
 800069c:	b007      	add	sp, #28
 800069e:	f85d fb04 	ldr.w	pc, [sp], #4

080006a2 <DHT11_Start>:
static DHT11_StatusTypeDef DHT11_Start(DHT11_Data *dht11) {
 80006a2:	b510      	push	{r4, lr}
 80006a4:	4604      	mov	r4, r0
    DHT11_SetPinMode(dht11, DHT11_PIN_OUTPUT);
 80006a6:	2100      	movs	r1, #0
 80006a8:	f7ff ffe6 	bl	8000678 <DHT11_SetPinMode>
    HAL_GPIO_WritePin(dht11->_GPIOx, dht11->_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	8a21      	ldrh	r1, [r4, #16]
 80006b0:	68e0      	ldr	r0, [r4, #12]
 80006b2:	f001 fd50 	bl	8002156 <HAL_GPIO_WritePin>
    HAL_Delay(20);  // Kéo xuống LOW trong 20ms
 80006b6:	2014      	movs	r0, #20
 80006b8:	f001 f920 	bl	80018fc <HAL_Delay>
    HAL_GPIO_WritePin(dht11->_GPIOx, dht11->_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	8a21      	ldrh	r1, [r4, #16]
 80006c0:	68e0      	ldr	r0, [r4, #12]
 80006c2:	f001 fd48 	bl	8002156 <HAL_GPIO_WritePin>
    DHT11_DelayUs(dht11->_Tim, 40);  // Kéo lên HIGH trong 40us
 80006c6:	2128      	movs	r1, #40	@ 0x28
 80006c8:	6960      	ldr	r0, [r4, #20]
 80006ca:	f7ff ff6f 	bl	80005ac <DHT11_DelayUs>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ce:	b672      	cpsid	i
    DHT11_SetPinMode(dht11, DHT11_PIN_INPUT);
 80006d0:	2101      	movs	r1, #1
 80006d2:	4620      	mov	r0, r4
 80006d4:	f7ff ffd0 	bl	8000678 <DHT11_SetPinMode>
    if(HAL_GPIO_ReadPin(dht11->_GPIOx, dht11->_Pin) == GPIO_PIN_SET) {
 80006d8:	8a21      	ldrh	r1, [r4, #16]
 80006da:	68e0      	ldr	r0, [r4, #12]
 80006dc:	f001 fd34 	bl	8002148 <HAL_GPIO_ReadPin>
 80006e0:	2801      	cmp	r0, #1
 80006e2:	d00b      	beq.n	80006fc <DHT11_Start+0x5a>
    if(!DHT11_ObserveState(dht11, GPIO_PIN_SET)) {
 80006e4:	2101      	movs	r1, #1
 80006e6:	4620      	mov	r0, r4
 80006e8:	f7ff ff78 	bl	80005dc <DHT11_ObserveState>
 80006ec:	b148      	cbz	r0, 8000702 <DHT11_Start+0x60>
    if(!DHT11_ObserveState(dht11, GPIO_PIN_RESET)) {
 80006ee:	2100      	movs	r1, #0
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff ff73 	bl	80005dc <DHT11_ObserveState>
 80006f6:	b138      	cbz	r0, 8000708 <DHT11_Start+0x66>
    return DHT11_OK;
 80006f8:	2000      	movs	r0, #0
}
 80006fa:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsie i" : : : "memory");
 80006fc:	b662      	cpsie	i
        return DHT11_ERROR;
 80006fe:	2002      	movs	r0, #2
 8000700:	e7fb      	b.n	80006fa <DHT11_Start+0x58>
 8000702:	b662      	cpsie	i
        return DHT11_TIMEOUT;
 8000704:	2096      	movs	r0, #150	@ 0x96
 8000706:	e7f8      	b.n	80006fa <DHT11_Start+0x58>
 8000708:	b662      	cpsie	i
        return DHT11_TIMEOUT;
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	e7f5      	b.n	80006fa <DHT11_Start+0x58>
	...

08000710 <DHT11_Init>:
    if (!dht11 || !GPIOx || !htim) {
 8000710:	b1d0      	cbz	r0, 8000748 <DHT11_Init+0x38>
void DHT11_Init(DHT11_Data *dht11, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *htim) {
 8000712:	b538      	push	{r3, r4, r5, lr}
 8000714:	4604      	mov	r4, r0
    if (!dht11 || !GPIOx || !htim) {
 8000716:	b1b1      	cbz	r1, 8000746 <DHT11_Init+0x36>
 8000718:	b1ab      	cbz	r3, 8000746 <DHT11_Init+0x36>
    dht11->_GPIOx = GPIOx;
 800071a:	60c1      	str	r1, [r0, #12]
    dht11->_Pin = GPIO_Pin;
 800071c:	8202      	strh	r2, [r0, #16]
    dht11->_Tim = htim;
 800071e:	6143      	str	r3, [r0, #20]
    dht11->Temperature = 0.0f;
 8000720:	2300      	movs	r3, #0
 8000722:	6003      	str	r3, [r0, #0]
    dht11->Humidity = 0.0f;
 8000724:	6043      	str	r3, [r0, #4]
    dht11->Status = DHT11_OK;
 8000726:	2500      	movs	r5, #0
 8000728:	7205      	strb	r5, [r0, #8]
    dht11->CheckSum_OK = 0;
 800072a:	7245      	strb	r5, [r0, #9]
    lastBlinkTime = HAL_GetTick();
 800072c:	f001 f8e0 	bl	80018f0 <HAL_GetTick>
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <DHT11_Init+0x3c>)
 8000732:	6018      	str	r0, [r3, #0]
    HAL_GPIO_WritePin(DHT11_LED_PORT, DHT11_LED_PIN, GPIO_PIN_RESET);
 8000734:	462a      	mov	r2, r5
 8000736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <DHT11_Init+0x40>)
 800073c:	f001 fd0b 	bl	8002156 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start(dht11->_Tim);
 8000740:	6960      	ldr	r0, [r4, #20]
 8000742:	f002 fba1 	bl	8002e88 <HAL_TIM_Base_Start>
}
 8000746:	bd38      	pop	{r3, r4, r5, pc}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2000007c 	.word	0x2000007c
 8000750:	40020c00 	.word	0x40020c00

08000754 <DHT11_ReadData>:
DHT11_StatusTypeDef DHT11_ReadData(DHT11_Data *data) {
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	b083      	sub	sp, #12
    if (!data) return DHT11_ERROR;
 8000758:	2800      	cmp	r0, #0
 800075a:	d049      	beq.n	80007f0 <DHT11_ReadData+0x9c>
 800075c:	4604      	mov	r4, r0
    uint8_t packets[DHT11_MAX_BYTE_PACKETS] = {0};
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	f88d 3004 	strb.w	r3, [sp, #4]
    status = DHT11_Start(data);
 8000766:	f7ff ff9c 	bl	80006a2 <DHT11_Start>
    if (status != DHT11_OK) {
 800076a:	4605      	mov	r5, r0
 800076c:	b128      	cbz	r0, 800077a <DHT11_ReadData+0x26>
        data->Status = status;
 800076e:	7220      	strb	r0, [r4, #8]
        data->CheckSum_OK = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	7263      	strb	r3, [r4, #9]
}
 8000774:	4628      	mov	r0, r5
 8000776:	b003      	add	sp, #12
 8000778:	bd30      	pop	{r4, r5, pc}
    status = DHT11_ReadBits(data, packets);
 800077a:	4669      	mov	r1, sp
 800077c:	4620      	mov	r0, r4
 800077e:	f7ff ff43 	bl	8000608 <DHT11_ReadBits>
    if (status != DHT11_OK) {
 8000782:	4605      	mov	r5, r0
 8000784:	bb68      	cbnz	r0, 80007e2 <DHT11_ReadData+0x8e>
    data->CheckSum_OK = DHT11_CheckSum_Verify(packets);
 8000786:	4668      	mov	r0, sp
 8000788:	f7ff ff18 	bl	80005bc <DHT11_CheckSum_Verify>
 800078c:	7260      	strb	r0, [r4, #9]
    if (!data->CheckSum_OK) {
 800078e:	b360      	cbz	r0, 80007ea <DHT11_ReadData+0x96>
    data->Humidity = packets[0] + (packets[1] * 0.1f);
 8000790:	f89d 3000 	ldrb.w	r3, [sp]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800079c:	ee07 3a10 	vmov	s14, r3
 80007a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80007a4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80007f4 <DHT11_ReadData+0xa0>
 80007a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80007ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007b4:	edc4 7a01 	vstr	s15, [r4, #4]
    data->Temperature = packets[2] + (packets[3] * 0.1f);
 80007b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80007c4:	ee07 3a10 	vmov	s14, r3
 80007c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80007cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80007d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007d8:	edc4 7a00 	vstr	s15, [r4]
    data->Status = DHT11_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	7223      	strb	r3, [r4, #8]
    return DHT11_OK;
 80007e0:	e7c8      	b.n	8000774 <DHT11_ReadData+0x20>
        data->Status = status;
 80007e2:	7220      	strb	r0, [r4, #8]
        data->CheckSum_OK = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	7263      	strb	r3, [r4, #9]
        return status;
 80007e8:	e7c4      	b.n	8000774 <DHT11_ReadData+0x20>
        data->Status = DHT11_CHECKSUM_MISMATCH;
 80007ea:	2503      	movs	r5, #3
 80007ec:	7225      	strb	r5, [r4, #8]
        return DHT11_CHECKSUM_MISMATCH;
 80007ee:	e7c1      	b.n	8000774 <DHT11_ReadData+0x20>
    if (!data) return DHT11_ERROR;
 80007f0:	2502      	movs	r5, #2
 80007f2:	e7bf      	b.n	8000774 <DHT11_ReadData+0x20>
 80007f4:	3dcccccd 	.word	0x3dcccccd

080007f8 <DHT11_ControlLED>:
    if (!data) return;
 80007f8:	b1d0      	cbz	r0, 8000830 <DHT11_ControlLED+0x38>
void DHT11_ControlLED(DHT11_Data *data, uint32_t currentTime) {
 80007fa:	b510      	push	{r4, lr}
 80007fc:	460c      	mov	r4, r1
    if (data->CheckSum_OK && data->Status == DHT11_OK) {
 80007fe:	7a42      	ldrb	r2, [r0, #9]
 8000800:	b10a      	cbz	r2, 8000806 <DHT11_ControlLED+0xe>
 8000802:	7a03      	ldrb	r3, [r0, #8]
 8000804:	b12b      	cbz	r3, 8000812 <DHT11_ControlLED+0x1a>
        if (currentTime - lastBlinkTime >= 200) {
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <DHT11_ControlLED+0x3c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1ae3      	subs	r3, r4, r3
 800080c:	2bc7      	cmp	r3, #199	@ 0xc7
 800080e:	d807      	bhi.n	8000820 <DHT11_ControlLED+0x28>
}
 8000810:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(DHT11_LED_PORT, DHT11_LED_PIN, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <DHT11_ControlLED+0x40>)
 800081a:	f001 fc9c 	bl	8002156 <HAL_GPIO_WritePin>
 800081e:	e7f7      	b.n	8000810 <DHT11_ControlLED+0x18>
            HAL_GPIO_TogglePin(DHT11_LED_PORT, DHT11_LED_PIN);
 8000820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <DHT11_ControlLED+0x40>)
 8000826:	f001 fc9c 	bl	8002162 <HAL_GPIO_TogglePin>
            lastBlinkTime = currentTime;
 800082a:	4b02      	ldr	r3, [pc, #8]	@ (8000834 <DHT11_ControlLED+0x3c>)
 800082c:	601c      	str	r4, [r3, #0]
 800082e:	e7ef      	b.n	8000810 <DHT11_ControlLED+0x18>
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2000007c 	.word	0x2000007c
 8000838:	40020c00 	.word	0x40020c00

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2400      	movs	r4, #0
 8000842:	9405      	str	r4, [sp, #20]
 8000844:	9406      	str	r4, [sp, #24]
 8000846:	9407      	str	r4, [sp, #28]
 8000848:	9408      	str	r4, [sp, #32]
 800084a:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	9400      	str	r4, [sp, #0]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xbc>)
 8000850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000852:	f042 0204 	orr.w	r2, r2, #4
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
 8000858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085a:	f002 0204 	and.w	r2, r2, #4
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	9401      	str	r4, [sp, #4]
 8000864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000866:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800086a:	631a      	str	r2, [r3, #48]	@ 0x30
 800086c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	9402      	str	r4, [sp, #8]
 8000878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000882:	f002 0201 	and.w	r2, r2, #1
 8000886:	9202      	str	r2, [sp, #8]
 8000888:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	9403      	str	r4, [sp, #12]
 800088c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088e:	f042 0208 	orr.w	r2, r2, #8
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
 8000894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000896:	f002 0208 	and.w	r2, r2, #8
 800089a:	9203      	str	r2, [sp, #12]
 800089c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	9404      	str	r4, [sp, #16]
 80008a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a2:	f042 0202 	orr.w	r2, r2, #2
 80008a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	9304      	str	r3, [sp, #16]
 80008b0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80008b2:	4f12      	ldr	r7, [pc, #72]	@ (80008fc <MX_GPIO_Init+0xc0>)
 80008b4:	4622      	mov	r2, r4
 80008b6:	2108      	movs	r1, #8
 80008b8:	4638      	mov	r0, r7
 80008ba:	f001 fc4c 	bl	8002156 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008be:	4e10      	ldr	r6, [pc, #64]	@ (8000900 <MX_GPIO_Init+0xc4>)
 80008c0:	4622      	mov	r2, r4
 80008c2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80008c6:	4630      	mov	r0, r6
 80008c8:	f001 fc45 	bl	8002156 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008cc:	2308      	movs	r3, #8
 80008ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2501      	movs	r5, #1
 80008d2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	a905      	add	r1, sp, #20
 80008da:	4638      	mov	r0, r7
 80008dc:	f001 fb3e 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 (UART LED) PD14 (MQ2 Alarm LED) PD15 (DHT11 LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80008e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	a905      	add	r1, sp, #20
 80008ee:	4630      	mov	r0, r6
 80008f0:	f001 fb34 	bl	8001f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	b00b      	add	sp, #44	@ 0x2c
 80008f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020c00 	.word	0x40020c00

08000904 <DHT11_ProcessReading>:
void DHT11_ProcessReading(uint32_t currentTime) {
 8000904:	b508      	push	{r3, lr}
    if (currentTime - lastReadTime >= DHT11_READ_INTERVAL) {
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <DHT11_ProcessReading+0x50>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1ac3      	subs	r3, r0, r3
 800090c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000910:	d200      	bcs.n	8000914 <DHT11_ProcessReading+0x10>
}
 8000912:	bd08      	pop	{r3, pc}
        lastReadTime = currentTime;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <DHT11_ProcessReading+0x50>)
 8000916:	6018      	str	r0, [r3, #0]
        readCount++;
 8000918:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <DHT11_ProcessReading+0x54>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	6013      	str	r3, [r2, #0]
        DHT11_StatusTypeDef status = DHT11_ReadData(&dht11Data);
 8000920:	480e      	ldr	r0, [pc, #56]	@ (800095c <DHT11_ProcessReading+0x58>)
 8000922:	f7ff ff17 	bl	8000754 <DHT11_ReadData>
        lastStatus = status;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <DHT11_ProcessReading+0x5c>)
 8000928:	7018      	strb	r0, [r3, #0]
        if (status == DHT11_OK) {
 800092a:	b950      	cbnz	r0, 8000942 <DHT11_ProcessReading+0x3e>
            currentTemperature = dht11Data.Temperature;
 800092c:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <DHT11_ProcessReading+0x58>)
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	4a0c      	ldr	r2, [pc, #48]	@ (8000964 <DHT11_ProcessReading+0x60>)
 8000932:	6011      	str	r1, [r2, #0]
            currentHumidity = dht11Data.Humidity;
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <DHT11_ProcessReading+0x64>)
 8000938:	6011      	str	r1, [r2, #0]
            isChecksumValid = dht11Data.CheckSum_OK;
 800093a:	7a5a      	ldrb	r2, [r3, #9]
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <DHT11_ProcessReading+0x68>)
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e7e7      	b.n	8000912 <DHT11_ProcessReading+0xe>
            errorCount++;
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <DHT11_ProcessReading+0x6c>)
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	6013      	str	r3, [r2, #0]
            isChecksumValid = 0;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <DHT11_ProcessReading+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	e7df      	b.n	8000912 <DHT11_ProcessReading+0xe>
 8000952:	bf00      	nop
 8000954:	2000008c 	.word	0x2000008c
 8000958:	200000a4 	.word	0x200000a4
 800095c:	200000dc 	.word	0x200000dc
 8000960:	200000a8 	.word	0x200000a8
 8000964:	200000b0 	.word	0x200000b0
 8000968:	200000ac 	.word	0x200000ac
 800096c:	200000a9 	.word	0x200000a9
 8000970:	200000a0 	.word	0x200000a0

08000974 <MQ2_ProcessReading>:
void MQ2_ProcessReading(uint32_t currentTime) {
 8000974:	b508      	push	{r3, lr}
    if (currentTime - lastReadTime >= MQ2_READ_INTERVAL) {
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MQ2_ProcessReading+0x5c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1ac3      	subs	r3, r0, r3
 800097c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000980:	d200      	bcs.n	8000984 <MQ2_ProcessReading+0x10>
}
 8000982:	bd08      	pop	{r3, pc}
        lastReadTime = currentTime;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MQ2_ProcessReading+0x5c>)
 8000986:	6018      	str	r0, [r3, #0]
        MQ2_StatusTypeDef status = MQ2_ReadAllValues(&mq2Data);
 8000988:	4812      	ldr	r0, [pc, #72]	@ (80009d4 <MQ2_ProcessReading+0x60>)
 800098a:	f000 fc61 	bl	8001250 <MQ2_ReadAllValues>
        mq2Status = status;
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MQ2_ProcessReading+0x64>)
 8000990:	7018      	strb	r0, [r3, #0]
        if (status == MQ2_OK) {
 8000992:	2800      	cmp	r0, #0
 8000994:	d1f5      	bne.n	8000982 <MQ2_ProcessReading+0xe>
            currentGasValue = mq2Data.GasConcentration;
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MQ2_ProcessReading+0x60>)
 8000998:	6899      	ldr	r1, [r3, #8]
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <MQ2_ProcessReading+0x68>)
 800099c:	6011      	str	r1, [r2, #0]
            currentLPGValue = mq2Data.LPGConcentration;
 800099e:	6919      	ldr	r1, [r3, #16]
 80009a0:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <MQ2_ProcessReading+0x6c>)
 80009a2:	6011      	str	r1, [r2, #0]
            currentSmokeValue = mq2Data.SmokeConcentration;
 80009a4:	68d9      	ldr	r1, [r3, #12]
 80009a6:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <MQ2_ProcessReading+0x70>)
 80009a8:	6011      	str	r1, [r2, #0]
            currentGasLevel = mq2Data.Level;
 80009aa:	7d1a      	ldrb	r2, [r3, #20]
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MQ2_ProcessReading+0x74>)
 80009ae:	701a      	strb	r2, [r3, #0]
            if (isFirstRead) {
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MQ2_ProcessReading+0x78>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0e4      	beq.n	8000982 <MQ2_ProcessReading+0xe>
                isFirstRead = 0;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MQ2_ProcessReading+0x78>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
                if (!mq2Data._isCalibrated) {
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <MQ2_ProcessReading+0x60>)
 80009c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1dc      	bne.n	8000982 <MQ2_ProcessReading+0xe>
                    MQ2_Calibrate(&mq2Data);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <MQ2_ProcessReading+0x60>)
 80009ca:	f000 fb7d 	bl	80010c8 <MQ2_Calibrate>
}
 80009ce:	e7d8      	b.n	8000982 <MQ2_ProcessReading+0xe>
 80009d0:	20000088 	.word	0x20000088
 80009d4:	200000b4 	.word	0x200000b4
 80009d8:	20000090 	.word	0x20000090
 80009dc:	2000009c 	.word	0x2000009c
 80009e0:	20000098 	.word	0x20000098
 80009e4:	20000094 	.word	0x20000094
 80009e8:	20000091 	.word	0x20000091
 80009ec:	20000000 	.word	0x20000000

080009f0 <OLED_ProcessUpdate>:
    if (currentTime - lastUpdateTime >= OLED_UPDATE_INTERVAL) {
 80009f0:	4b66      	ldr	r3, [pc, #408]	@ (8000b8c <OLED_ProcessUpdate+0x19c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1ac3      	subs	r3, r0, r3
 80009f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80009f8:	d800      	bhi.n	80009fc <OLED_ProcessUpdate+0xc>
 80009fa:	4770      	bx	lr
void OLED_ProcessUpdate(uint32_t currentTime) {
 80009fc:	b530      	push	{r4, r5, lr}
 80009fe:	b08b      	sub	sp, #44	@ 0x2c
        lastUpdateTime = currentTime;
 8000a00:	4b62      	ldr	r3, [pc, #392]	@ (8000b8c <OLED_ProcessUpdate+0x19c>)
 8000a02:	6018      	str	r0, [r3, #0]
        ssd1306_Fill(Black);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fc89 	bl	800131c <ssd1306_Fill>
        ssd1306_SetCursor(1, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 fd4d 	bl	80014ac <ssd1306_SetCursor>
        if (readCount > 1 && lastStatus == DHT11_OK) {
 8000a12:	4b5f      	ldr	r3, [pc, #380]	@ (8000b90 <OLED_ProcessUpdate+0x1a0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d903      	bls.n	8000a22 <OLED_ProcessUpdate+0x32>
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b94 <OLED_ProcessUpdate+0x1a4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d067      	beq.n	8000af2 <OLED_ProcessUpdate+0x102>
            if (readCount <= 1) {
 8000a22:	4b5b      	ldr	r3, [pc, #364]	@ (8000b90 <OLED_ProcessUpdate+0x1a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d97e      	bls.n	8000b28 <OLED_ProcessUpdate+0x138>
                snprintf(oled_buffer, sizeof(oled_buffer), "Nhiet Do: Error");
 8000a2a:	ac02      	add	r4, sp, #8
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <OLED_ProcessUpdate+0x1a8>)
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ssd1306_WriteString(oled_buffer, Font_7x10, White);
 8000a34:	4b59      	ldr	r3, [pc, #356]	@ (8000b9c <OLED_ProcessUpdate+0x1ac>)
 8000a36:	2401      	movs	r4, #1
 8000a38:	9400      	str	r4, [sp, #0]
 8000a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a3c:	a802      	add	r0, sp, #8
 8000a3e:	f000 fd1d 	bl	800147c <ssd1306_WriteString>
        ssd1306_SetCursor(1, 15);
 8000a42:	210f      	movs	r1, #15
 8000a44:	4620      	mov	r0, r4
 8000a46:	f000 fd31 	bl	80014ac <ssd1306_SetCursor>
        if (readCount > 1 && lastStatus == DHT11_OK) {
 8000a4a:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <OLED_ProcessUpdate+0x1a0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d903      	bls.n	8000a5a <OLED_ProcessUpdate+0x6a>
 8000a52:	4b50      	ldr	r3, [pc, #320]	@ (8000b94 <OLED_ProcessUpdate+0x1a4>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d06d      	beq.n	8000b36 <OLED_ProcessUpdate+0x146>
            if (readCount <= 1) {
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <OLED_ProcessUpdate+0x1a0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	f240 8084 	bls.w	8000b6c <OLED_ProcessUpdate+0x17c>
                snprintf(oled_buffer, sizeof(oled_buffer), "Do Am:  Error");
 8000a64:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba0 <OLED_ProcessUpdate+0x1b0>)
 8000a66:	f10d 0c08 	add.w	ip, sp, #8
 8000a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a6c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000a70:	f8ac 3000 	strh.w	r3, [ip]
        ssd1306_WriteString(oled_buffer, Font_7x10, White);
 8000a74:	4b49      	ldr	r3, [pc, #292]	@ (8000b9c <OLED_ProcessUpdate+0x1ac>)
 8000a76:	2401      	movs	r4, #1
 8000a78:	9400      	str	r4, [sp, #0]
 8000a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7c:	a802      	add	r0, sp, #8
 8000a7e:	f000 fcfd 	bl	800147c <ssd1306_WriteString>
        ssd1306_SetCursor(1, 30);
 8000a82:	211e      	movs	r1, #30
 8000a84:	4620      	mov	r0, r4
 8000a86:	f000 fd11 	bl	80014ac <ssd1306_SetCursor>
        if (mq2Status == MQ2_OK) {
 8000a8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ba4 <OLED_ProcessUpdate+0x1b4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d176      	bne.n	8000b80 <OLED_ProcessUpdate+0x190>
            int gas_whole = (int)currentGasValue;
 8000a92:	4b45      	ldr	r3, [pc, #276]	@ (8000ba8 <OLED_ProcessUpdate+0x1b8>)
 8000a94:	ed93 7a00 	vldr	s14, [r3]
 8000a98:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            int gas_frac = (int)((currentGasValue - gas_whole) * 10);
 8000a9c:	edd3 7a00 	vldr	s15, [r3]
 8000aa0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000aa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000aa8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if (currentGasLevel == MQ2_LEVEL_DANGER) {
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <OLED_ProcessUpdate+0x1bc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d05c      	beq.n	8000b78 <OLED_ProcessUpdate+0x188>
            } else if (currentGasLevel == MQ2_LEVEL_WARNING) {
 8000abe:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <OLED_ProcessUpdate+0x1bc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d059      	beq.n	8000b7c <OLED_ProcessUpdate+0x18c>
            const char* levelMarker = "";
 8000ac8:	4b39      	ldr	r3, [pc, #228]	@ (8000bb0 <OLED_ProcessUpdate+0x1c0>)
            snprintf(oled_buffer, sizeof(oled_buffer), "%sGas:  %d.%d ppm", levelMarker, gas_whole, gas_frac);
 8000aca:	edcd 7a01 	vstr	s15, [sp, #4]
 8000ace:	ed8d 7a00 	vstr	s14, [sp]
 8000ad2:	4a38      	ldr	r2, [pc, #224]	@ (8000bb4 <OLED_ProcessUpdate+0x1c4>)
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	a802      	add	r0, sp, #8
 8000ad8:	f002 fd0a 	bl	80034f0 <sniprintf>
        ssd1306_WriteString(oled_buffer, Font_7x10, White);
 8000adc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <OLED_ProcessUpdate+0x1ac>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ae4:	a802      	add	r0, sp, #8
 8000ae6:	f000 fcc9 	bl	800147c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8000aea:	f000 fc25 	bl	8001338 <ssd1306_UpdateScreen>
}
 8000aee:	b00b      	add	sp, #44	@ 0x2c
 8000af0:	bd30      	pop	{r4, r5, pc}
            int temp_whole = (int)currentTemperature;
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <OLED_ProcessUpdate+0x1c8>)
 8000af4:	ed93 7a00 	vldr	s14, [r3]
 8000af8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            int temp_frac = (int)((currentTemperature - temp_whole) * 10);
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000b0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            snprintf(oled_buffer, sizeof(oled_buffer), "Nhiet Do: %d.%d C", temp_whole, temp_frac);
 8000b14:	edcd 7a00 	vstr	s15, [sp]
 8000b18:	ee17 3a10 	vmov	r3, s14
 8000b1c:	4a27      	ldr	r2, [pc, #156]	@ (8000bbc <OLED_ProcessUpdate+0x1cc>)
 8000b1e:	2120      	movs	r1, #32
 8000b20:	a802      	add	r0, sp, #8
 8000b22:	f002 fce5 	bl	80034f0 <sniprintf>
        if (readCount > 1 && lastStatus == DHT11_OK) {
 8000b26:	e785      	b.n	8000a34 <OLED_ProcessUpdate+0x44>
                snprintf(oled_buffer, sizeof(oled_buffer), "Nhiet Do: Init...");
 8000b28:	ac02      	add	r4, sp, #8
 8000b2a:	4d25      	ldr	r5, [pc, #148]	@ (8000bc0 <OLED_ProcessUpdate+0x1d0>)
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	8023      	strh	r3, [r4, #0]
 8000b34:	e77e      	b.n	8000a34 <OLED_ProcessUpdate+0x44>
            int hum_whole = (int)currentHumidity;
 8000b36:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <OLED_ProcessUpdate+0x1d4>)
 8000b38:	ed93 7a00 	vldr	s14, [r3]
 8000b3c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            int hum_frac = (int)((currentHumidity - hum_whole) * 10);
 8000b40:	edd3 7a00 	vldr	s15, [r3]
 8000b44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000b50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            snprintf(oled_buffer, sizeof(oled_buffer), "Do Am:  %d.%d %%", hum_whole, hum_frac);
 8000b58:	edcd 7a00 	vstr	s15, [sp]
 8000b5c:	ee17 3a10 	vmov	r3, s14
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <OLED_ProcessUpdate+0x1d8>)
 8000b62:	2120      	movs	r1, #32
 8000b64:	a802      	add	r0, sp, #8
 8000b66:	f002 fcc3 	bl	80034f0 <sniprintf>
        if (readCount > 1 && lastStatus == DHT11_OK) {
 8000b6a:	e783      	b.n	8000a74 <OLED_ProcessUpdate+0x84>
                snprintf(oled_buffer, sizeof(oled_buffer), "Do Am:  Init...");
 8000b6c:	ac02      	add	r4, sp, #8
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <OLED_ProcessUpdate+0x1dc>)
 8000b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b76:	e77d      	b.n	8000a74 <OLED_ProcessUpdate+0x84>
                levelMarker = "! ";
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <OLED_ProcessUpdate+0x1e0>)
 8000b7a:	e7a6      	b.n	8000aca <OLED_ProcessUpdate+0xda>
                levelMarker = "* ";
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <OLED_ProcessUpdate+0x1e4>)
 8000b7e:	e7a4      	b.n	8000aca <OLED_ProcessUpdate+0xda>
            snprintf(oled_buffer, sizeof(oled_buffer), "Gas:  Cal...");
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <OLED_ProcessUpdate+0x1e8>)
 8000b82:	ac02      	add	r4, sp, #8
 8000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b86:	c407      	stmia	r4!, {r0, r1, r2}
 8000b88:	7023      	strb	r3, [r4, #0]
 8000b8a:	e7a7      	b.n	8000adc <OLED_ProcessUpdate+0xec>
 8000b8c:	20000084 	.word	0x20000084
 8000b90:	200000a4 	.word	0x200000a4
 8000b94:	200000a8 	.word	0x200000a8
 8000b98:	08004674 	.word	0x08004674
 8000b9c:	08004748 	.word	0x08004748
 8000ba0:	080046a8 	.word	0x080046a8
 8000ba4:	20000090 	.word	0x20000090
 8000ba8:	2000009c 	.word	0x2000009c
 8000bac:	20000091 	.word	0x20000091
 8000bb0:	08004694 	.word	0x08004694
 8000bb4:	080046b8 	.word	0x080046b8
 8000bb8:	200000b0 	.word	0x200000b0
 8000bbc:	0800464c 	.word	0x0800464c
 8000bc0:	08004660 	.word	0x08004660
 8000bc4:	200000ac 	.word	0x200000ac
 8000bc8:	08004684 	.word	0x08004684
 8000bcc:	08004698 	.word	0x08004698
 8000bd0:	08004644 	.word	0x08004644
 8000bd4:	08004648 	.word	0x08004648
 8000bd8:	080046cc 	.word	0x080046cc

08000bdc <UART_SendSensorData>:
    if (currentTime - lastSendTime >= UART_SEND_INTERVAL) {
 8000bdc:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <UART_SendSensorData+0xc4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ac3      	subs	r3, r0, r3
 8000be2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000be6:	d307      	bcc.n	8000bf8 <UART_SendSensorData+0x1c>
        lastSendTime = currentTime;
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <UART_SendSensorData+0xc4>)
 8000bea:	6018      	str	r0, [r3, #0]
        if (lastStatus == DHT11_OK && mq2Status == MQ2_OK) {
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <UART_SendSensorData+0xc8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b913      	cbnz	r3, 8000bf8 <UART_SendSensorData+0x1c>
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <UART_SendSensorData+0xcc>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b103      	cbz	r3, 8000bfa <UART_SendSensorData+0x1e>
 8000bf8:	4770      	bx	lr
void UART_SendSensorData(uint32_t currentTime) {
 8000bfa:	b500      	push	{lr}
 8000bfc:	b095      	sub	sp, #84	@ 0x54
            int temp_whole = (int)currentTemperature;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <UART_SendSensorData+0xd0>)
 8000c00:	ed93 6a00 	vldr	s12, [r3]
 8000c04:	eebd 6ac6 	vcvt.s32.f32	s12, s12
            int temp_frac = (int)((currentTemperature - temp_whole) * 10);
 8000c08:	edd3 6a00 	vldr	s13, [r3]
 8000c0c:	eef8 7ac6 	vcvt.f32.s32	s15, s12
 8000c10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c14:	eef2 4a04 	vmov.f32	s9, #36	@ 0x41200000  10.0
 8000c18:	ee66 6aa4 	vmul.f32	s13, s13, s9
            int hum_whole = (int)currentHumidity;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <UART_SendSensorData+0xd4>)
 8000c1e:	edd3 5a00 	vldr	s11, [r3]
 8000c22:	eefd 5ae5 	vcvt.s32.f32	s11, s11
            int hum_frac = (int)((currentHumidity - hum_whole) * 10);
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eeb8 7ae5 	vcvt.f32.s32	s14, s11
 8000c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c32:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            int gas_whole = (int)currentGasValue;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <UART_SendSensorData+0xd8>)
 8000c3c:	ed93 5a00 	vldr	s10, [r3]
 8000c40:	eebd 5ac5 	vcvt.s32.f32	s10, s10
            int gas_frac = (int)((currentGasValue - gas_whole) * 10);
 8000c44:	ed93 7a00 	vldr	s14, [r3]
 8000c48:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
 8000c4c:	ee37 7a44 	vsub.f32	s14, s14, s8
 8000c50:	ee27 7a24 	vmul.f32	s14, s14, s9
 8000c54:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            sprintf(uart_buffer, "DATA: TEMP=%d.%d°C, HUMID=%d.%d%%, GAS=%d.%dppm\r\n",
 8000c58:	ed8d 7a03 	vstr	s14, [sp, #12]
 8000c5c:	ed8d 5a02 	vstr	s10, [sp, #8]
 8000c60:	edcd 7a01 	vstr	s15, [sp, #4]
 8000c64:	edcd 5a00 	vstr	s11, [sp]
 8000c68:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8000c6c:	ee17 3a90 	vmov	r3, s15
 8000c70:	ee16 2a10 	vmov	r2, s12
 8000c74:	4910      	ldr	r1, [pc, #64]	@ (8000cb8 <UART_SendSensorData+0xdc>)
 8000c76:	a804      	add	r0, sp, #16
 8000c78:	f002 fc70 	bl	800355c <siprintf>
            HAL_UART_Transmit(&huart5, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000c7c:	a804      	add	r0, sp, #16
 8000c7e:	f7ff faa7 	bl	80001d0 <strlen>
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	b282      	uxth	r2, r0
 8000c88:	a904      	add	r1, sp, #16
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <UART_SendSensorData+0xe0>)
 8000c8c:	f002 fbc9 	bl	8003422 <HAL_UART_Transmit>
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Đèn báo UART (nếu có)
 8000c90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c94:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <UART_SendSensorData+0xe4>)
 8000c96:	f001 fa64 	bl	8002162 <HAL_GPIO_TogglePin>
}
 8000c9a:	b015      	add	sp, #84	@ 0x54
 8000c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ca0:	20000080 	.word	0x20000080
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	20000090 	.word	0x20000090
 8000cac:	200000b0 	.word	0x200000b0
 8000cb0:	200000ac 	.word	0x200000ac
 8000cb4:	2000009c 	.word	0x2000009c
 8000cb8:	080046dc 	.word	0x080046dc
 8000cbc:	200000f4 	.word	0x200000f4
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <Error_Handler+0x2>

08000cc8 <MX_TIM4_Init>:
{
 8000cc8:	b500      	push	{lr}
 8000cca:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	9303      	str	r3, [sp, #12]
 8000cd2:	9304      	str	r3, [sp, #16]
 8000cd4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	9301      	str	r3, [sp, #4]
  htim4.Instance = TIM4;
 8000cda:	4813      	ldr	r0, [pc, #76]	@ (8000d28 <MX_TIM4_Init+0x60>)
 8000cdc:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <MX_TIM4_Init+0x64>)
 8000cde:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 7;
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cf0:	f002 f970 	bl	8002fd4 <HAL_TIM_Base_Init>
 8000cf4:	b990      	cbnz	r0, 8000d1c <MX_TIM4_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cfc:	a902      	add	r1, sp, #8
 8000cfe:	480a      	ldr	r0, [pc, #40]	@ (8000d28 <MX_TIM4_Init+0x60>)
 8000d00:	f002 f9a1 	bl	8003046 <HAL_TIM_ConfigClockSource>
 8000d04:	b960      	cbnz	r0, 8000d20 <MX_TIM4_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d0c:	4669      	mov	r1, sp
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM4_Init+0x60>)
 8000d10:	f002 fa18 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	b930      	cbnz	r0, 8000d24 <MX_TIM4_Init+0x5c>
}
 8000d16:	b007      	add	sp, #28
 8000d18:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d1c:	f7ff ffd2 	bl	8000cc4 <Error_Handler>
    Error_Handler();
 8000d20:	f7ff ffd0 	bl	8000cc4 <Error_Handler>
    Error_Handler();
 8000d24:	f7ff ffce 	bl	8000cc4 <Error_Handler>
 8000d28:	2000013c 	.word	0x2000013c
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_I2C1_Init>:
{
 8000d30:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000d32:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <MX_I2C1_Init+0x2c>)
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_I2C1_Init+0x30>)
 8000d36:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_I2C1_Init+0x34>)
 8000d3a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d40:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d46:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	f001 fbb4 	bl	80024bc <HAL_I2C_Init>
 8000d54:	b900      	cbnz	r0, 8000d58 <MX_I2C1_Init+0x28>
}
 8000d56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d58:	f7ff ffb4 	bl	8000cc4 <Error_Handler>
 8000d5c:	20000184 	.word	0x20000184
 8000d60:	40005400 	.word	0x40005400
 8000d64:	00061a80 	.word	0x00061a80

08000d68 <MX_ADC1_Init>:
{
 8000d68:	b500      	push	{lr}
 8000d6a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <MX_ADC1_Init+0x5c>)
 8000d78:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <MX_ADC1_Init+0x60>)
 8000d7a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d7c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d80:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d82:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <MX_ADC1_Init+0x64>)
 8000d8c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d90:	2201      	movs	r2, #1
 8000d92:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d94:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9a:	f000 fe5d 	bl	8001a58 <HAL_ADC_Init>
 8000d9e:	b968      	cbnz	r0, 8000dbc <MX_ADC1_Init+0x54>
  sConfig.Channel = ADC_CHANNEL_2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000da8:	2307      	movs	r3, #7
 8000daa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	4669      	mov	r1, sp
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_ADC1_Init+0x5c>)
 8000db0:	f000 ffa0 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000db4:	b920      	cbnz	r0, 8000dc0 <MX_ADC1_Init+0x58>
}
 8000db6:	b005      	add	sp, #20
 8000db8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dbc:	f7ff ff82 	bl	8000cc4 <Error_Handler>
    Error_Handler();
 8000dc0:	f7ff ff80 	bl	8000cc4 <Error_Handler>
 8000dc4:	200001d8 	.word	0x200001d8
 8000dc8:	40012000 	.word	0x40012000
 8000dcc:	0f000001 	.word	0x0f000001

08000dd0 <MX_UART5_Init>:
{
 8000dd0:	b508      	push	{r3, lr}
  huart5.Instance = UART5;
 8000dd2:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <MX_UART5_Init+0x2c>)
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_UART5_Init+0x30>)
 8000dd6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8000dd8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ddc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	2300      	movs	r3, #0
 8000de0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000de2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000de4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000de6:	220c      	movs	r2, #12
 8000de8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dee:	f002 fae8 	bl	80033c2 <HAL_UART_Init>
 8000df2:	b900      	cbnz	r0, 8000df6 <MX_UART5_Init+0x26>
}
 8000df4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000df6:	f7ff ff65 	bl	8000cc4 <Error_Handler>
 8000dfa:	bf00      	nop
 8000dfc:	200000f4 	.word	0x200000f4
 8000e00:	40005000 	.word	0x40005000

08000e04 <SystemClock_Config>:
{
 8000e04:	b500      	push	{lr}
 8000e06:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e08:	2230      	movs	r2, #48	@ 0x30
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	a808      	add	r0, sp, #32
 8000e0e:	f002 fbe1 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	9304      	str	r3, [sp, #16]
 8000e18:	9305      	str	r3, [sp, #20]
 8000e1a:	9306      	str	r3, [sp, #24]
 8000e1c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <SystemClock_Config+0x84>)
 8000e22:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000e24:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000e28:	6411      	str	r1, [r2, #64]	@ 0x40
 8000e2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e2c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <SystemClock_Config+0x88>)
 8000e38:	6811      	ldr	r1, [r2, #0]
 8000e3a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000e3e:	6011      	str	r1, [r2, #0]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e46:	9202      	str	r2, [sp, #8]
 8000e48:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2210      	movs	r2, #16
 8000e54:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e56:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	a808      	add	r0, sp, #32
 8000e5a:	f001 fcbf 	bl	80027dc <HAL_RCC_OscConfig>
 8000e5e:	b970      	cbnz	r0, 8000e7e <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	230f      	movs	r3, #15
 8000e62:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e64:	2100      	movs	r1, #0
 8000e66:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e70:	a803      	add	r0, sp, #12
 8000e72:	f001 ff03 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000e76:	b920      	cbnz	r0, 8000e82 <SystemClock_Config+0x7e>
}
 8000e78:	b015      	add	sp, #84	@ 0x54
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e7e:	f7ff ff21 	bl	8000cc4 <Error_Handler>
    Error_Handler();
 8000e82:	f7ff ff1f 	bl	8000cc4 <Error_Handler>
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <main>:
{
 8000e90:	b510      	push	{r4, lr}
  HAL_Init();
 8000e92:	f000 fd07 	bl	80018a4 <HAL_Init>
  SystemClock_Config();
 8000e96:	f7ff ffb5 	bl	8000e04 <SystemClock_Config>
  MX_GPIO_Init();
 8000e9a:	f7ff fccf 	bl	800083c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e9e:	f7ff ff13 	bl	8000cc8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000ea2:	f7ff ff45 	bl	8000d30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000ea6:	f7ff ff5f 	bl	8000d68 <MX_ADC1_Init>
  MX_UART5_Init();
 8000eaa:	f7ff ff91 	bl	8000dd0 <MX_UART5_Init>
  DHT11_Init(&dht11Data, GPIOA, GPIO_PIN_3, &htim4);
 8000eae:	4c1f      	ldr	r4, [pc, #124]	@ (8000f2c <main+0x9c>)
 8000eb0:	4623      	mov	r3, r4
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	491e      	ldr	r1, [pc, #120]	@ (8000f30 <main+0xa0>)
 8000eb6:	481f      	ldr	r0, [pc, #124]	@ (8000f34 <main+0xa4>)
 8000eb8:	f7ff fc2a 	bl	8000710 <DHT11_Init>
  HAL_TIM_Base_Start(&htim4);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f001 ffe3 	bl	8002e88 <HAL_TIM_Base_Start>
  MQ2_Init(&mq2Data, &hadc1, ADC_CHANNEL_2);
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	491c      	ldr	r1, [pc, #112]	@ (8000f38 <main+0xa8>)
 8000ec6:	481d      	ldr	r0, [pc, #116]	@ (8000f3c <main+0xac>)
 8000ec8:	f000 f8a0 	bl	800100c <MQ2_Init>
  ssd1306_Init();
 8000ecc:	f000 fb0e 	bl	80014ec <ssd1306_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);  // DHT11 LED
 8000ed0:	4c1b      	ldr	r4, [pc, #108]	@ (8000f40 <main+0xb0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f001 f93c 	bl	8002156 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);  // MQ2 Alarm LED
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f001 f936 	bl	8002156 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5, (uint8_t*)"STM32 đã khởi động với cảm biến thực\r\n", 40, 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	2228      	movs	r2, #40	@ 0x28
 8000ef0:	4914      	ldr	r1, [pc, #80]	@ (8000f44 <main+0xb4>)
 8000ef2:	4815      	ldr	r0, [pc, #84]	@ (8000f48 <main+0xb8>)
 8000ef4:	f002 fa95 	bl	8003422 <HAL_UART_Transmit>
    uint32_t currentTime = HAL_GetTick();
 8000ef8:	f000 fcfa 	bl	80018f0 <HAL_GetTick>
 8000efc:	4604      	mov	r4, r0
    DHT11_ProcessReading(currentTime);
 8000efe:	f7ff fd01 	bl	8000904 <DHT11_ProcessReading>
    MQ2_ProcessReading(currentTime);
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fd36 	bl	8000974 <MQ2_ProcessReading>
    OLED_ProcessUpdate(currentTime);
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff fd71 	bl	80009f0 <OLED_ProcessUpdate>
    UART_SendSensorData(currentTime);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fe64 	bl	8000bdc <UART_SendSensorData>
    DHT11_ControlLED(&dht11Data, currentTime);
 8000f14:	4621      	mov	r1, r4
 8000f16:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <main+0xa4>)
 8000f18:	f7ff fc6e 	bl	80007f8 <DHT11_ControlLED>
    MQ2_ControlAlarm(&mq2Data, currentTime);
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <main+0xac>)
 8000f20:	f000 f99a 	bl	8001258 <MQ2_ControlAlarm>
    HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f000 fce9 	bl	80018fc <HAL_Delay>
  while (1)
 8000f2a:	e7e5      	b.n	8000ef8 <main+0x68>
 8000f2c:	2000013c 	.word	0x2000013c
 8000f30:	40020000 	.word	0x40020000
 8000f34:	200000dc 	.word	0x200000dc
 8000f38:	200001d8 	.word	0x200001d8
 8000f3c:	200000b4 	.word	0x200000b4
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	08004710 	.word	0x08004710
 8000f48:	200000f4 	.word	0x200000f4

08000f4c <MQ2_CalculateResistance>:
  * @param  adc_value: giá trị ADC đọc được
  * @retval float: giá trị điện trở (kΩ)
  */
static float MQ2_CalculateResistance(float adc_value) {
    // Tránh chia cho 0
    if (adc_value >= MQ2_ADC_RESOLUTION - 1) {
 8000f4c:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8000f9c <MQ2_CalculateResistance+0x50>
 8000f50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	da19      	bge.n	8000f8e <MQ2_CalculateResistance+0x42>
    }

    // Công thức: Rs = RL * (Vin - Vout) / Vout
    // Vout = adc_value * Vref / ADC_resolution
    // Vin = Vref
    float vout = (adc_value / MQ2_ADC_RESOLUTION) * MQ2_VREF;
 8000f5a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000fa0 <MQ2_CalculateResistance+0x54>
 8000f5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000f62:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8000fa4 <MQ2_CalculateResistance+0x58>
 8000f66:	ee20 0a27 	vmul.f32	s0, s0, s15

    // Tránh chia cho 0
    if (vout < 0.1f) {
 8000f6a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8000fa8 <MQ2_CalculateResistance+0x5c>
 8000f6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d40d      	bmi.n	8000f94 <MQ2_CalculateResistance+0x48>
        return 999999.0f; // Giá trị lớn để biểu thị điện trở rất cao
    }

    return MQ2_RL_VALUE * ((MQ2_VREF - vout) / vout);
 8000f78:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000fa4 <MQ2_CalculateResistance+0x58>
 8000f7c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8000f80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8000f84:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f88:	ee27 0a87 	vmul.f32	s0, s15, s14
 8000f8c:	4770      	bx	lr
        return 0.0f;
 8000f8e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000fac <MQ2_CalculateResistance+0x60>
 8000f92:	4770      	bx	lr
        return 999999.0f; // Giá trị lớn để biểu thị điện trở rất cao
 8000f94:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000fb0 <MQ2_CalculateResistance+0x64>
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	457ff000 	.word	0x457ff000
 8000fa0:	39800000 	.word	0x39800000
 8000fa4:	40533333 	.word	0x40533333
 8000fa8:	3dcccccd 	.word	0x3dcccccd
 8000fac:	00000000 	.word	0x00000000
 8000fb0:	497423f0 	.word	0x497423f0

08000fb4 <MQ2_CalculateRatio>:
  * @brief  Tính toán tỷ lệ Rs/R0
  * @param  rs_value: giá trị điện trở cảm biến
  * @param  r0_value: giá trị điện trở chuẩn
  * @retval float: tỷ lệ Rs/R0
  */
static float MQ2_CalculateRatio(float rs_value, float r0_value) {
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
    // Tránh chia cho 0
    if (r0_value < 0.1f) {
 8000fb8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fd4 <MQ2_CalculateRatio+0x20>
 8000fbc:	eef4 0ac7 	vcmpe.f32	s1, s14
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	d402      	bmi.n	8000fcc <MQ2_CalculateRatio+0x18>
        return 0.0f;
    }

    return rs_value / r0_value;
 8000fc6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8000fca:	4770      	bx	lr
        return 0.0f;
 8000fcc:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8000fd8 <MQ2_CalculateRatio+0x24>
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	3dcccccd 	.word	0x3dcccccd
 8000fd8:	00000000 	.word	0x00000000

08000fdc <MQ2_CalculatePPM>:
  * @retval float: nồng độ khí gas (ppm)
  * @note   Công thức: ppm = a * (Rs/R0)^b
  */
static float MQ2_CalculatePPM(float rs_ro_ratio, float curve_a, float curve_b) {
    // Tránh giá trị không hợp lệ
    if (rs_ro_ratio <= 0.0f) {
 8000fdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d90d      	bls.n	8001002 <MQ2_CalculatePPM+0x26>
static float MQ2_CalculatePPM(float rs_ro_ratio, float curve_a, float curve_b) {
 8000fe6:	b508      	push	{r3, lr}
 8000fe8:	ed2d 8b02 	vpush	{d8}
 8000fec:	eeb0 8a60 	vmov.f32	s16, s1
 8000ff0:	eef0 0a41 	vmov.f32	s1, s2
        return 0.0f;
    }

    // Áp dụng công thức từ datasheet
    return curve_a * powf(rs_ro_ratio, curve_b);
 8000ff4:	f002 ff52 	bl	8003e9c <powf>
 8000ff8:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8000ffc:	ecbd 8b02 	vpop	{d8}
 8001000:	bd08      	pop	{r3, pc}
        return 0.0f;
 8001002:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001008 <MQ2_CalculatePPM+0x2c>
}
 8001006:	4770      	bx	lr
 8001008:	00000000 	.word	0x00000000

0800100c <MQ2_Init>:
    if (!mq2 || !hadc) {
 800100c:	b1d0      	cbz	r0, 8001044 <MQ2_Init+0x38>
void MQ2_Init(MQ2_Data *mq2, ADC_HandleTypeDef *hadc, uint32_t channel) {
 800100e:	b508      	push	{r3, lr}
    if (!mq2 || !hadc) {
 8001010:	b1b9      	cbz	r1, 8001042 <MQ2_Init+0x36>
    mq2->_hadc = hadc;
 8001012:	6181      	str	r1, [r0, #24]
    mq2->_channel = channel;
 8001014:	61c2      	str	r2, [r0, #28]
    mq2->RawValue = 0.0f;
 8001016:	2200      	movs	r2, #0
 8001018:	6002      	str	r2, [r0, #0]
    mq2->Voltage = 0.0f;
 800101a:	6042      	str	r2, [r0, #4]
    mq2->GasConcentration = 0.0f;
 800101c:	6082      	str	r2, [r0, #8]
    mq2->SmokeConcentration = 0.0f;
 800101e:	60c2      	str	r2, [r0, #12]
    mq2->LPGConcentration = 0.0f;
 8001020:	6102      	str	r2, [r0, #16]
    mq2->Level = MQ2_LEVEL_NORMAL;
 8001022:	2200      	movs	r2, #0
 8001024:	7502      	strb	r2, [r0, #20]
    mq2->Status = MQ2_OK;
 8001026:	7542      	strb	r2, [r0, #21]
    mq2->_R0 = 10.0f;  // Giá trị mặc định, nên hiệu chuẩn
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <MQ2_Init+0x3c>)
 800102a:	6201      	str	r1, [r0, #32]
    mq2->_isCalibrated = 0;
 800102c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    HAL_GPIO_WritePin(MQ2_ALARM_PORT, MQ2_ALARM_PIN, GPIO_PIN_RESET);
 8001030:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MQ2_Init+0x40>)
 8001036:	f001 f88e 	bl	8002156 <HAL_GPIO_WritePin>
    lastAlarmBlinkTime = HAL_GetTick();
 800103a:	f000 fc59 	bl	80018f0 <HAL_GetTick>
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <MQ2_Init+0x44>)
 8001040:	6018      	str	r0, [r3, #0]
}
 8001042:	bd08      	pop	{r3, pc}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	41200000 	.word	0x41200000
 800104c:	40020c00 	.word	0x40020c00
 8001050:	20000220 	.word	0x20000220

08001054 <MQ2_ReadRaw>:
MQ2_StatusTypeDef MQ2_ReadRaw(MQ2_Data *mq2) {
 8001054:	b530      	push	{r4, r5, lr}
 8001056:	b085      	sub	sp, #20
    if (!mq2 || !mq2->_hadc) return MQ2_ERROR;
 8001058:	b388      	cbz	r0, 80010be <MQ2_ReadRaw+0x6a>
 800105a:	4604      	mov	r4, r0
 800105c:	6980      	ldr	r0, [r0, #24]
 800105e:	b380      	cbz	r0, 80010c2 <MQ2_ReadRaw+0x6e>
    ADC_ChannelConfTypeDef sConfig = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	9303      	str	r3, [sp, #12]
    sConfig.Channel = mq2->_channel;
 800106a:	69e3      	ldr	r3, [r4, #28]
 800106c:	9300      	str	r3, [sp, #0]
    sConfig.Rank = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001072:	2307      	movs	r3, #7
 8001074:	9302      	str	r3, [sp, #8]
    if (HAL_ADC_ConfigChannel(mq2->_hadc, &sConfig) != HAL_OK) {
 8001076:	4669      	mov	r1, sp
 8001078:	f000 fe3c 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 800107c:	b120      	cbz	r0, 8001088 <MQ2_ReadRaw+0x34>
        mq2->Status = MQ2_ERROR;
 800107e:	2501      	movs	r5, #1
 8001080:	7565      	strb	r5, [r4, #21]
}
 8001082:	4628      	mov	r0, r5
 8001084:	b005      	add	sp, #20
 8001086:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_Start(mq2->_hadc);
 8001088:	69a0      	ldr	r0, [r4, #24]
 800108a:	f000 fd11 	bl	8001ab0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(mq2->_hadc, MQ2_ADC_TIMEOUT) != HAL_OK) {
 800108e:	2164      	movs	r1, #100	@ 0x64
 8001090:	69a0      	ldr	r0, [r4, #24]
 8001092:	f000 fdcf 	bl	8001c34 <HAL_ADC_PollForConversion>
 8001096:	4605      	mov	r5, r0
 8001098:	b970      	cbnz	r0, 80010b8 <MQ2_ReadRaw+0x64>
    uint32_t adc_value = HAL_ADC_GetValue(mq2->_hadc);
 800109a:	69a0      	ldr	r0, [r4, #24]
 800109c:	f000 fe26 	bl	8001cec <HAL_ADC_GetValue>
 80010a0:	ee07 0a90 	vmov	s15, r0
    mq2->RawValue = (float)adc_value;
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	edc4 7a00 	vstr	s15, [r4]
    HAL_ADC_Stop(mq2->_hadc);
 80010ac:	69a0      	ldr	r0, [r4, #24]
 80010ae:	f000 fda1 	bl	8001bf4 <HAL_ADC_Stop>
    mq2->Status = MQ2_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	7563      	strb	r3, [r4, #21]
    return MQ2_OK;
 80010b6:	e7e4      	b.n	8001082 <MQ2_ReadRaw+0x2e>
        mq2->Status = MQ2_ADC_TIMEOUT;
 80010b8:	2564      	movs	r5, #100	@ 0x64
 80010ba:	7565      	strb	r5, [r4, #21]
        return MQ2_ADC_TIMEOUT;
 80010bc:	e7e1      	b.n	8001082 <MQ2_ReadRaw+0x2e>
    if (!mq2 || !mq2->_hadc) return MQ2_ERROR;
 80010be:	2501      	movs	r5, #1
 80010c0:	e7df      	b.n	8001082 <MQ2_ReadRaw+0x2e>
 80010c2:	2501      	movs	r5, #1
 80010c4:	e7dd      	b.n	8001082 <MQ2_ReadRaw+0x2e>
	...

080010c8 <MQ2_Calibrate>:
    if (!mq2) return MQ2_ERROR;
 80010c8:	b3d8      	cbz	r0, 8001142 <MQ2_Calibrate+0x7a>
MQ2_StatusTypeDef MQ2_Calibrate(MQ2_Data *mq2) {
 80010ca:	b570      	push	{r4, r5, r6, lr}
 80010cc:	ed2d 8b02 	vpush	{d8}
 80010d0:	4605      	mov	r5, r0
    for (uint8_t i = 0; i < MQ2_CALIB_SAMPLES; i++) {
 80010d2:	2400      	movs	r4, #0
    uint8_t valid_samples = 0;
 80010d4:	4626      	mov	r6, r4
    float rs_sum = 0.0f;
 80010d6:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 8001148 <MQ2_Calibrate+0x80>
 80010da:	e004      	b.n	80010e6 <MQ2_Calibrate+0x1e>
        HAL_Delay(100); // Chờ giữa các mẫu
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f000 fc0d 	bl	80018fc <HAL_Delay>
    for (uint8_t i = 0; i < MQ2_CALIB_SAMPLES; i++) {
 80010e2:	3401      	adds	r4, #1
 80010e4:	b2e4      	uxtb	r4, r4
 80010e6:	2c09      	cmp	r4, #9
 80010e8:	d812      	bhi.n	8001110 <MQ2_Calibrate+0x48>
        if (MQ2_ReadRaw(mq2) == MQ2_OK) {
 80010ea:	4628      	mov	r0, r5
 80010ec:	f7ff ffb2 	bl	8001054 <MQ2_ReadRaw>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d1f3      	bne.n	80010dc <MQ2_Calibrate+0x14>
            float rs = MQ2_CalculateResistance(mq2->RawValue);
 80010f4:	ed95 0a00 	vldr	s0, [r5]
 80010f8:	f7ff ff28 	bl	8000f4c <MQ2_CalculateResistance>
            if (rs > 0.0f) { // Tránh giá trị không hợp lệ
 80010fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	ddea      	ble.n	80010dc <MQ2_Calibrate+0x14>
                rs_sum += rs;
 8001106:	ee38 8a00 	vadd.f32	s16, s16, s0
                valid_samples++;
 800110a:	3601      	adds	r6, #1
 800110c:	b2f6      	uxtb	r6, r6
 800110e:	e7e5      	b.n	80010dc <MQ2_Calibrate+0x14>
    if (valid_samples < MQ2_CALIB_SAMPLES/2) {
 8001110:	2e04      	cmp	r6, #4
 8001112:	d913      	bls.n	800113c <MQ2_Calibrate+0x74>
    float rs_avg = rs_sum / valid_samples;
 8001114:	ee07 6a90 	vmov	s15, r6
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	eec8 6a27 	vdiv.f32	s13, s16, s15
    mq2->_R0 = rs_avg / MQ2_CLEAN_AIR_RATIO;
 8001120:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800114c <MQ2_Calibrate+0x84>
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	edc5 7a08 	vstr	s15, [r5, #32]
    mq2->_isCalibrated = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
    mq2->Status = MQ2_OK;
 8001132:	2000      	movs	r0, #0
 8001134:	7568      	strb	r0, [r5, #21]
}
 8001136:	ecbd 8b02 	vpop	{d8}
 800113a:	bd70      	pop	{r4, r5, r6, pc}
        mq2->Status = MQ2_CALIBRATION_ERROR;
 800113c:	2003      	movs	r0, #3
 800113e:	7568      	strb	r0, [r5, #21]
        return MQ2_CALIBRATION_ERROR;
 8001140:	e7f9      	b.n	8001136 <MQ2_Calibrate+0x6e>
    if (!mq2) return MQ2_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	00000000 	.word	0x00000000
 800114c:	411d47ae 	.word	0x411d47ae

08001150 <MQ2_ReadVoltage>:
MQ2_StatusTypeDef MQ2_ReadVoltage(MQ2_Data *mq2) {
 8001150:	b510      	push	{r4, lr}
 8001152:	4604      	mov	r4, r0
    MQ2_StatusTypeDef status = MQ2_ReadRaw(mq2);
 8001154:	f7ff ff7e 	bl	8001054 <MQ2_ReadRaw>
    if (status != MQ2_OK) return status;
 8001158:	b958      	cbnz	r0, 8001172 <MQ2_ReadVoltage+0x22>
    mq2->Voltage = (mq2->RawValue / MQ2_ADC_RESOLUTION) * MQ2_VREF;
 800115a:	edd4 7a00 	vldr	s15, [r4]
 800115e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001174 <MQ2_ReadVoltage+0x24>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001178 <MQ2_ReadVoltage+0x28>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116e:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8001172:	bd10      	pop	{r4, pc}
 8001174:	39800000 	.word	0x39800000
 8001178:	40533333 	.word	0x40533333

0800117c <MQ2_GetGasLevel>:
    if (!mq2) return MQ2_LEVEL_NORMAL;
 800117c:	b188      	cbz	r0, 80011a2 <MQ2_GetGasLevel+0x26>
    if (mq2->GasConcentration >= MQ2_DANGER_THRESHOLD) {
 800117e:	edd0 7a02 	vldr	s15, [r0, #8]
 8001182:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011b0 <MQ2_GetGasLevel+0x34>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	da0a      	bge.n	80011a6 <MQ2_GetGasLevel+0x2a>
    } else if (mq2->GasConcentration >= MQ2_WARNING_THRESHOLD) {
 8001190:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80011b4 <MQ2_GetGasLevel+0x38>
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	db05      	blt.n	80011aa <MQ2_GetGasLevel+0x2e>
        return MQ2_LEVEL_WARNING;
 800119e:	2001      	movs	r0, #1
 80011a0:	4770      	bx	lr
    if (!mq2) return MQ2_LEVEL_NORMAL;
 80011a2:	2000      	movs	r0, #0
 80011a4:	4770      	bx	lr
        return MQ2_LEVEL_DANGER;
 80011a6:	2002      	movs	r0, #2
 80011a8:	4770      	bx	lr
        return MQ2_LEVEL_NORMAL;
 80011aa:	2000      	movs	r0, #0
}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	442f0000 	.word	0x442f0000
 80011b4:	43960000 	.word	0x43960000

080011b8 <MQ2_ReadGasConcentration>:
MQ2_StatusTypeDef MQ2_ReadGasConcentration(MQ2_Data *mq2) {
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	4604      	mov	r4, r0
    if (!mq2->_isCalibrated) {
 80011c0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80011c4:	b913      	cbnz	r3, 80011cc <MQ2_ReadGasConcentration+0x14>
        if (MQ2_Calibrate(mq2) != MQ2_OK) {
 80011c6:	f7ff ff7f 	bl	80010c8 <MQ2_Calibrate>
 80011ca:	bb98      	cbnz	r0, 8001234 <MQ2_ReadGasConcentration+0x7c>
    MQ2_StatusTypeDef status = MQ2_ReadVoltage(mq2);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ffbf 	bl	8001150 <MQ2_ReadVoltage>
    if (status != MQ2_OK) return status;
 80011d2:	4605      	mov	r5, r0
 80011d4:	b118      	cbz	r0, 80011de <MQ2_ReadGasConcentration+0x26>
}
 80011d6:	4628      	mov	r0, r5
 80011d8:	ecbd 8b02 	vpop	{d8}
 80011dc:	bd38      	pop	{r3, r4, r5, pc}
    float rs = MQ2_CalculateResistance(mq2->RawValue);
 80011de:	ed94 0a00 	vldr	s0, [r4]
 80011e2:	f7ff feb3 	bl	8000f4c <MQ2_CalculateResistance>
    float rs_ro_ratio = MQ2_CalculateRatio(rs, mq2->_R0);
 80011e6:	edd4 0a08 	vldr	s1, [r4, #32]
 80011ea:	f7ff fee3 	bl	8000fb4 <MQ2_CalculateRatio>
 80011ee:	eeb0 8a40 	vmov.f32	s16, s0
    mq2->GasConcentration = MQ2_CalculatePPM(rs_ro_ratio, curve_a, curve_b);
 80011f2:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8001238 <MQ2_ReadGasConcentration+0x80>
 80011f6:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800123c <MQ2_ReadGasConcentration+0x84>
 80011fa:	f7ff feef 	bl	8000fdc <MQ2_CalculatePPM>
 80011fe:	ed84 0a02 	vstr	s0, [r4, #8]
    mq2->SmokeConcentration = MQ2_CalculatePPM(rs_ro_ratio, smoke_a, smoke_b);
 8001202:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8001240 <MQ2_ReadGasConcentration+0x88>
 8001206:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001244 <MQ2_ReadGasConcentration+0x8c>
 800120a:	eeb0 0a48 	vmov.f32	s0, s16
 800120e:	f7ff fee5 	bl	8000fdc <MQ2_CalculatePPM>
 8001212:	ed84 0a03 	vstr	s0, [r4, #12]
    mq2->LPGConcentration = MQ2_CalculatePPM(rs_ro_ratio, lpg_a, lpg_b);
 8001216:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8001248 <MQ2_ReadGasConcentration+0x90>
 800121a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800124c <MQ2_ReadGasConcentration+0x94>
 800121e:	eeb0 0a48 	vmov.f32	s0, s16
 8001222:	f7ff fedb 	bl	8000fdc <MQ2_CalculatePPM>
 8001226:	ed84 0a04 	vstr	s0, [r4, #16]
    mq2->Level = MQ2_GetGasLevel(mq2);
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ffa6 	bl	800117c <MQ2_GetGasLevel>
 8001230:	7520      	strb	r0, [r4, #20]
    return MQ2_OK;
 8001232:	e7d0      	b.n	80011d6 <MQ2_ReadGasConcentration+0x1e>
            return MQ2_CALIBRATION_ERROR;
 8001234:	2503      	movs	r5, #3
 8001236:	e7ce      	b.n	80011d6 <MQ2_ReadGasConcentration+0x1e>
 8001238:	c0047ae1 	.word	0xc0047ae1
 800123c:	442493d7 	.word	0x442493d7
 8001240:	c00eb852 	.word	0xc00eb852
 8001244:	444223d7 	.word	0x444223d7
 8001248:	bff9999a 	.word	0xbff9999a
 800124c:	4413f7ae 	.word	0x4413f7ae

08001250 <MQ2_ReadAllValues>:
MQ2_StatusTypeDef MQ2_ReadAllValues(MQ2_Data *mq2) {
 8001250:	b508      	push	{r3, lr}
    return MQ2_ReadGasConcentration(mq2);
 8001252:	f7ff ffb1 	bl	80011b8 <MQ2_ReadGasConcentration>
}
 8001256:	bd08      	pop	{r3, pc}

08001258 <MQ2_ControlAlarm>:
    if (!mq2) return;
 8001258:	b380      	cbz	r0, 80012bc <MQ2_ControlAlarm+0x64>
void MQ2_ControlAlarm(MQ2_Data *mq2, uint32_t currentTime) {
 800125a:	b510      	push	{r4, lr}
 800125c:	460c      	mov	r4, r1
    switch (mq2->Level) {
 800125e:	7d03      	ldrb	r3, [r0, #20]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d009      	beq.n	8001278 <MQ2_ControlAlarm+0x20>
 8001264:	2b02      	cmp	r3, #2
 8001266:	d015      	beq.n	8001294 <MQ2_ControlAlarm+0x3c>
 8001268:	bb0b      	cbnz	r3, 80012ae <MQ2_ControlAlarm+0x56>
            HAL_GPIO_WritePin(MQ2_ALARM_PORT, MQ2_ALARM_PIN, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001270:	4813      	ldr	r0, [pc, #76]	@ (80012c0 <MQ2_ControlAlarm+0x68>)
 8001272:	f000 ff70 	bl	8002156 <HAL_GPIO_WritePin>
}
 8001276:	bd10      	pop	{r4, pc}
            if (currentTime - lastAlarmBlinkTime >= MQ2_BLINK_INTERVAL) {
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MQ2_ControlAlarm+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001282:	d3f8      	bcc.n	8001276 <MQ2_ControlAlarm+0x1e>
                HAL_GPIO_TogglePin(MQ2_ALARM_PORT, MQ2_ALARM_PIN);
 8001284:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001288:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MQ2_ControlAlarm+0x68>)
 800128a:	f000 ff6a 	bl	8002162 <HAL_GPIO_TogglePin>
                lastAlarmBlinkTime = currentTime;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <MQ2_ControlAlarm+0x6c>)
 8001290:	601c      	str	r4, [r3, #0]
 8001292:	e7f0      	b.n	8001276 <MQ2_ControlAlarm+0x1e>
            if (currentTime - lastAlarmBlinkTime >= MQ2_RAPID_BLINK) {
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MQ2_ControlAlarm+0x6c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	2bc7      	cmp	r3, #199	@ 0xc7
 800129c:	d9eb      	bls.n	8001276 <MQ2_ControlAlarm+0x1e>
                HAL_GPIO_TogglePin(MQ2_ALARM_PORT, MQ2_ALARM_PIN);
 800129e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MQ2_ControlAlarm+0x68>)
 80012a4:	f000 ff5d 	bl	8002162 <HAL_GPIO_TogglePin>
                lastAlarmBlinkTime = currentTime;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MQ2_ControlAlarm+0x6c>)
 80012aa:	601c      	str	r4, [r3, #0]
 80012ac:	e7e3      	b.n	8001276 <MQ2_ControlAlarm+0x1e>
            HAL_GPIO_WritePin(MQ2_ALARM_PORT, MQ2_ALARM_PIN, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <MQ2_ControlAlarm+0x68>)
 80012b6:	f000 ff4e 	bl	8002156 <HAL_GPIO_WritePin>
            break;
 80012ba:	e7dc      	b.n	8001276 <MQ2_ControlAlarm+0x1e>
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	20000220 	.word	0x20000220

080012c8 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012c8:	b500      	push	{lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f10d 0217 	add.w	r2, sp, #23
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	2178      	movs	r1, #120	@ 0x78
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <ssd1306_WriteCommand+0x28>)
 80012e6:	f001 f9c7 	bl	8002678 <HAL_I2C_Mem_Write>
}
 80012ea:	b007      	add	sp, #28
 80012ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f0:	20000184 	.word	0x20000184

080012f4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012f4:	b500      	push	{lr}
 80012f6:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	b289      	uxth	r1, r1
 8001300:	9101      	str	r1, [sp, #4]
 8001302:	9000      	str	r0, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	2240      	movs	r2, #64	@ 0x40
 8001308:	2178      	movs	r1, #120	@ 0x78
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <ssd1306_WriteData+0x24>)
 800130c:	f001 f9b4 	bl	8002678 <HAL_I2C_Mem_Write>
}
 8001310:	b005      	add	sp, #20
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	20000184 	.word	0x20000184

0800131c <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800131c:	b508      	push	{r3, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800131e:	b930      	cbnz	r0, 800132e <ssd1306_Fill+0x12>
 8001320:	2100      	movs	r1, #0
 8001322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001326:	4803      	ldr	r0, [pc, #12]	@ (8001334 <ssd1306_Fill+0x18>)
 8001328:	f002 f954 	bl	80035d4 <memset>
}
 800132c:	bd08      	pop	{r3, pc}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800132e:	21ff      	movs	r1, #255	@ 0xff
 8001330:	e7f7      	b.n	8001322 <ssd1306_Fill+0x6>
 8001332:	bf00      	nop
 8001334:	2000022c 	.word	0x2000022c

08001338 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001338:	b510      	push	{r4, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800133a:	2400      	movs	r4, #0
 800133c:	e012      	b.n	8001364 <ssd1306_UpdateScreen+0x2c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800133e:	f1a4 0050 	sub.w	r0, r4, #80	@ 0x50
 8001342:	b2c0      	uxtb	r0, r0
 8001344:	f7ff ffc0 	bl	80012c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffbd 	bl	80012c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800134e:	2010      	movs	r0, #16
 8001350:	f7ff ffba 	bl	80012c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <ssd1306_UpdateScreen+0x34>)
 8001358:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 800135c:	f7ff ffca 	bl	80012f4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001360:	3401      	adds	r4, #1
 8001362:	b2e4      	uxtb	r4, r4
 8001364:	2c07      	cmp	r4, #7
 8001366:	d9ea      	bls.n	800133e <ssd1306_UpdateScreen+0x6>
    }
}
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	2000022c 	.word	0x2000022c

08001370 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001370:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001374:	d11f      	bne.n	80013b6 <ssd1306_DrawPixel+0x46>
 8001376:	293f      	cmp	r1, #63	@ 0x3f
 8001378:	d81d      	bhi.n	80013b6 <ssd1306_DrawPixel+0x46>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800137a:	b410      	push	{r4}
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800137c:	2a01      	cmp	r2, #1
 800137e:	d00f      	beq.n	80013a0 <ssd1306_DrawPixel+0x30>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001380:	08cb      	lsrs	r3, r1, #3
 8001382:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001386:	4c0c      	ldr	r4, [pc, #48]	@ (80013b8 <ssd1306_DrawPixel+0x48>)
 8001388:	5c22      	ldrb	r2, [r4, r0]
 800138a:	f001 0107 	and.w	r1, r1, #7
 800138e:	2301      	movs	r3, #1
 8001390:	408b      	lsls	r3, r1
 8001392:	43db      	mvns	r3, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4013      	ands	r3, r2
 8001398:	5423      	strb	r3, [r4, r0]
    }
}
 800139a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800139e:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013a0:	08cb      	lsrs	r3, r1, #3
 80013a2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80013a6:	4c04      	ldr	r4, [pc, #16]	@ (80013b8 <ssd1306_DrawPixel+0x48>)
 80013a8:	5c23      	ldrb	r3, [r4, r0]
 80013aa:	f001 0107 	and.w	r1, r1, #7
 80013ae:	408a      	lsls	r2, r1
 80013b0:	4313      	orrs	r3, r2
 80013b2:	5423      	strb	r3, [r4, r0]
 80013b4:	e7f1      	b.n	800139a <ssd1306_DrawPixel+0x2a>
 80013b6:	4770      	bx	lr
 80013b8:	2000022c 	.word	0x2000022c

080013bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80013bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	4681      	mov	r9, r0
 80013c4:	a804      	add	r0, sp, #16
 80013c6:	e900 000e 	stmdb	r0, {r1, r2, r3}
 80013ca:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013ce:	f1a9 0320 	sub.w	r3, r9, #32
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b5e      	cmp	r3, #94	@ 0x5e
 80013d6:	d846      	bhi.n	8001466 <ssd1306_WriteChar+0xaa>
        return 0;
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80013d8:	9b03      	ldr	r3, [sp, #12]
 80013da:	b183      	cbz	r3, 80013fe <ssd1306_WriteChar+0x42>
 80013dc:	f1a9 0220 	sub.w	r2, r9, #32
 80013e0:	5c9e      	ldrb	r6, [r3, r2]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <ssd1306_WriteChar+0xbc>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4433      	add	r3, r6
 80013e8:	2b80      	cmp	r3, #128	@ 0x80
 80013ea:	dc40      	bgt.n	800146e <ssd1306_WriteChar+0xb2>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <ssd1306_WriteChar+0xbc>)
 80013ee:	885b      	ldrh	r3, [r3, #2]
 80013f0:	f89d a005 	ldrb.w	sl, [sp, #5]
 80013f4:	4453      	add	r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80013f6:	2b40      	cmp	r3, #64	@ 0x40
 80013f8:	dc3b      	bgt.n	8001472 <ssd1306_WriteChar+0xb6>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80013fa:	2500      	movs	r5, #0
 80013fc:	e022      	b.n	8001444 <ssd1306_WriteChar+0x88>
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80013fe:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8001402:	e7ee      	b.n	80013e2 <ssd1306_WriteChar+0x26>
        b = Font.data[(ch - 32) * Font.height + i];
        for(j = 0; j < char_width; j++) {
            if((b << j) & 0x8000)  {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <ssd1306_WriteChar+0xbc>)
 8001406:	8818      	ldrh	r0, [r3, #0]
 8001408:	8859      	ldrh	r1, [r3, #2]
 800140a:	4429      	add	r1, r5
 800140c:	4420      	add	r0, r4
 800140e:	fab8 f288 	clz	r2, r8
 8001412:	0952      	lsrs	r2, r2, #5
 8001414:	b2c9      	uxtb	r1, r1
 8001416:	b2c0      	uxtb	r0, r0
 8001418:	f7ff ffaa 	bl	8001370 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800141c:	3401      	adds	r4, #1
 800141e:	42a6      	cmp	r6, r4
 8001420:	d90f      	bls.n	8001442 <ssd1306_WriteChar+0x86>
            if((b << j) & 0x8000)  {
 8001422:	fa07 f304 	lsl.w	r3, r7, r4
 8001426:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800142a:	d0eb      	beq.n	8001404 <ssd1306_WriteChar+0x48>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <ssd1306_WriteChar+0xbc>)
 800142e:	8818      	ldrh	r0, [r3, #0]
 8001430:	8859      	ldrh	r1, [r3, #2]
 8001432:	4429      	add	r1, r5
 8001434:	4420      	add	r0, r4
 8001436:	4642      	mov	r2, r8
 8001438:	b2c9      	uxtb	r1, r1
 800143a:	b2c0      	uxtb	r0, r0
 800143c:	f7ff ff98 	bl	8001370 <ssd1306_DrawPixel>
 8001440:	e7ec      	b.n	800141c <ssd1306_WriteChar+0x60>
    for(i = 0; i < Font.height; i++) {
 8001442:	3501      	adds	r5, #1
 8001444:	45aa      	cmp	sl, r5
 8001446:	d908      	bls.n	800145a <ssd1306_WriteChar+0x9e>
        b = Font.data[(ch - 32) * Font.height + i];
 8001448:	f1a9 0320 	sub.w	r3, r9, #32
 800144c:	fb03 530a 	mla	r3, r3, sl, r5
 8001450:	9a02      	ldr	r2, [sp, #8]
 8001452:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
        for(j = 0; j < char_width; j++) {
 8001456:	2400      	movs	r4, #0
 8001458:	e7e1      	b.n	800141e <ssd1306_WriteChar+0x62>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <ssd1306_WriteChar+0xbc>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	4416      	add	r6, r2
 8001460:	801e      	strh	r6, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001462:	4648      	mov	r0, r9
 8001464:	e000      	b.n	8001468 <ssd1306_WriteChar+0xac>
        return 0;
 8001466:	2000      	movs	r0, #0
}
 8001468:	b004      	add	sp, #16
 800146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 800146e:	2000      	movs	r0, #0
 8001470:	e7fa      	b.n	8001468 <ssd1306_WriteChar+0xac>
 8001472:	2000      	movs	r0, #0
 8001474:	e7f8      	b.n	8001468 <ssd1306_WriteChar+0xac>
 8001476:	bf00      	nop
 8001478:	20000224 	.word	0x20000224

0800147c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800147c:	b530      	push	{r4, r5, lr}
 800147e:	b087      	sub	sp, #28
 8001480:	4604      	mov	r4, r0
 8001482:	a806      	add	r0, sp, #24
 8001484:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8001488:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
    while (*str) {
 800148c:	e000      	b.n	8001490 <ssd1306_WriteString+0x14>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
            // Char could not be written
            return *str;
        }
        str++;
 800148e:	3401      	adds	r4, #1
    while (*str) {
 8001490:	7820      	ldrb	r0, [r4, #0]
 8001492:	b148      	cbz	r0, 80014a8 <ssd1306_WriteString+0x2c>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001494:	9500      	str	r5, [sp, #0]
 8001496:	ab06      	add	r3, sp, #24
 8001498:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 800149c:	f7ff ff8e 	bl	80013bc <ssd1306_WriteChar>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7820      	ldrb	r0, [r4, #0]
 80014a4:	4283      	cmp	r3, r0
 80014a6:	d0f2      	beq.n	800148e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
}
 80014a8:	b007      	add	sp, #28
 80014aa:	bd30      	pop	{r4, r5, pc}

080014ac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80014ac:	4b01      	ldr	r3, [pc, #4]	@ (80014b4 <ssd1306_SetCursor+0x8>)
 80014ae:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80014b0:	8059      	strh	r1, [r3, #2]
}
 80014b2:	4770      	bx	lr
 80014b4:	20000224 	.word	0x20000224

080014b8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80014b8:	b510      	push	{r4, lr}
 80014ba:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80014bc:	2081      	movs	r0, #129	@ 0x81
 80014be:	f7ff ff03 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ff00 	bl	80012c8 <ssd1306_WriteCommand>
}
 80014c8:	bd10      	pop	{r4, pc}
	...

080014cc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80014cc:	b508      	push	{r3, lr}
    uint8_t value;
    if (on) {
 80014ce:	b130      	cbz	r0, 80014de <ssd1306_SetDisplayOn+0x12>
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <ssd1306_SetDisplayOn+0x1c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	715a      	strb	r2, [r3, #5]
        value = 0xAF;   // Display on
 80014d6:	20af      	movs	r0, #175	@ 0xaf
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 80014d8:	f7ff fef6 	bl	80012c8 <ssd1306_WriteCommand>
}
 80014dc:	bd08      	pop	{r3, pc}
        SSD1306.DisplayOn = 0;
 80014de:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <ssd1306_SetDisplayOn+0x1c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	715a      	strb	r2, [r3, #5]
        value = 0xAE;   // Display off
 80014e4:	20ae      	movs	r0, #174	@ 0xae
 80014e6:	e7f7      	b.n	80014d8 <ssd1306_SetDisplayOn+0xc>
 80014e8:	20000224 	.word	0x20000224

080014ec <ssd1306_Init>:
void ssd1306_Init(void) {
 80014ec:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80014ee:	2064      	movs	r0, #100	@ 0x64
 80014f0:	f000 fa04 	bl	80018fc <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ffe9 	bl	80014cc <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014fa:	2020      	movs	r0, #32
 80014fc:	f7ff fee4 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fee1 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001506:	20b0      	movs	r0, #176	@ 0xb0
 8001508:	f7ff fede 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800150c:	20c8      	movs	r0, #200	@ 0xc8
 800150e:	f7ff fedb 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fed8 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001518:	2010      	movs	r0, #16
 800151a:	f7ff fed5 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800151e:	2040      	movs	r0, #64	@ 0x40
 8001520:	f7ff fed2 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	f7ff ffc7 	bl	80014b8 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800152a:	20a1      	movs	r0, #161	@ 0xa1
 800152c:	f7ff fecc 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001530:	20a6      	movs	r0, #166	@ 0xa6
 8001532:	f7ff fec9 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001536:	20a8      	movs	r0, #168	@ 0xa8
 8001538:	f7ff fec6 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800153c:	203f      	movs	r0, #63	@ 0x3f
 800153e:	f7ff fec3 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001542:	20a4      	movs	r0, #164	@ 0xa4
 8001544:	f7ff fec0 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001548:	20d3      	movs	r0, #211	@ 0xd3
 800154a:	f7ff febd 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff feba 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001554:	20d5      	movs	r0, #213	@ 0xd5
 8001556:	f7ff feb7 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800155a:	20f0      	movs	r0, #240	@ 0xf0
 800155c:	f7ff feb4 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001560:	20d9      	movs	r0, #217	@ 0xd9
 8001562:	f7ff feb1 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001566:	2022      	movs	r0, #34	@ 0x22
 8001568:	f7ff feae 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800156c:	20da      	movs	r0, #218	@ 0xda
 800156e:	f7ff feab 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001572:	2012      	movs	r0, #18
 8001574:	f7ff fea8 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001578:	20db      	movs	r0, #219	@ 0xdb
 800157a:	f7ff fea5 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800157e:	2020      	movs	r0, #32
 8001580:	f7ff fea2 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001584:	208d      	movs	r0, #141	@ 0x8d
 8001586:	f7ff fe9f 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800158a:	2014      	movs	r0, #20
 800158c:	f7ff fe9c 	bl	80012c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff9b 	bl	80014cc <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fec0 	bl	800131c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 800159c:	f7ff fecc 	bl	8001338 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <ssd1306_Init+0xc4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015a6:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80015a8:	2201      	movs	r2, #1
 80015aa:	711a      	strb	r2, [r3, #4]
}
 80015ac:	bd08      	pop	{r3, pc}
 80015ae:	bf00      	nop
 80015b0:	20000224 	.word	0x20000224

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2100      	movs	r1, #0
 80015b8:	9100      	str	r1, [sp, #0]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_MspInit+0x34>)
 80015bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80015c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015c6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	9101      	str	r1, [sp, #4]
 80015d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	b002      	add	sp, #8
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b500      	push	{lr}
 80015ee:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	2300      	movs	r3, #0
 80015f2:	9303      	str	r3, [sp, #12]
 80015f4:	9304      	str	r3, [sp, #16]
 80015f6:	9305      	str	r3, [sp, #20]
 80015f8:	9306      	str	r3, [sp, #24]
 80015fa:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80015fc:	6802      	ldr	r2, [r0, #0]
 80015fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001602:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8001606:	429a      	cmp	r2, r3
 8001608:	d002      	beq.n	8001610 <HAL_ADC_MspInit+0x24>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800160a:	b009      	add	sp, #36	@ 0x24
 800160c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001610:	2100      	movs	r1, #0
 8001612:	9101      	str	r1, [sp, #4]
 8001614:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8001618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800161a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800161e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001622:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	9102      	str	r1, [sp, #8]
 800162c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163e:	2304      	movs	r3, #4
 8001640:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	a903      	add	r1, sp, #12
 8001648:	4801      	ldr	r0, [pc, #4]	@ (8001650 <HAL_ADC_MspInit+0x64>)
 800164a:	f000 fc87 	bl	8001f5c <HAL_GPIO_Init>
}
 800164e:	e7dc      	b.n	800160a <HAL_ADC_MspInit+0x1e>
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001654:	b530      	push	{r4, r5, lr}
 8001656:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	2300      	movs	r3, #0
 800165a:	9303      	str	r3, [sp, #12]
 800165c:	9304      	str	r3, [sp, #16]
 800165e:	9305      	str	r3, [sp, #20]
 8001660:	9306      	str	r3, [sp, #24]
 8001662:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001664:	6802      	ldr	r2, [r0, #0]
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_I2C_MspInit+0x64>)
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800166c:	b009      	add	sp, #36	@ 0x24
 800166e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	2500      	movs	r5, #0
 8001672:	9501      	str	r5, [sp, #4]
 8001674:	4c11      	ldr	r4, [pc, #68]	@ (80016bc <HAL_I2C_MspInit+0x68>)
 8001676:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6323      	str	r3, [r4, #48]	@ 0x30
 800167e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001688:	23c0      	movs	r3, #192	@ 0xc0
 800168a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001694:	2304      	movs	r3, #4
 8001696:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	a903      	add	r1, sp, #12
 800169a:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <HAL_I2C_MspInit+0x6c>)
 800169c:	f000 fc5e 	bl	8001f5c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	9502      	str	r5, [sp, #8]
 80016a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a8:	6423      	str	r3, [r4, #64]	@ 0x40
 80016aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	9b02      	ldr	r3, [sp, #8]
}
 80016b4:	e7da      	b.n	800166c <HAL_I2C_MspInit+0x18>
 80016b6:	bf00      	nop
 80016b8:	40005400 	.word	0x40005400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80016c4:	6802      	ldr	r2, [r0, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_TIM_Base_MspInit+0x28>)
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d000      	beq.n	80016ce <HAL_TIM_Base_MspInit+0xa>
 80016cc:	4770      	bx	lr
{
 80016ce:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_TIM_Base_MspInit+0x2c>)
 80016d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d8:	f042 0204 	orr.w	r2, r2, #4
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016e8:	b002      	add	sp, #8
 80016ea:	4770      	bx	lr
 80016ec:	40000800 	.word	0x40000800
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	2300      	movs	r3, #0
 80016fa:	9303      	str	r3, [sp, #12]
 80016fc:	9304      	str	r3, [sp, #16]
 80016fe:	9305      	str	r3, [sp, #20]
 8001700:	9306      	str	r3, [sp, #24]
 8001702:	9307      	str	r3, [sp, #28]
  if(huart->Instance==UART5)
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <HAL_UART_MspInit+0x90>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x1c>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 800170c:	b009      	add	sp, #36	@ 0x24
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8001710:	2400      	movs	r4, #0
 8001712:	9400      	str	r4, [sp, #0]
 8001714:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 8001718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800171a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001722:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	9401      	str	r4, [sp, #4]
 800172c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800172e:	f042 0204 	orr.w	r2, r2, #4
 8001732:	631a      	str	r2, [r3, #48]	@ 0x30
 8001734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001736:	f002 0204 	and.w	r2, r2, #4
 800173a:	9201      	str	r2, [sp, #4]
 800173c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	9402      	str	r4, [sp, #8]
 8001740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001742:	f042 0208 	orr.w	r2, r2, #8
 8001746:	631a      	str	r2, [r3, #48]	@ 0x30
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001756:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2702      	movs	r7, #2
 800175a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2603      	movs	r6, #3
 800175e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001760:	2508      	movs	r5, #8
 8001762:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	a903      	add	r1, sp, #12
 8001766:	4808      	ldr	r0, [pc, #32]	@ (8001788 <HAL_UART_MspInit+0x94>)
 8001768:	f000 fbf8 	bl	8001f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176c:	2304      	movs	r3, #4
 800176e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001776:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	a903      	add	r1, sp, #12
 800177a:	4804      	ldr	r0, [pc, #16]	@ (800178c <HAL_UART_MspInit+0x98>)
 800177c:	f000 fbee 	bl	8001f5c <HAL_GPIO_Init>
}
 8001780:	e7c4      	b.n	800170c <HAL_UART_MspInit+0x18>
 8001782:	bf00      	nop
 8001784:	40005000 	.word	0x40005000
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00

08001790 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler>

08001792 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler>

08001794 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler>

08001796 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler>

08001798 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler>

0800179a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a2:	f000 f899 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <_sbrk+0x38>)
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <_sbrk+0x40>)
 80017b2:	6800      	ldr	r0, [r0, #0]
 80017b4:	b140      	cbz	r0, 80017c8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <_sbrk+0x40>)
 80017b8:	6800      	ldr	r0, [r0, #0]
 80017ba:	4403      	add	r3, r0
 80017bc:	1a52      	subs	r2, r2, r1
 80017be:	4293      	cmp	r3, r2
 80017c0:	d806      	bhi.n	80017d0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <_sbrk+0x40>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80017c6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80017c8:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <_sbrk+0x40>)
 80017ca:	4c08      	ldr	r4, [pc, #32]	@ (80017ec <_sbrk+0x44>)
 80017cc:	6004      	str	r4, [r0, #0]
 80017ce:	e7f2      	b.n	80017b6 <_sbrk+0xe>
    errno = ENOMEM;
 80017d0:	f001 ff08 	bl	80035e4 <__errno>
 80017d4:	230c      	movs	r3, #12
 80017d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	e7f3      	b.n	80017c6 <_sbrk+0x1e>
 80017de:	bf00      	nop
 80017e0:	20020000 	.word	0x20020000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	2000062c 	.word	0x2000062c
 80017ec:	20000780 	.word	0x20000780

080017f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4a03      	ldr	r2, [pc, #12]	@ (8001800 <SystemInit+0x10>)
 80017f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80017f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001808:	f7ff fff2 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001832:	f001 fedd 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fb2b 	bl	8000e90 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001848:	08004f34 	.word	0x08004f34
  ldr r2, =_sbss
 800184c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001850:	2000077c 	.word	0x2000077c

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b510      	push	{r4, lr}
 800185a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_InitTick+0x40>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001864:	fbb3 f3f2 	udiv	r3, r3, r2
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_InitTick+0x44>)
 800186a:	6810      	ldr	r0, [r2, #0]
 800186c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001870:	f000 fb60 	bl	8001f34 <HAL_SYSTICK_Config>
 8001874:	b968      	cbnz	r0, 8001892 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	2c0f      	cmp	r4, #15
 8001878:	d901      	bls.n	800187e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
 800187c:	e00a      	b.n	8001894 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187e:	2200      	movs	r2, #0
 8001880:	4621      	mov	r1, r4
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	f000 fb45 	bl	8001f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_InitTick+0x48>)
 800188c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2000      	movs	r0, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
}
 8001894:	bd10      	pop	{r4, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <HAL_Init>:
{
 80018a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_Init+0x30>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 fb15 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f7ff ffc6 	bl	8001858 <HAL_InitTick>
  HAL_MspInit();
 80018cc:	f7ff fe72 	bl	80015b4 <HAL_MspInit>
}
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd08      	pop	{r3, pc}
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018d8:	4a03      	ldr	r2, [pc, #12]	@ (80018e8 <HAL_IncTick+0x10>)
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_IncTick+0x14>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	440b      	add	r3, r1
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000630 	.word	0x20000630
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018f0:	4b01      	ldr	r3, [pc, #4]	@ (80018f8 <HAL_GetTick+0x8>)
 80018f2:	6818      	ldr	r0, [r3, #0]
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000630 	.word	0x20000630

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff6 	bl	80018f0 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	f1b4 3fff 	cmp.w	r4, #4294967295
 800190a:	d002      	beq.n	8001912 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <HAL_Delay+0x24>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	f7ff ffed 	bl	80018f0 <HAL_GetTick>
 8001916:	1b40      	subs	r0, r0, r5
 8001918:	42a0      	cmp	r0, r4
 800191a:	d3fa      	bcc.n	8001912 <HAL_Delay+0x16>
  {
  }
}
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001924:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <ADC_Init+0x12c>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800192c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	6841      	ldr	r1, [r0, #4]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001936:	6802      	ldr	r2, [r0, #0]
 8001938:	6853      	ldr	r3, [r2, #4]
 800193a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800193e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001940:	6802      	ldr	r2, [r0, #0]
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	6901      	ldr	r1, [r0, #16]
 8001946:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800194a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	6853      	ldr	r3, [r2, #4]
 8001950:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001954:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001956:	6802      	ldr	r2, [r0, #0]
 8001958:	6853      	ldr	r3, [r2, #4]
 800195a:	6881      	ldr	r1, [r0, #8]
 800195c:	430b      	orrs	r3, r1
 800195e:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001960:	6802      	ldr	r2, [r0, #0]
 8001962:	6893      	ldr	r3, [r2, #8]
 8001964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001968:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800196a:	6802      	ldr	r2, [r0, #0]
 800196c:	6893      	ldr	r3, [r2, #8]
 800196e:	68c1      	ldr	r1, [r0, #12]
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001974:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001976:	4b37      	ldr	r3, [pc, #220]	@ (8001a54 <ADC_Init+0x130>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d057      	beq.n	8001a2c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	6893      	ldr	r3, [r2, #8]
 8001980:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001984:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001986:	6802      	ldr	r2, [r0, #0]
 8001988:	6893      	ldr	r3, [r2, #8]
 800198a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	6893      	ldr	r3, [r2, #8]
 8001994:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001998:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800199a:	6802      	ldr	r2, [r0, #0]
 800199c:	6893      	ldr	r3, [r2, #8]
 800199e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019a4:	6802      	ldr	r2, [r0, #0]
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	f023 0302 	bic.w	r3, r3, #2
 80019ac:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ae:	6802      	ldr	r2, [r0, #0]
 80019b0:	6893      	ldr	r3, [r2, #8]
 80019b2:	7e01      	ldrb	r1, [r0, #24]
 80019b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80019b8:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03f      	beq.n	8001a42 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019c2:	6802      	ldr	r2, [r0, #0]
 80019c4:	6853      	ldr	r3, [r2, #4]
 80019c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ca:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	6853      	ldr	r3, [r2, #4]
 80019d0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80019d4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019d6:	6801      	ldr	r1, [r0, #0]
 80019d8:	684b      	ldr	r3, [r1, #4]
 80019da:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80019dc:	3a01      	subs	r2, #1
 80019de:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80019e2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e4:	6802      	ldr	r2, [r0, #0]
 80019e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80019e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80019f2:	69c2      	ldr	r2, [r0, #28]
 80019f4:	3a01      	subs	r2, #1
 80019f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80019fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	6893      	ldr	r3, [r2, #8]
 8001a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a04:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a06:	6802      	ldr	r2, [r0, #0]
 8001a08:	6893      	ldr	r3, [r2, #8]
 8001a0a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001a0e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001a12:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a14:	6802      	ldr	r2, [r0, #0]
 8001a16:	6893      	ldr	r3, [r2, #8]
 8001a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a1c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a1e:	6802      	ldr	r2, [r0, #0]
 8001a20:	6893      	ldr	r3, [r2, #8]
 8001a22:	6941      	ldr	r1, [r0, #20]
 8001a24:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a28:	6093      	str	r3, [r2, #8]
}
 8001a2a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a2c:	6802      	ldr	r2, [r0, #0]
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001a34:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	6893      	ldr	r3, [r2, #8]
 8001a3a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001a3e:	6093      	str	r3, [r2, #8]
 8001a40:	e7b0      	b.n	80019a4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a42:	6802      	ldr	r2, [r0, #0]
 8001a44:	6853      	ldr	r3, [r2, #4]
 8001a46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a4a:	6053      	str	r3, [r2, #4]
 8001a4c:	e7ca      	b.n	80019e4 <ADC_Init+0xc0>
 8001a4e:	bf00      	nop
 8001a50:	40012300 	.word	0x40012300
 8001a54:	0f000001 	.word	0x0f000001

08001a58 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001a58:	b338      	cbz	r0, 8001aaa <HAL_ADC_Init+0x52>
{
 8001a5a:	b510      	push	{r4, lr}
 8001a5c:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a60:	b143      	cbz	r3, 8001a74 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a64:	f013 0f10 	tst.w	r3, #16
 8001a68:	d00b      	beq.n	8001a82 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001a6a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001a72:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001a74:	f7ff fdba 	bl	80015ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001a7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001a80:	e7ef      	b.n	8001a62 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff ff46 	bl	8001924 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6423      	str	r3, [r4, #64]	@ 0x40
 8001aa8:	e7e0      	b.n	8001a6c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
}
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_ADC_Start>:
{
 8001ab0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001ab6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f000 8089 	beq.w	8001bd2 <HAL_ADC_Start+0x122>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ac6:	6803      	ldr	r3, [r0, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	f012 0f01 	tst.w	r2, #1
 8001ace:	d113      	bne.n	8001af8 <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad8:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <HAL_ADC_Start+0x130>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a41      	ldr	r2, [pc, #260]	@ (8001be4 <HAL_ADC_Start+0x134>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ae8:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Start+0x42>
      counter--;
 8001aec:	9b01      	ldr	r3, [sp, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001af8:	6802      	ldr	r2, [r0, #0]
 8001afa:	6893      	ldr	r3, [r2, #8]
 8001afc:	f013 0f01 	tst.w	r3, #1
 8001b00:	d05c      	beq.n	8001bbc <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b10:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b12:	6853      	ldr	r3, [r2, #4]
 8001b14:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b18:	d005      	beq.n	8001b26 <HAL_ADC_Start+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b24:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b28:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001b2c:	d01b      	beq.n	8001b66 <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b2e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b30:	f023 0306 	bic.w	r3, r3, #6
 8001b34:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001b36:	2300      	movs	r3, #0
 8001b38:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b3c:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 8001b40:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_ADC_Start+0x138>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f013 0f1f 	tst.w	r3, #31
 8001b4a:	d127      	bne.n	8001b9c <HAL_ADC_Start+0xec>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b4c:	6803      	ldr	r3, [r0, #0]
 8001b4e:	4a27      	ldr	r2, [pc, #156]	@ (8001bec <HAL_ADC_Start+0x13c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d011      	beq.n	8001b78 <HAL_ADC_Start+0xc8>
 8001b54:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_Start+0xbc>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b5c:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <HAL_ADC_Start+0x140>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d014      	beq.n	8001b8c <HAL_ADC_Start+0xdc>
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e033      	b.n	8001bce <HAL_ADC_Start+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	2300      	movs	r3, #0
 8001b68:	6443      	str	r3, [r0, #68]	@ 0x44
 8001b6a:	e7e4      	b.n	8001b36 <HAL_ADC_Start+0x86>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b6c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001b70:	6852      	ldr	r2, [r2, #4]
 8001b72:	f012 0f1f 	tst.w	r2, #31
 8001b76:	d1f1      	bne.n	8001b5c <HAL_ADC_Start+0xac>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001b7e:	d12a      	bne.n	8001bd6 <HAL_ADC_Start+0x126>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e020      	b.n	8001bce <HAL_ADC_Start+0x11e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b8c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001b90:	6852      	ldr	r2, [r2, #4]
 8001b92:	f012 0f10 	tst.w	r2, #16
 8001b96:	d0ef      	beq.n	8001b78 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
 8001b9a:	e018      	b.n	8001bce <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <HAL_ADC_Start+0x13c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d001      	beq.n	8001ba8 <HAL_ADC_Start+0xf8>
  return HAL_OK;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e012      	b.n	8001bce <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001bae:	d114      	bne.n	8001bda <HAL_ADC_Start+0x12a>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e008      	b.n	8001bce <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
}
 8001bce:	b002      	add	sp, #8
 8001bd0:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	e7fb      	b.n	8001bce <HAL_ADC_Start+0x11e>
  return HAL_OK;
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	e7f9      	b.n	8001bce <HAL_ADC_Start+0x11e>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	e7f7      	b.n	8001bce <HAL_ADC_Start+0x11e>
 8001bde:	bf00      	nop
 8001be0:	20000004 	.word	0x20000004
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	40012300 	.word	0x40012300
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	40012200 	.word	0x40012200

08001bf4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001bf4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d019      	beq.n	8001c30 <HAL_ADC_Stop+0x3c>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_ADC_DISABLE(hadc);
 8001c02:	6802      	ldr	r2, [r0, #0]
 8001c04:	6893      	ldr	r3, [r2, #8]
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f013 0f01 	tst.w	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001c18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6403      	str	r3, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001c26:	2300      	movs	r3, #0
 8001c28:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  return HAL_OK;
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001c30:	2002      	movs	r0, #2
}
 8001c32:	4770      	bx	lr

08001c34 <HAL_ADC_PollForConversion>:
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4604      	mov	r4, r0
 8001c38:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c3a:	6803      	ldr	r3, [r0, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001c42:	d003      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c44:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c46:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c4a:	d119      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fe50 	bl	80018f0 <HAL_GetTick>
 8001c50:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f012 0f02 	tst.w	r2, #2
 8001c5a:	d120      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001c5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c60:	d0f7      	beq.n	8001c52 <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c62:	b9b5      	cbnz	r5, 8001c92 <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f013 0f02 	tst.w	r3, #2
 8001c6c:	d1f1      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 8001c76:	2300      	movs	r3, #0
 8001c78:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	e032      	b.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	e029      	b.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c92:	f7ff fe2d 	bl	80018f0 <HAL_GetTick>
 8001c96:	1b80      	subs	r0, r0, r6
 8001c98:	42a8      	cmp	r0, r5
 8001c9a:	d9da      	bls.n	8001c52 <HAL_ADC_PollForConversion+0x1e>
 8001c9c:	e7e2      	b.n	8001c64 <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c9e:	f06f 0212 	mvn.w	r2, #18
 8001ca2:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001caa:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001cb4:	d116      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb6:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb8:	b9b0      	cbnz	r0, 8001ce8 <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cbc:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cc2:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cc4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cd0:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cd4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6423      	str	r3, [r4, #64]	@ 0x40
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 8001ce4:	2000      	movs	r0, #0
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e7fc      	b.n	8001ce6 <HAL_ADC_PollForConversion+0xb2>

08001cec <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_ADC_ConfigChannel>:
{
 8001cf4:	b430      	push	{r4, r5}
 8001cf6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001cfc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001d00:	2a01      	cmp	r2, #1
 8001d02:	f000 80b6 	beq.w	8001e72 <HAL_ADC_ConfigChannel+0x17e>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d0e:	680a      	ldr	r2, [r1, #0]
 8001d10:	2a09      	cmp	r2, #9
 8001d12:	d940      	bls.n	8001d96 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d14:	6804      	ldr	r4, [r0, #0]
 8001d16:	68e0      	ldr	r0, [r4, #12]
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d1e:	3a1e      	subs	r2, #30
 8001d20:	f04f 0c07 	mov.w	ip, #7
 8001d24:	fa0c f202 	lsl.w	r2, ip, r2
 8001d28:	ea20 0202 	bic.w	r2, r0, r2
 8001d2c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d2e:	681c      	ldr	r4, [r3, #0]
 8001d30:	68e0      	ldr	r0, [r4, #12]
 8001d32:	880a      	ldrh	r2, [r1, #0]
 8001d34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d38:	3a1e      	subs	r2, #30
 8001d3a:	688d      	ldr	r5, [r1, #8]
 8001d3c:	fa05 f202 	lsl.w	r2, r5, r2
 8001d40:	4302      	orrs	r2, r0
 8001d42:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001d44:	684a      	ldr	r2, [r1, #4]
 8001d46:	2a06      	cmp	r2, #6
 8001d48:	d83c      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d4a:	681c      	ldr	r4, [r3, #0]
 8001d4c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001d4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d52:	3a05      	subs	r2, #5
 8001d54:	f04f 0c1f 	mov.w	ip, #31
 8001d58:	fa0c f202 	lsl.w	r2, ip, r2
 8001d5c:	ea20 0202 	bic.w	r2, r0, r2
 8001d60:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001d66:	684a      	ldr	r2, [r1, #4]
 8001d68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d6c:	3a05      	subs	r2, #5
 8001d6e:	f8b1 c000 	ldrh.w	ip, [r1]
 8001d72:	fa0c f202 	lsl.w	r2, ip, r2
 8001d76:	4302      	orrs	r2, r0
 8001d78:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <HAL_ADC_ConfigChannel+0x184>)
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d050      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	4a3c      	ldr	r2, [pc, #240]	@ (8001e78 <HAL_ADC_ConfigChannel+0x184>)
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d055      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001d90:	b002      	add	sp, #8
 8001d92:	bc30      	pop	{r4, r5}
 8001d94:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d96:	6804      	ldr	r4, [r0, #0]
 8001d98:	6920      	ldr	r0, [r4, #16]
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001da0:	f04f 0c07 	mov.w	ip, #7
 8001da4:	fa0c f202 	lsl.w	r2, ip, r2
 8001da8:	ea20 0202 	bic.w	r2, r0, r2
 8001dac:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dae:	681c      	ldr	r4, [r3, #0]
 8001db0:	6920      	ldr	r0, [r4, #16]
 8001db2:	880a      	ldrh	r2, [r1, #0]
 8001db4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001db8:	688d      	ldr	r5, [r1, #8]
 8001dba:	fa05 f202 	lsl.w	r2, r5, r2
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	6122      	str	r2, [r4, #16]
 8001dc2:	e7bf      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001dc4:	2a0c      	cmp	r2, #12
 8001dc6:	d816      	bhi.n	8001df6 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc8:	681d      	ldr	r5, [r3, #0]
 8001dca:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001dcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dd0:	3a23      	subs	r2, #35	@ 0x23
 8001dd2:	241f      	movs	r4, #31
 8001dd4:	fa04 f202 	lsl.w	r2, r4, r2
 8001dd8:	ea20 0202 	bic.w	r2, r0, r2
 8001ddc:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dde:	681d      	ldr	r5, [r3, #0]
 8001de0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001de2:	684a      	ldr	r2, [r1, #4]
 8001de4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001de8:	3a23      	subs	r2, #35	@ 0x23
 8001dea:	880c      	ldrh	r4, [r1, #0]
 8001dec:	fa04 f202 	lsl.w	r2, r4, r2
 8001df0:	4302      	orrs	r2, r0
 8001df2:	632a      	str	r2, [r5, #48]	@ 0x30
 8001df4:	e7c1      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001df6:	681d      	ldr	r5, [r3, #0]
 8001df8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001dfa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dfe:	3a41      	subs	r2, #65	@ 0x41
 8001e00:	241f      	movs	r4, #31
 8001e02:	fa04 f202 	lsl.w	r2, r4, r2
 8001e06:	ea20 0202 	bic.w	r2, r0, r2
 8001e0a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e0c:	681d      	ldr	r5, [r3, #0]
 8001e0e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e16:	3a41      	subs	r2, #65	@ 0x41
 8001e18:	880c      	ldrh	r4, [r1, #0]
 8001e1a:	fa04 f202 	lsl.w	r2, r4, r2
 8001e1e:	4302      	orrs	r2, r0
 8001e20:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001e22:	e7aa      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e24:	680a      	ldr	r2, [r1, #0]
 8001e26:	2a12      	cmp	r2, #18
 8001e28:	d1ab      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e2a:	4814      	ldr	r0, [pc, #80]	@ (8001e7c <HAL_ADC_ConfigChannel+0x188>)
 8001e2c:	6842      	ldr	r2, [r0, #4]
 8001e2e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001e32:	6042      	str	r2, [r0, #4]
 8001e34:	e7a5      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e36:	680a      	ldr	r2, [r1, #0]
 8001e38:	3a10      	subs	r2, #16
 8001e3a:	2a01      	cmp	r2, #1
 8001e3c:	d8a5      	bhi.n	8001d8a <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e3e:	480f      	ldr	r0, [pc, #60]	@ (8001e7c <HAL_ADC_ConfigChannel+0x188>)
 8001e40:	6842      	ldr	r2, [r0, #4]
 8001e42:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e46:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e48:	680a      	ldr	r2, [r1, #0]
 8001e4a:	2a10      	cmp	r2, #16
 8001e4c:	d19d      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <HAL_ADC_ConfigChannel+0x18c>)
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <HAL_ADC_ConfigChannel+0x190>)
 8001e54:	fba1 1202 	umull	r1, r2, r1, r2
 8001e58:	0c92      	lsrs	r2, r2, #18
 8001e5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001e62:	e002      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x176>
        counter--;
 8001e64:	9a01      	ldr	r2, [sp, #4]
 8001e66:	3a01      	subs	r2, #1
 8001e68:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001e6a:	9a01      	ldr	r2, [sp, #4]
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d1f9      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x170>
 8001e70:	e78b      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001e72:	2002      	movs	r0, #2
 8001e74:	e78c      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x9c>
 8001e76:	bf00      	nop
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	20000004 	.word	0x20000004
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	db08      	blt.n	8001e9e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	0109      	lsls	r1, r1, #4
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001e94:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001e98:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001e9c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	f000 000f 	and.w	r0, r0, #15
 8001ea2:	0109      	lsls	r1, r1, #4
 8001ea4:	b2c9      	uxtb	r1, r1
 8001ea6:	4b01      	ldr	r3, [pc, #4]	@ (8001eac <__NVIC_SetPriority+0x24>)
 8001ea8:	5419      	strb	r1, [r3, r0]
  }
}
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed14 	.word	0xe000ed14

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb6:	f1c0 0c07 	rsb	ip, r0, #7
 8001eba:	f1bc 0f04 	cmp.w	ip, #4
 8001ebe:	bf28      	it	cs
 8001ec0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec4:	1d03      	adds	r3, r0, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d90f      	bls.n	8001eea <NVIC_EncodePriority+0x3a>
 8001eca:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 3eff 	mov.w	lr, #4294967295
 8001ed0:	fa0e f00c 	lsl.w	r0, lr, ip
 8001ed4:	ea21 0100 	bic.w	r1, r1, r0
 8001ed8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eda:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ede:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001ee2:	ea41 0002 	orr.w	r0, r1, r2
 8001ee6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	2300      	movs	r3, #0
 8001eec:	e7ee      	b.n	8001ecc <NVIC_EncodePriority+0x1c>
	...

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ef2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	0200      	lsls	r0, r0, #8
 8001efe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f02:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f0c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_NVIC_SetPriority+0x1c>)
 8001f1a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001f20:	f7ff ffc6 	bl	8001eb0 <NVIC_EncodePriority>
 8001f24:	4601      	mov	r1, r0
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ffae 	bl	8001e88 <__NVIC_SetPriority>
}
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	3801      	subs	r0, #1
 8001f36:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001f3a:	d20b      	bcs.n	8001f54 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f40:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_SYSTICK_Config+0x24>)
 8001f44:	21f0      	movs	r1, #240	@ 0xf0
 8001f46:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	2207      	movs	r2, #7
 8001f50:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f54:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f200 80e9 	bhi.w	8002136 <HAL_GPIO_Init+0x1da>
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	e065      	b.n	8002036 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f70:	2403      	movs	r4, #3
 8001f72:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f76:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	68cc      	ldr	r4, [r1, #12]
 8001f7c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f80:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f82:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f84:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f86:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8a:	684a      	ldr	r2, [r1, #4]
 8001f8c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001f94:	6042      	str	r2, [r0, #4]
 8001f96:	e05c      	b.n	8002052 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	08dc      	lsrs	r4, r3, #3
 8001f9a:	3408      	adds	r4, #8
 8001f9c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa0:	f003 0507 	and.w	r5, r3, #7
 8001fa4:	00ad      	lsls	r5, r5, #2
 8001fa6:	f04f 0e0f 	mov.w	lr, #15
 8001faa:	fa0e fe05 	lsl.w	lr, lr, r5
 8001fae:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb2:	690a      	ldr	r2, [r1, #16]
 8001fb4:	40aa      	lsls	r2, r5
 8001fb6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001fbe:	e05c      	b.n	800207a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fca:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	3402      	adds	r4, #2
 8001fce:	4d5a      	ldr	r5, [pc, #360]	@ (8002138 <HAL_GPIO_Init+0x1dc>)
 8001fd0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd4:	4a59      	ldr	r2, [pc, #356]	@ (800213c <HAL_GPIO_Init+0x1e0>)
 8001fd6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	ea6f 020c 	mvn.w	r2, ip
 8001fdc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe0:	684e      	ldr	r6, [r1, #4]
 8001fe2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001fe6:	d001      	beq.n	8001fec <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001fe8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001fec:	4c53      	ldr	r4, [pc, #332]	@ (800213c <HAL_GPIO_Init+0x1e0>)
 8001fee:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001ff0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff6:	684e      	ldr	r6, [r1, #4]
 8001ff8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001ffc:	d001      	beq.n	8002002 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001ffe:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002002:	4c4e      	ldr	r4, [pc, #312]	@ (800213c <HAL_GPIO_Init+0x1e0>)
 8002004:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002006:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002008:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200c:	684e      	ldr	r6, [r1, #4]
 800200e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002012:	d001      	beq.n	8002018 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002014:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002018:	4c48      	ldr	r4, [pc, #288]	@ (800213c <HAL_GPIO_Init+0x1e0>)
 800201a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800201e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	684d      	ldr	r5, [r1, #4]
 8002022:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002026:	d001      	beq.n	800202c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002028:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800202c:	4c43      	ldr	r4, [pc, #268]	@ (800213c <HAL_GPIO_Init+0x1e0>)
 800202e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002030:	3301      	adds	r3, #1
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d87d      	bhi.n	8002132 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8002036:	2201      	movs	r2, #1
 8002038:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	680c      	ldr	r4, [r1, #0]
 800203c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002040:	ea32 0404 	bics.w	r4, r2, r4
 8002044:	d1f4      	bne.n	8002030 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	684c      	ldr	r4, [r1, #4]
 8002048:	f004 0403 	and.w	r4, r4, #3
 800204c:	3c01      	subs	r4, #1
 800204e:	2c01      	cmp	r4, #1
 8002050:	d98b      	bls.n	8001f6a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	684a      	ldr	r2, [r1, #4]
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	2a03      	cmp	r2, #3
 800205a:	d009      	beq.n	8002070 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800205c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	005d      	lsls	r5, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	40aa      	lsls	r2, r5
 8002064:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	688a      	ldr	r2, [r1, #8]
 800206a:	40aa      	lsls	r2, r5
 800206c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800206e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	684a      	ldr	r2, [r1, #4]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	2a02      	cmp	r2, #2
 8002078:	d08e      	beq.n	8001f98 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800207a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f20e 	lsl.w	r2, r2, lr
 8002086:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208a:	684a      	ldr	r2, [r1, #4]
 800208c:	f002 0203 	and.w	r2, r2, #3
 8002090:	fa02 f20e 	lsl.w	r2, r2, lr
 8002094:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002096:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002098:	684a      	ldr	r2, [r1, #4]
 800209a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800209e:	d0c7      	beq.n	8002030 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a0:	2200      	movs	r2, #0
 80020a2:	9201      	str	r2, [sp, #4]
 80020a4:	4a26      	ldr	r2, [pc, #152]	@ (8002140 <HAL_GPIO_Init+0x1e4>)
 80020a6:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80020a8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80020ac:	6454      	str	r4, [r2, #68]	@ 0x44
 80020ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020b0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80020b4:	9201      	str	r2, [sp, #4]
 80020b6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80020b8:	089c      	lsrs	r4, r3, #2
 80020ba:	1ca5      	adds	r5, r4, #2
 80020bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002138 <HAL_GPIO_Init+0x1dc>)
 80020be:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c2:	f003 0e03 	and.w	lr, r3, #3
 80020c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f20e 	lsl.w	r2, r2, lr
 80020d0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002144 <HAL_GPIO_Init+0x1e8>)
 80020d6:	4290      	cmp	r0, r2
 80020d8:	f43f af74 	beq.w	8001fc4 <HAL_GPIO_Init+0x68>
 80020dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020e0:	4290      	cmp	r0, r2
 80020e2:	d01a      	beq.n	800211a <HAL_GPIO_Init+0x1be>
 80020e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020e8:	4290      	cmp	r0, r2
 80020ea:	d018      	beq.n	800211e <HAL_GPIO_Init+0x1c2>
 80020ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020f0:	4290      	cmp	r0, r2
 80020f2:	d016      	beq.n	8002122 <HAL_GPIO_Init+0x1c6>
 80020f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020f8:	4290      	cmp	r0, r2
 80020fa:	d014      	beq.n	8002126 <HAL_GPIO_Init+0x1ca>
 80020fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002100:	4290      	cmp	r0, r2
 8002102:	d012      	beq.n	800212a <HAL_GPIO_Init+0x1ce>
 8002104:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002108:	4290      	cmp	r0, r2
 800210a:	d010      	beq.n	800212e <HAL_GPIO_Init+0x1d2>
 800210c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002110:	4290      	cmp	r0, r2
 8002112:	f43f af55 	beq.w	8001fc0 <HAL_GPIO_Init+0x64>
 8002116:	2208      	movs	r2, #8
 8002118:	e755      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 800211a:	2201      	movs	r2, #1
 800211c:	e753      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 800211e:	2202      	movs	r2, #2
 8002120:	e751      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 8002122:	2203      	movs	r2, #3
 8002124:	e74f      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 8002126:	2204      	movs	r2, #4
 8002128:	e74d      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 800212a:	2205      	movs	r2, #5
 800212c:	e74b      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
 800212e:	2206      	movs	r2, #6
 8002130:	e749      	b.n	8001fc6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002132:	b002      	add	sp, #8
 8002134:	bd70      	pop	{r4, r5, r6, pc}
 8002136:	4770      	bx	lr
 8002138:	40013800 	.word	0x40013800
 800213c:	40013c00 	.word	0x40013c00
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000

08002148 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002148:	6903      	ldr	r3, [r0, #16]
 800214a:	4219      	tst	r1, r3
 800214c:	d001      	beq.n	8002152 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800214e:	2001      	movs	r0, #1
 8002150:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002152:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002154:	4770      	bx	lr

08002156 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002156:	b10a      	cbz	r2, 800215c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002158:	6181      	str	r1, [r0, #24]
 800215a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215c:	0409      	lsls	r1, r1, #16
 800215e:	6181      	str	r1, [r0, #24]
  }
}
 8002160:	4770      	bx	lr

08002162 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002162:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002164:	ea01 0203 	and.w	r2, r1, r3
 8002168:	ea21 0103 	bic.w	r1, r1, r3
 800216c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002170:	6181      	str	r1, [r0, #24]
}
 8002172:	4770      	bx	lr

08002174 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800217c:	d101      	bne.n	8002182 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800217e:	2000      	movs	r0, #0
}
 8002180:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002182:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002186:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002188:	2300      	movs	r3, #0
 800218a:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800218c:	2220      	movs	r2, #32
 800218e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002192:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002196:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002198:	f042 0204 	orr.w	r2, r2, #4
 800219c:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800219e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
 80021a4:	4770      	bx	lr

080021a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80021a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021aa:	4606      	mov	r6, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	4617      	mov	r7, r2
 80021b0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b2:	e03b      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7ff fb9c 	bl	80018f0 <HAL_GetTick>
 80021b8:	9b06      	ldr	r3, [sp, #24]
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	4540      	cmp	r0, r8
 80021be:	d802      	bhi.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x20>
 80021c0:	f1b8 0f00 	cmp.w	r8, #0
 80021c4:	d132      	bne.n	800222c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c6:	2d01      	cmp	r5, #1
 80021c8:	d018      	beq.n	80021fc <I2C_WaitOnFlagUntilTimeout+0x56>
 80021ca:	6833      	ldr	r3, [r6, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	ea24 0303 	bic.w	r3, r4, r3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	429f      	cmp	r7, r3
 80021dc:	d126      	bne.n	800222c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021de:	2300      	movs	r3, #0
 80021e0:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021e2:	2220      	movs	r2, #32
 80021e4:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021e8:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80021f4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
 80021fa:	e027      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021fc:	6833      	ldr	r3, [r6, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	ea24 0303 	bic.w	r3, r4, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	e7e5      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220e:	6833      	ldr	r3, [r6, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	ea24 0c03 	bic.w	ip, r4, r3
 8002216:	fa1f fc8c 	uxth.w	ip, ip
 800221a:	fabc fc8c 	clz	ip, ip
 800221e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002222:	4567      	cmp	r7, ip
 8002224:	d111      	bne.n	800224a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002226:	f1b8 3fff 	cmp.w	r8, #4294967295
 800222a:	d1c3      	bne.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8002230:	2d01      	cmp	r5, #1
 8002232:	d0ec      	beq.n	800220e <I2C_WaitOnFlagUntilTimeout+0x68>
 8002234:	6833      	ldr	r3, [r6, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	ea24 0c03 	bic.w	ip, r4, r3
 800223c:	fa1f fc8c 	uxth.w	ip, ip
 8002240:	fabc fc8c 	clz	ip, ip
 8002244:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002248:	e7eb      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 800224a:	2000      	movs	r0, #0
}
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002250 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002254:	4605      	mov	r5, r0
 8002256:	460e      	mov	r6, r1
 8002258:	4690      	mov	r8, r2
 800225a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800225c:	e053      	b.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002264:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800226c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002272:	2220      	movs	r2, #32
 8002274:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800227c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800227e:	f042 0204 	orr.w	r2, r2, #4
 8002282:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002284:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e04a      	b.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228c:	f7ff fb30 	bl	80018f0 <HAL_GetTick>
 8002290:	eba0 0009 	sub.w	r0, r0, r9
 8002294:	4540      	cmp	r0, r8
 8002296:	d802      	bhi.n	800229e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8002298:	f1b8 0f00 	cmp.w	r8, #0
 800229c:	d133      	bne.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800229e:	2f01      	cmp	r7, #1
 80022a0:	d017      	beq.n	80022d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	ea26 0303 	bic.w	r3, r6, r3
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b00      	subs	r3, #0
 80022ae:	bf18      	it	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	b343      	cbz	r3, 8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	2220      	movs	r2, #32
 80022ba:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80022ca:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80022ce:	2001      	movs	r0, #1
 80022d0:	e027      	b.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	ea26 0303 	bic.w	r3, r6, r3
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b00      	subs	r3, #0
 80022de:	bf18      	it	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	e7e6      	b.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	699c      	ldr	r4, [r3, #24]
 80022e8:	ea26 0404 	bic.w	r4, r6, r4
 80022ec:	b2a4      	uxth	r4, r4
 80022ee:	3c00      	subs	r4, #0
 80022f0:	bf18      	it	ne
 80022f2:	2401      	movne	r4, #1
 80022f4:	b1a4      	cbz	r4, 8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80022fe:	d1ae      	bne.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8002300:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002304:	d1c2      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002306:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800230a:	2f01      	cmp	r7, #1
 800230c:	d1ea      	bne.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	695c      	ldr	r4, [r3, #20]
 8002312:	ea26 0404 	bic.w	r4, r6, r4
 8002316:	b2a4      	uxth	r4, r4
 8002318:	3c00      	subs	r4, #0
 800231a:	bf18      	it	ne
 800231c:	2401      	movne	r4, #1
 800231e:	e7e9      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8002320:	2000      	movs	r0, #0
}
 8002322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002326 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002326:	b570      	push	{r4, r5, r6, lr}
 8002328:	4604      	mov	r4, r0
 800232a:	460d      	mov	r5, r1
 800232c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002336:	d121      	bne.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ff1b 	bl	8002174 <I2C_IsAcknowledgeFailed>
 800233e:	b9f8      	cbnz	r0, 8002380 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002340:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002344:	d0f3      	beq.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7ff fad3 	bl	80018f0 <HAL_GetTick>
 800234a:	1b80      	subs	r0, r0, r6
 800234c:	42a8      	cmp	r0, r5
 800234e:	d801      	bhi.n	8002354 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002350:	2d00      	cmp	r5, #0
 8002352:	d1ec      	bne.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800235c:	d1e7      	bne.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	2300      	movs	r3, #0
 8002360:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002362:	2220      	movs	r2, #32
 8002364:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002368:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800236e:	f042 0220 	orr.w	r2, r2, #32
 8002372:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002374:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e000      	b.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
}
 800237e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
 8002382:	e7fc      	b.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08002384 <I2C_RequestMemoryWrite>:
{
 8002384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002388:	b085      	sub	sp, #20
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	4691      	mov	r9, r2
 8002390:	461f      	mov	r7, r3
 8002392:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8002396:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80023a0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a2:	9600      	str	r6, [sp, #0]
 80023a4:	4643      	mov	r3, r8
 80023a6:	2200      	movs	r2, #0
 80023a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023ac:	f7ff fefb 	bl	80021a6 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	b960      	cbnz	r0, 80023cc <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80023b8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ba:	4633      	mov	r3, r6
 80023bc:	4642      	mov	r2, r8
 80023be:	4926      	ldr	r1, [pc, #152]	@ (8002458 <I2C_RequestMemoryWrite+0xd4>)
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff ff45 	bl	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c6:	b168      	cbz	r0, 80023e4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
 80023ca:	e008      	b.n	80023de <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023d4:	d002      	beq.n	80023dc <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023da:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80023dc:	2003      	movs	r0, #3
}
 80023de:	b005      	add	sp, #20
 80023e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e4:	2300      	movs	r3, #0
 80023e6:	9303      	str	r3, [sp, #12]
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	9203      	str	r2, [sp, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f4:	4632      	mov	r2, r6
 80023f6:	4641      	mov	r1, r8
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff94 	bl	8002326 <I2C_WaitOnTXEFlagUntilTimeout>
 80023fe:	b930      	cbnz	r0, 800240e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002400:	2f01      	cmp	r7, #1
 8002402:	d10f      	bne.n	8002424 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	fa5f f689 	uxtb.w	r6, r9
 800240a:	611e      	str	r6, [r3, #16]
 800240c:	e7e7      	b.n	80023de <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002410:	2b04      	cmp	r3, #4
 8002412:	d001      	beq.n	8002418 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e7e2      	b.n	80023de <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e7f7      	b.n	8002414 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800242a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242c:	4632      	mov	r2, r6
 800242e:	4641      	mov	r1, r8
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff78 	bl	8002326 <I2C_WaitOnTXEFlagUntilTimeout>
 8002436:	b920      	cbnz	r0, 8002442 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	fa5f f689 	uxtb.w	r6, r9
 800243e:	611e      	str	r6, [r3, #16]
 8002440:	e7cd      	b.n	80023de <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002444:	2b04      	cmp	r3, #4
 8002446:	d001      	beq.n	800244c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8002448:	2001      	movs	r0, #1
 800244a:	e7c8      	b.n	80023de <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e7f7      	b.n	8002448 <I2C_RequestMemoryWrite+0xc4>
 8002458:	00010002 	.word	0x00010002

0800245c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
 8002462:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f013 0f04 	tst.w	r3, #4
 800246c:	d121      	bne.n	80024b2 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fe80 	bl	8002174 <I2C_IsAcknowledgeFailed>
 8002474:	b9f8      	cbnz	r0, 80024b6 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002476:	f1b5 3fff 	cmp.w	r5, #4294967295
 800247a:	d0f3      	beq.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7ff fa38 	bl	80018f0 <HAL_GetTick>
 8002480:	1b80      	subs	r0, r0, r6
 8002482:	42a8      	cmp	r0, r5
 8002484:	d801      	bhi.n	800248a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002486:	2d00      	cmp	r5, #0
 8002488:	d1ec      	bne.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f013 0f04 	tst.w	r3, #4
 8002492:	d1e7      	bne.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002494:	2300      	movs	r3, #0
 8002496:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	2220      	movs	r2, #32
 800249a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80024aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	e000      	b.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
}
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	e7fc      	b.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

080024bc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80024bc:	2800      	cmp	r0, #0
 80024be:	f000 80cc 	beq.w	800265a <HAL_I2C_Init+0x19e>
{
 80024c2:	b570      	push	{r4, r5, r6, lr}
 80024c4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d077      	beq.n	80025be <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ce:	2324      	movs	r3, #36	@ 0x24
 80024d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80024f0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f2:	f000 fc79 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f6:	6862      	ldr	r2, [r4, #4]
 80024f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002664 <HAL_I2C_Init+0x1a8>)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d864      	bhi.n	80025c8 <HAL_I2C_Init+0x10c>
 80024fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002668 <HAL_I2C_Init+0x1ac>)
 8002500:	4298      	cmp	r0, r3
 8002502:	bf8c      	ite	hi
 8002504:	2300      	movhi	r3, #0
 8002506:	2301      	movls	r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 80a8 	bne.w	800265e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800250e:	4957      	ldr	r1, [pc, #348]	@ (800266c <HAL_I2C_Init+0x1b0>)
 8002510:	fba1 3100 	umull	r3, r1, r1, r0
 8002514:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002516:	6825      	ldr	r5, [r4, #0]
 8002518:	686a      	ldr	r2, [r5, #4]
 800251a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800251e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002522:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002524:	6821      	ldr	r1, [r4, #0]
 8002526:	6a0a      	ldr	r2, [r1, #32]
 8002528:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800252c:	6866      	ldr	r6, [r4, #4]
 800252e:	4d4d      	ldr	r5, [pc, #308]	@ (8002664 <HAL_I2C_Init+0x1a8>)
 8002530:	42ae      	cmp	r6, r5
 8002532:	d84f      	bhi.n	80025d4 <HAL_I2C_Init+0x118>
 8002534:	3301      	adds	r3, #1
 8002536:	4313      	orrs	r3, r2
 8002538:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	69ca      	ldr	r2, [r1, #28]
 800253e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002542:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002546:	6865      	ldr	r5, [r4, #4]
 8002548:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_I2C_Init+0x1a8>)
 800254a:	429d      	cmp	r5, r3
 800254c:	d84c      	bhi.n	80025e8 <HAL_I2C_Init+0x12c>
 800254e:	1e43      	subs	r3, r0, #1
 8002550:	006d      	lsls	r5, r5, #1
 8002552:	fbb3 f3f5 	udiv	r3, r3, r5
 8002556:	3301      	adds	r3, #1
 8002558:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800255c:	4203      	tst	r3, r0
 800255e:	d078      	beq.n	8002652 <HAL_I2C_Init+0x196>
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	431a      	orrs	r2, r3
 8002566:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	6821      	ldr	r1, [r4, #0]
 800256a:	680b      	ldr	r3, [r1, #0]
 800256c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002570:	69e2      	ldr	r2, [r4, #28]
 8002572:	6a20      	ldr	r0, [r4, #32]
 8002574:	4302      	orrs	r2, r0
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800257a:	6821      	ldr	r1, [r4, #0]
 800257c:	688b      	ldr	r3, [r1, #8]
 800257e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002586:	6922      	ldr	r2, [r4, #16]
 8002588:	68e0      	ldr	r0, [r4, #12]
 800258a:	4302      	orrs	r2, r0
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002590:	6821      	ldr	r1, [r4, #0]
 8002592:	68cb      	ldr	r3, [r1, #12]
 8002594:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002598:	6962      	ldr	r2, [r4, #20]
 800259a:	69a0      	ldr	r0, [r4, #24]
 800259c:	4302      	orrs	r2, r0
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	2000      	movs	r0, #0
 80025ae:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	2320      	movs	r3, #32
 80025b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80025be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80025c2:	f7ff f847 	bl	8001654 <HAL_I2C_MspInit>
 80025c6:	e782      	b.n	80024ce <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_I2C_Init+0x1b4>)
 80025ca:	4298      	cmp	r0, r3
 80025cc:	bf8c      	ite	hi
 80025ce:	2300      	movhi	r3, #0
 80025d0:	2301      	movls	r3, #1
 80025d2:	e799      	b.n	8002508 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80025d8:	fb05 f303 	mul.w	r3, r5, r3
 80025dc:	4d25      	ldr	r5, [pc, #148]	@ (8002674 <HAL_I2C_Init+0x1b8>)
 80025de:	fba5 5303 	umull	r5, r3, r5, r3
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	3301      	adds	r3, #1
 80025e6:	e7a6      	b.n	8002536 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	68a6      	ldr	r6, [r4, #8]
 80025ea:	b9be      	cbnz	r6, 800261c <HAL_I2C_Init+0x160>
 80025ec:	1e43      	subs	r3, r0, #1
 80025ee:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80025f2:	fbb3 f3fc 	udiv	r3, r3, ip
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	bb43      	cbnz	r3, 8002656 <HAL_I2C_Init+0x19a>
 8002604:	b9c6      	cbnz	r6, 8002638 <HAL_I2C_Init+0x17c>
 8002606:	1e43      	subs	r3, r0, #1
 8002608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800260c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261a:	e7a3      	b.n	8002564 <HAL_I2C_Init+0xa8>
 800261c:	1e43      	subs	r3, r0, #1
 800261e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002622:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002626:	fbb3 f3fc 	udiv	r3, r3, ip
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	e7e4      	b.n	8002602 <HAL_I2C_Init+0x146>
 8002638:	1e43      	subs	r3, r0, #1
 800263a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800263e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002642:	fbb3 f3f5 	udiv	r3, r3, r5
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002650:	e788      	b.n	8002564 <HAL_I2C_Init+0xa8>
 8002652:	2304      	movs	r3, #4
 8002654:	e786      	b.n	8002564 <HAL_I2C_Init+0xa8>
 8002656:	2301      	movs	r3, #1
 8002658:	e784      	b.n	8002564 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
}
 800265c:	4770      	bx	lr
    return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e7ac      	b.n	80025bc <HAL_I2C_Init+0x100>
 8002662:	bf00      	nop
 8002664:	000186a0 	.word	0x000186a0
 8002668:	001e847f 	.word	0x001e847f
 800266c:	431bde83 	.word	0x431bde83
 8002670:	003d08ff 	.word	0x003d08ff
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_I2C_Mem_Write>:
{
 8002678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800267c:	b083      	sub	sp, #12
 800267e:	4604      	mov	r4, r0
 8002680:	460f      	mov	r7, r1
 8002682:	4690      	mov	r8, r2
 8002684:	4699      	mov	r9, r3
 8002686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff f932 	bl	80018f0 <HAL_GetTick>
 800268c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002692:	b2c0      	uxtb	r0, r0
 8002694:	2820      	cmp	r0, #32
 8002696:	d003      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002698:	2002      	movs	r0, #2
}
 800269a:	b003      	add	sp, #12
 800269c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a0:	9500      	str	r5, [sp, #0]
 80026a2:	2319      	movs	r3, #25
 80026a4:	2201      	movs	r2, #1
 80026a6:	494b      	ldr	r1, [pc, #300]	@ (80027d4 <HAL_I2C_Mem_Write+0x15c>)
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff fd7c 	bl	80021a6 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	f040 8089 	bne.w	80027c6 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80026b4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f000 8086 	beq.w	80027ca <HAL_I2C_Mem_Write+0x152>
 80026be:	2301      	movs	r3, #1
 80026c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	f012 0f01 	tst.w	r2, #1
 80026cc:	d103      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026de:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e0:	2321      	movs	r3, #33	@ 0x21
 80026e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e6:	2340      	movs	r3, #64	@ 0x40
 80026e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80026f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80026f2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80026f8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026fc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fe:	4b36      	ldr	r3, [pc, #216]	@ (80027d8 <HAL_I2C_Mem_Write+0x160>)
 8002700:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002702:	9501      	str	r5, [sp, #4]
 8002704:	9600      	str	r6, [sp, #0]
 8002706:	464b      	mov	r3, r9
 8002708:	4642      	mov	r2, r8
 800270a:	4639      	mov	r1, r7
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fe39 	bl	8002384 <I2C_RequestMemoryWrite>
 8002712:	2800      	cmp	r0, #0
 8002714:	d15b      	bne.n	80027ce <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8002716:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d035      	beq.n	8002788 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	462a      	mov	r2, r5
 800271e:	4631      	mov	r1, r6
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff fe00 	bl	8002326 <I2C_WaitOnTXEFlagUntilTimeout>
 8002726:	bb20      	cbnz	r0, 8002772 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002728:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002730:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002732:	1c53      	adds	r3, r2, #1
 8002734:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002736:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002738:	3901      	subs	r1, #1
 800273a:	b289      	uxth	r1, r1
 800273c:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800273e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	6958      	ldr	r0, [r3, #20]
 800274c:	f010 0f04 	tst.w	r0, #4
 8002750:	d0e1      	beq.n	8002716 <HAL_I2C_Mem_Write+0x9e>
 8002752:	2900      	cmp	r1, #0
 8002754:	d0df      	beq.n	8002716 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002756:	7852      	ldrb	r2, [r2, #1]
 8002758:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800275a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002760:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002766:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002770:	e7d1      	b.n	8002716 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002774:	2b04      	cmp	r3, #4
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002778:	2001      	movs	r0, #1
 800277a:	e78e      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e7f7      	b.n	8002778 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	462a      	mov	r2, r5
 800278a:	4631      	mov	r1, r6
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff fe65 	bl	800245c <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	b150      	cbz	r0, 80027aa <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002796:	2b04      	cmp	r3, #4
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
 800279c:	e77d      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e7f7      	b.n	800279a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	2320      	movs	r3, #32
 80027b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80027c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80027c4:	e769      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80027c6:	2002      	movs	r0, #2
 80027c8:	e767      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80027ca:	2002      	movs	r0, #2
 80027cc:	e765      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80027ce:	2001      	movs	r0, #1
 80027d0:	e763      	b.n	800269a <HAL_I2C_Mem_Write+0x22>
 80027d2:	bf00      	nop
 80027d4:	00100002 	.word	0x00100002
 80027d8:	ffff0000 	.word	0xffff0000

080027dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	2800      	cmp	r0, #0
 80027de:	f000 81e0 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x3c6>
{
 80027e2:	b570      	push	{r4, r5, r6, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	6803      	ldr	r3, [r0, #0]
 80027ea:	f013 0f01 	tst.w	r3, #1
 80027ee:	d03b      	beq.n	8002868 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027f0:	4b9f      	ldr	r3, [pc, #636]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d02c      	beq.n	8002856 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002804:	2b08      	cmp	r3, #8
 8002806:	d021      	beq.n	800284c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002808:	6863      	ldr	r3, [r4, #4]
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280e:	d04f      	beq.n	80028b0 <HAL_RCC_OscConfig+0xd4>
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002814:	d052      	beq.n	80028bc <HAL_RCC_OscConfig+0xe0>
 8002816:	4b96      	ldr	r3, [pc, #600]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002826:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d050      	beq.n	80028d0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff f85f 	bl	80018f0 <HAL_GetTick>
 8002832:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	4b8e      	ldr	r3, [pc, #568]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800283c:	d114      	bne.n	8002868 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283e:	f7ff f857 	bl	80018f0 <HAL_GetTick>
 8002842:	1b40      	subs	r0, r0, r5
 8002844:	2864      	cmp	r0, #100	@ 0x64
 8002846:	d9f5      	bls.n	8002834 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002848:	2003      	movs	r0, #3
 800284a:	e1b1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284c:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002854:	d0d8      	beq.n	8002808 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	4b86      	ldr	r3, [pc, #536]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800285e:	d003      	beq.n	8002868 <HAL_RCC_OscConfig+0x8c>
 8002860:	6863      	ldr	r3, [r4, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 819f 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	f013 0f02 	tst.w	r3, #2
 800286e:	d054      	beq.n	800291a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002870:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f013 0f0c 	tst.w	r3, #12
 8002878:	d03e      	beq.n	80028f8 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002882:	2b08      	cmp	r3, #8
 8002884:	d033      	beq.n	80028ee <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002886:	68e3      	ldr	r3, [r4, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d068      	beq.n	800295e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b79      	ldr	r3, [pc, #484]	@ (8002a74 <HAL_RCC_OscConfig+0x298>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7ff f82d 	bl	80018f0 <HAL_GetTick>
 8002896:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f013 0f02 	tst.w	r3, #2
 80028a0:	d154      	bne.n	800294c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff f825 	bl	80018f0 <HAL_GetTick>
 80028a6:	1b40      	subs	r0, r0, r5
 80028a8:	2802      	cmp	r0, #2
 80028aa:	d9f5      	bls.n	8002898 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80028ac:	2003      	movs	r0, #3
 80028ae:	e17f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	4a6f      	ldr	r2, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e7b5      	b.n	8002828 <HAL_RCC_OscConfig+0x4c>
 80028bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e7ab      	b.n	8002828 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80028d0:	f7ff f80e 	bl	80018f0 <HAL_GetTick>
 80028d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028de:	d0c3      	beq.n	8002868 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff f806 	bl	80018f0 <HAL_GetTick>
 80028e4:	1b40      	subs	r0, r0, r5
 80028e6:	2864      	cmp	r0, #100	@ 0x64
 80028e8:	d9f5      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
 80028ec:	e160      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80028f6:	d1c6      	bne.n	8002886 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f013 0f02 	tst.w	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_RCC_OscConfig+0x12e>
 8002902:	68e3      	ldr	r3, [r4, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 8150 	bne.w	8002baa <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4a59      	ldr	r2, [pc, #356]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002912:	6921      	ldr	r1, [r4, #16]
 8002914:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002918:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	f013 0f08 	tst.w	r3, #8
 8002920:	d042      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002922:	6963      	ldr	r3, [r4, #20]
 8002924:	b36b      	cbz	r3, 8002982 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <HAL_RCC_OscConfig+0x298>)
 8002928:	2201      	movs	r2, #1
 800292a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe ffdf 	bl	80018f0 <HAL_GetTick>
 8002932:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	4b4e      	ldr	r3, [pc, #312]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002938:	f013 0f02 	tst.w	r3, #2
 800293c:	d134      	bne.n	80029a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe ffd7 	bl	80018f0 <HAL_GetTick>
 8002942:	1b40      	subs	r0, r0, r5
 8002944:	2802      	cmp	r0, #2
 8002946:	d9f5      	bls.n	8002934 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002948:	2003      	movs	r0, #3
 800294a:	e131      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4a48      	ldr	r2, [pc, #288]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002954:	6921      	ldr	r1, [r4, #16]
 8002956:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e7dd      	b.n	800291a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800295e:	4b45      	ldr	r3, [pc, #276]	@ (8002a74 <HAL_RCC_OscConfig+0x298>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002964:	f7fe ffc4 	bl	80018f0 <HAL_GetTick>
 8002968:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f013 0f02 	tst.w	r3, #2
 8002972:	d0d2      	beq.n	800291a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe ffbc 	bl	80018f0 <HAL_GetTick>
 8002978:	1b40      	subs	r0, r0, r5
 800297a:	2802      	cmp	r0, #2
 800297c:	d9f5      	bls.n	800296a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800297e:	2003      	movs	r0, #3
 8002980:	e116      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <HAL_RCC_OscConfig+0x298>)
 8002984:	2200      	movs	r2, #0
 8002986:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe ffb1 	bl	80018f0 <HAL_GetTick>
 800298e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	f013 0f02 	tst.w	r3, #2
 8002998:	d006      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe ffa9 	bl	80018f0 <HAL_GetTick>
 800299e:	1b40      	subs	r0, r0, r5
 80029a0:	2802      	cmp	r0, #2
 80029a2:	d9f5      	bls.n	8002990 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80029a4:	2003      	movs	r0, #3
 80029a6:	e103      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f013 0f04 	tst.w	r3, #4
 80029ae:	d077      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80029b8:	d133      	bne.n	8002a22 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	4b2c      	ldr	r3, [pc, #176]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80029c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029d2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <HAL_RCC_OscConfig+0x29c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80029dc:	d023      	beq.n	8002a26 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029de:	68a3      	ldr	r3, [r4, #8]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d034      	beq.n	8002a4e <HAL_RCC_OscConfig+0x272>
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d038      	beq.n	8002a5a <HAL_RCC_OscConfig+0x27e>
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 80029ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80029f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029f4:	f022 0204 	bic.w	r2, r2, #4
 80029f8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029fa:	68a3      	ldr	r3, [r4, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe ff76 	bl	80018f0 <HAL_GetTick>
 8002a04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	f013 0f02 	tst.w	r3, #2
 8002a0e:	d146      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe ff6e 	bl	80018f0 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a1a:	4298      	cmp	r0, r3
 8002a1c:	d9f3      	bls.n	8002a06 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a1e:	2003      	movs	r0, #3
 8002a20:	e0c6      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2500      	movs	r5, #0
 8002a24:	e7d6      	b.n	80029d4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <HAL_RCC_OscConfig+0x29c>)
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a30:	f7fe ff5e 	bl	80018f0 <HAL_GetTick>
 8002a34:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a3e:	d1ce      	bne.n	80029de <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe ff56 	bl	80018f0 <HAL_GetTick>
 8002a44:	1b80      	subs	r0, r0, r6
 8002a46:	2802      	cmp	r0, #2
 8002a48:	d9f5      	bls.n	8002a36 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	e0b0      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4e:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002a50:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e7cf      	b.n	80029fa <HAL_RCC_OscConfig+0x21e>
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_OscConfig+0x294>)
 8002a5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a5e:	f042 0204 	orr.w	r2, r2, #4
 8002a62:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a6c:	e7c5      	b.n	80029fa <HAL_RCC_OscConfig+0x21e>
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe ff38 	bl	80018f0 <HAL_GetTick>
 8002a80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	4b52      	ldr	r3, [pc, #328]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	f013 0f02 	tst.w	r3, #2
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff30 	bl	80018f0 <HAL_GetTick>
 8002a90:	1b80      	subs	r0, r0, r6
 8002a92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d9f3      	bls.n	8002a82 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	e088      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a9e:	b9ed      	cbnz	r5, 8002adc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa0:	69a3      	ldr	r3, [r4, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8083 	beq.w	8002bae <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa8:	4a48      	ldr	r2, [pc, #288]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	f002 020c 	and.w	r2, r2, #12
 8002ab0:	2a08      	cmp	r2, #8
 8002ab2:	d051      	beq.n	8002b58 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d017      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <HAL_RCC_OscConfig+0x3f4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe ff17 	bl	80018f0 <HAL_GetTick>
 8002ac2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac4:	4b41      	ldr	r3, [pc, #260]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002acc:	d042      	beq.n	8002b54 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe ff0f 	bl	80018f0 <HAL_GetTick>
 8002ad2:	1b00      	subs	r0, r0, r4
 8002ad4:	2802      	cmp	r0, #2
 8002ad6:	d9f5      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2003      	movs	r0, #3
 8002ada:	e069      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002ade:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	e7db      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_OscConfig+0x3f4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002aee:	f7fe feff 	bl	80018f0 <HAL_GetTick>
 8002af2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af4:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002afc:	d006      	beq.n	8002b0c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe fef7 	bl	80018f0 <HAL_GetTick>
 8002b02:	1b40      	subs	r0, r0, r5
 8002b04:	2802      	cmp	r0, #2
 8002b06:	d9f5      	bls.n	8002af4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e051      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0c:	69e3      	ldr	r3, [r4, #28]
 8002b0e:	6a22      	ldr	r2, [r4, #32]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b1a:	0852      	lsrs	r2, r2, #1
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b28:	4a28      	ldr	r2, [pc, #160]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002b2a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_RCC_OscConfig+0x3f4>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b32:	f7fe fedd 	bl	80018f0 <HAL_GetTick>
 8002b36:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b38:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fed5 	bl	80018f0 <HAL_GetTick>
 8002b46:	1b00      	subs	r0, r0, r4
 8002b48:	2802      	cmp	r0, #2
 8002b4a:	d9f5      	bls.n	8002b38 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	e02f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b50:	2000      	movs	r0, #0
 8002b52:	e02d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002b54:	2000      	movs	r0, #0
 8002b56:	e02b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d02b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_RCC_OscConfig+0x3f0>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002b64:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b66:	4291      	cmp	r1, r2
 8002b68:	d126      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b6e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	428a      	cmp	r2, r1
 8002b72:	d123      	bne.n	8002bbc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b76:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b80:	d11e      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b82:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002b86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b92:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002b96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b98:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002b9c:	d114      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
}
 8002ba4:	4770      	bx	lr
        return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002bae:	2000      	movs	r0, #0
}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e7fb      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e7f9      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	e7f7      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e7f5      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7f3      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002bc8:	2001      	movs	r0, #1
 8002bca:	e7f1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d4>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	42470000 	.word	0x42470000

08002bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd6:	4b26      	ldr	r3, [pc, #152]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d041      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x92>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d141      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002bf4:	d012      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002bfe:	481d      	ldr	r0, [pc, #116]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c00:	2300      	movs	r3, #0
 8002c02:	fba1 0100 	umull	r0, r1, r1, r0
 8002c06:	f7fd fb3b 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c0a:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002c16:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c1a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c1e:	6858      	ldr	r0, [r3, #4]
 8002c20:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c24:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c28:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c2c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c30:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c34:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c38:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c3c:	ebb1 010c 	subs.w	r1, r1, ip
 8002c40:	eb63 030e 	sbc.w	r3, r3, lr
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	00c9      	lsls	r1, r1, #3
 8002c4c:	eb11 0c00 	adds.w	ip, r1, r0
 8002c50:	f143 0300 	adc.w	r3, r3, #0
 8002c54:	0299      	lsls	r1, r3, #10
 8002c56:	2300      	movs	r3, #0
 8002c58:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002c5c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002c60:	f7fd fb0e 	bl	8000280 <__aeabi_uldivmod>
 8002c64:	e7d1      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002c66:	4803      	ldr	r0, [pc, #12]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c68:	e7d7      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6a:	4803      	ldr	r0, [pc, #12]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002c6c:	e7d5      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x46>
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	017d7840 	.word	0x017d7840
 8002c78:	00f42400 	.word	0x00f42400

08002c7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f000 809b 	beq.w	8002db8 <HAL_RCC_ClockConfig+0x13c>
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	460d      	mov	r5, r1
 8002c86:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc8 <HAL_RCC_ClockConfig+0x14c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c94:	b2cb      	uxtb	r3, r1
 8002c96:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc8 <HAL_RCC_ClockConfig+0x14c>)
 8002c98:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	f040 808b 	bne.w	8002dbc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f013 0f02 	tst.w	r3, #2
 8002cac:	d017      	beq.n	8002cde <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cae:	f013 0f04 	tst.w	r3, #4
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4a45      	ldr	r2, [pc, #276]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002cb6:	6893      	ldr	r3, [r2, #8]
 8002cb8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cbc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	f013 0f08 	tst.w	r3, #8
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc6:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002cc8:	6893      	ldr	r3, [r2, #8]
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002cd2:	6893      	ldr	r3, [r2, #8]
 8002cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd8:	68a1      	ldr	r1, [r4, #8]
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f013 0f01 	tst.w	r3, #1
 8002ce4:	d032      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d021      	beq.n	8002d30 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cec:	1e9a      	subs	r2, r3, #2
 8002cee:	2a01      	cmp	r2, #1
 8002cf0:	d925      	bls.n	8002d3e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4a36      	ldr	r2, [pc, #216]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	f012 0f02 	tst.w	r2, #2
 8002cfa:	d061      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfc:	4933      	ldr	r1, [pc, #204]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002cfe:	688a      	ldr	r2, [r1, #8]
 8002d00:	f022 0203 	bic.w	r2, r2, #3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d08:	f7fe fdf2 	bl	80018f0 <HAL_GetTick>
 8002d0c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	6862      	ldr	r2, [r4, #4]
 8002d18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1e:	f7fe fde7 	bl	80018f0 <HAL_GetTick>
 8002d22:	1b80      	subs	r0, r0, r6
 8002d24:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d28:	4298      	cmp	r0, r3
 8002d2a:	d9f0      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	e042      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d38:	d1e0      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	e03b      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002d46:	d1d9      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e034      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCC_ClockConfig+0x14c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	42ab      	cmp	r3, r5
 8002d56:	d907      	bls.n	8002d68 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d58:	b2ea      	uxtb	r2, r5
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_ClockConfig+0x14c>)
 8002d5c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	42ab      	cmp	r3, r5
 8002d66:	d12d      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	f013 0f04 	tst.w	r3, #4
 8002d6e:	d006      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4a16      	ldr	r2, [pc, #88]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d72:	6893      	ldr	r3, [r2, #8]
 8002d74:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002d78:	68e1      	ldr	r1, [r4, #12]
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f013 0f08 	tst.w	r3, #8
 8002d84:	d007      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d88:	6893      	ldr	r3, [r2, #8]
 8002d8a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002d8e:	6921      	ldr	r1, [r4, #16]
 8002d90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d94:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f7ff ff1d 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_ClockConfig+0x150>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002da2:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd0 <HAL_RCC_ClockConfig+0x154>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	40d8      	lsrs	r0, r3
 8002da8:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <HAL_RCC_ClockConfig+0x158>)
 8002daa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x15c>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f7fe fd52 	bl	8001858 <HAL_InitTick>
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
}
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002db8:	2001      	movs	r0, #1
}
 8002dba:	4770      	bx	lr
      return HAL_ERROR;
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	e7fa      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	e7f8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	e7f6      	b.n	8002db6 <HAL_RCC_ClockConfig+0x13a>
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08004ec8 	.word	0x08004ec8
 8002dd4:	20000004 	.word	0x20000004
 8002dd8:	2000000c 	.word	0x2000000c

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002ddc:	4b01      	ldr	r3, [pc, #4]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x8>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dea:	f7ff fff7 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dee:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002df6:	4a03      	ldr	r2, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002dfa:	40d8      	lsrs	r0, r3
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08004ec0 	.word	0x08004ec0

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e0a:	f7ff ffe7 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e16:	4a03      	ldr	r2, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e1a:	40d8      	lsrs	r0, r3
 8002e1c:	bd08      	pop	{r3, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08004ec0 	.word	0x08004ec0

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e2a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2c:	6a04      	ldr	r4, [r0, #32]
 8002e2e:	f024 0401 	bic.w	r4, r4, #1
 8002e32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e34:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e36:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e3a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002e42:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e46:	6203      	str	r3, [r0, #32]
}
 8002e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e4e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e52:	6a04      	ldr	r4, [r0, #32]
 8002e54:	f024 0410 	bic.w	r4, r4, #16
 8002e58:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e60:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e68:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e6e:	6203      	str	r3, [r0, #32]
}
 8002e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e76:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	6083      	str	r3, [r0, #8]
}
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d132      	bne.n	8002ef8 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	6803      	ldr	r3, [r0, #0]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <HAL_TIM_Base_Start+0x78>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d020      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002ea6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002eae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d015      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002eb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d011      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002ebe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002ec6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
 8002ece:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d005      	beq.n	8002ee2 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ede:	2000      	movs	r0, #0
 8002ee0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	2a06      	cmp	r2, #6
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4770      	bx	lr
    return HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
 8002efa:	4770      	bx	lr
  return HAL_OK;
 8002efc:	2000      	movs	r0, #0
}
 8002efe:	4770      	bx	lr
 8002f00:	40010000 	.word	0x40010000

08002f04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002f04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f06:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <TIM_Base_SetConfig+0xcc>)
 8002f08:	4290      	cmp	r0, r2
 8002f0a:	d012      	beq.n	8002f32 <TIM_Base_SetConfig+0x2e>
 8002f0c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002f10:	d00f      	beq.n	8002f32 <TIM_Base_SetConfig+0x2e>
 8002f12:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002f16:	4290      	cmp	r0, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0x2e>
 8002f1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f1e:	4290      	cmp	r0, r2
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x2e>
 8002f22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f26:	4290      	cmp	r0, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x2e>
 8002f2a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002f2e:	4290      	cmp	r0, r2
 8002f30:	d103      	bne.n	8002f3a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f36:	684a      	ldr	r2, [r1, #4]
 8002f38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3a:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <TIM_Base_SetConfig+0xcc>)
 8002f3c:	4290      	cmp	r0, r2
 8002f3e:	d02a      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f40:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002f44:	d027      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f46:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002f4a:	4290      	cmp	r0, r2
 8002f4c:	d023      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f52:	4290      	cmp	r0, r2
 8002f54:	d01f      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f5a:	4290      	cmp	r0, r2
 8002f5c:	d01b      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f5e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002f62:	4290      	cmp	r0, r2
 8002f64:	d017      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f66:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	d013      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f72:	4290      	cmp	r0, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f7a:	4290      	cmp	r0, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f7e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002f82:	4290      	cmp	r0, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f8a:	4290      	cmp	r0, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x92>
 8002f8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f92:	4290      	cmp	r0, r2
 8002f94:	d103      	bne.n	8002f9e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	68ca      	ldr	r2, [r1, #12]
 8002f9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa2:	694a      	ldr	r2, [r1, #20]
 8002fa4:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa6:	688a      	ldr	r2, [r1, #8]
 8002fa8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002faa:	680a      	ldr	r2, [r1, #0]
 8002fac:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fae:	4a08      	ldr	r2, [pc, #32]	@ (8002fd0 <TIM_Base_SetConfig+0xcc>)
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0xb8>
 8002fb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002fb8:	4290      	cmp	r0, r2
 8002fba:	d101      	bne.n	8002fc0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	690a      	ldr	r2, [r1, #16]
 8002fbe:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002fc0:	6802      	ldr	r2, [r0, #0]
 8002fc2:	f042 0204 	orr.w	r2, r2, #4
 8002fc6:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002fcc:	6003      	str	r3, [r0, #0]
}
 8002fce:	4770      	bx	lr
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002fd4:	b340      	cbz	r0, 8003028 <HAL_TIM_Base_Init+0x54>
{
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002fde:	b1f3      	cbz	r3, 800301e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	f851 0b04 	ldr.w	r0, [r1], #4
 8002fec:	f7ff ff8a 	bl	8002f04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002ffa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ffe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003002:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800300a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800300e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003012:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003016:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800301a:	2000      	movs	r0, #0
}
 800301c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800301e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003022:	f7fe fb4f 	bl	80016c4 <HAL_TIM_Base_MspInit>
 8003026:	e7db      	b.n	8002fe0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
}
 800302a:	4770      	bx	lr

0800302c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800302c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003034:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003038:	430a      	orrs	r2, r1
 800303a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	6082      	str	r2, [r0, #8]
}
 8003040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003046:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d078      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0xfa>
{
 800304e:	b510      	push	{r4, lr}
 8003050:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003052:	2301      	movs	r3, #1
 8003054:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	2302      	movs	r3, #2
 800305a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800305e:	6802      	ldr	r2, [r0, #0]
 8003060:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800306a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800306c:	680b      	ldr	r3, [r1, #0]
 800306e:	2b60      	cmp	r3, #96	@ 0x60
 8003070:	d04c      	beq.n	800310c <HAL_TIM_ConfigClockSource+0xc6>
 8003072:	d823      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x76>
 8003074:	2b40      	cmp	r3, #64	@ 0x40
 8003076:	d054      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xdc>
 8003078:	d811      	bhi.n	800309e <HAL_TIM_ConfigClockSource+0x58>
 800307a:	2b20      	cmp	r3, #32
 800307c:	d003      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x40>
 800307e:	d80a      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x50>
 8003080:	b10b      	cbz	r3, 8003086 <HAL_TIM_ConfigClockSource+0x40>
 8003082:	2b10      	cmp	r3, #16
 8003084:	d105      	bne.n	8003092 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003086:	4619      	mov	r1, r3
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	f7ff fef4 	bl	8002e76 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2000      	movs	r0, #0
      break;
 8003090:	e028      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e026      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003096:	2b30      	cmp	r3, #48	@ 0x30
 8003098:	d0f5      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	e022      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800309e:	2b50      	cmp	r3, #80	@ 0x50
 80030a0:	d10a      	bne.n	80030b8 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	68ca      	ldr	r2, [r1, #12]
 80030a4:	6849      	ldr	r1, [r1, #4]
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	f7ff febe 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	2150      	movs	r1, #80	@ 0x50
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	f7ff fee1 	bl	8002e76 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2000      	movs	r0, #0
      break;
 80030b6:	e015      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e013      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c0:	d03a      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0xf2>
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c6:	d014      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xac>
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d137      	bne.n	800313c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	68cb      	ldr	r3, [r1, #12]
 80030ce:	684a      	ldr	r2, [r1, #4]
 80030d0:	6889      	ldr	r1, [r1, #8]
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	f7ff ffaa 	bl	800302c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80030e0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80030ea:	2300      	movs	r3, #0
 80030ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80030f0:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	68cb      	ldr	r3, [r1, #12]
 80030f4:	684a      	ldr	r2, [r1, #4]
 80030f6:	6889      	ldr	r1, [r1, #8]
 80030f8:	6800      	ldr	r0, [r0, #0]
 80030fa:	f7ff ff97 	bl	800302c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	6893      	ldr	r3, [r2, #8]
 8003102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003106:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2000      	movs	r0, #0
      break;
 800310a:	e7eb      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310c:	68ca      	ldr	r2, [r1, #12]
 800310e:	6849      	ldr	r1, [r1, #4]
 8003110:	6800      	ldr	r0, [r0, #0]
 8003112:	f7ff fe9c 	bl	8002e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003116:	2160      	movs	r1, #96	@ 0x60
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	f7ff feac 	bl	8002e76 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2000      	movs	r0, #0
      break;
 8003120:	e7e0      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	68ca      	ldr	r2, [r1, #12]
 8003124:	6849      	ldr	r1, [r1, #4]
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	f7ff fe7e 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312c:	2140      	movs	r1, #64	@ 0x40
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	f7ff fea1 	bl	8002e76 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2000      	movs	r0, #0
      break;
 8003136:	e7d5      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003138:	2000      	movs	r0, #0
 800313a:	e7d3      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800313c:	2001      	movs	r0, #1
 800313e:	e7d1      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003140:	2002      	movs	r0, #2
}
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003144:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003148:	2a01      	cmp	r2, #1
 800314a:	d03d      	beq.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 800314c:	b410      	push	{r4}
 800314e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003150:	2201      	movs	r2, #1
 8003152:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003156:	2202      	movs	r2, #2
 8003158:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800315c:	6802      	ldr	r2, [r0, #0]
 800315e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003162:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003166:	6808      	ldr	r0, [r1, #0]
 8003168:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4816      	ldr	r0, [pc, #88]	@ (80031cc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003172:	4282      	cmp	r2, r0
 8003174:	d01a      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003176:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800317a:	d017      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800317c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003180:	4282      	cmp	r2, r0
 8003182:	d013      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003184:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003188:	4282      	cmp	r2, r0
 800318a:	d00f      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800318c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003190:	4282      	cmp	r2, r0
 8003192:	d00b      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003194:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003198:	4282      	cmp	r2, r0
 800319a:	d007      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800319c:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80031a0:	4282      	cmp	r2, r0
 80031a2:	d003      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80031a4:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80031a8:	4282      	cmp	r2, r0
 80031aa:	d104      	bne.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ac:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b0:	6849      	ldr	r1, [r1, #4]
 80031b2:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	2000      	movs	r0, #0
 80031be:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80031c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80031c8:	2002      	movs	r0, #2
}
 80031ca:	4770      	bx	lr
 80031cc:	40010000 	.word	0x40010000

080031d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	f102 030c 	add.w	r3, r2, #12
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	320c      	adds	r2, #12
 80031e0:	e842 3100 	strex	r1, r3, [r2]
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d1f3      	bne.n	80031d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	f102 0314 	add.w	r3, r2, #20
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	3214      	adds	r2, #20
 80031f8:	e842 3100 	strex	r1, r3, [r2]
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d1f3      	bne.n	80031e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003202:	2b01      	cmp	r3, #1
 8003204:	d005      	beq.n	8003212 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	2320      	movs	r3, #32
 8003208:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320c:	2300      	movs	r3, #0
 800320e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003210:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f102 030c 	add.w	r3, r2, #12
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	320c      	adds	r2, #12
 8003222:	e842 3100 	strex	r1, r3, [r2]
 8003226:	2900      	cmp	r1, #0
 8003228:	d1f3      	bne.n	8003212 <UART_EndRxTransfer+0x42>
 800322a:	e7ec      	b.n	8003206 <UART_EndRxTransfer+0x36>

0800322c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	b510      	push	{r4, lr}
 800322e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	6802      	ldr	r2, [r0, #0]
 8003232:	6913      	ldr	r3, [r2, #16]
 8003234:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003238:	68c1      	ldr	r1, [r0, #12]
 800323a:	430b      	orrs	r3, r1
 800323c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323e:	6883      	ldr	r3, [r0, #8]
 8003240:	6902      	ldr	r2, [r0, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	6943      	ldr	r3, [r0, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	69c3      	ldr	r3, [r0, #28]
 800324a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800324c:	6801      	ldr	r1, [r0, #0]
 800324e:	68cb      	ldr	r3, [r1, #12]
 8003250:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003254:	f023 030c 	bic.w	r3, r3, #12
 8003258:	4313      	orrs	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	6953      	ldr	r3, [r2, #20]
 8003260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003264:	6981      	ldr	r1, [r0, #24]
 8003266:	430b      	orrs	r3, r1
 8003268:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	@ (8003334 <UART_SetConfig+0x108>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d006      	beq.n	8003280 <UART_SetConfig+0x54>
 8003272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003276:	4293      	cmp	r3, r2
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7ff fdb5 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 800327e:	e001      	b.n	8003284 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff fdc2 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003284:	69e3      	ldr	r3, [r4, #28]
 8003286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328a:	d029      	beq.n	80032e0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328c:	2100      	movs	r1, #0
 800328e:	1803      	adds	r3, r0, r0
 8003290:	4149      	adcs	r1, r1
 8003292:	181b      	adds	r3, r3, r0
 8003294:	f141 0100 	adc.w	r1, r1, #0
 8003298:	00c9      	lsls	r1, r1, #3
 800329a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1818      	adds	r0, r3, r0
 80032a2:	6863      	ldr	r3, [r4, #4]
 80032a4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80032a8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80032ac:	f141 0100 	adc.w	r1, r1, #0
 80032b0:	f7fc ffe6 	bl	8000280 <__aeabi_uldivmod>
 80032b4:	4a20      	ldr	r2, [pc, #128]	@ (8003338 <UART_SetConfig+0x10c>)
 80032b6:	fba2 3100 	umull	r3, r1, r2, r0
 80032ba:	0949      	lsrs	r1, r1, #5
 80032bc:	2364      	movs	r3, #100	@ 0x64
 80032be:	fb03 0311 	mls	r3, r3, r1, r0
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	3332      	adds	r3, #50	@ 0x32
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	6821      	ldr	r1, [r4, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }
}
 80032de:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032e0:	2300      	movs	r3, #0
 80032e2:	1802      	adds	r2, r0, r0
 80032e4:	eb43 0103 	adc.w	r1, r3, r3
 80032e8:	1812      	adds	r2, r2, r0
 80032ea:	f141 0100 	adc.w	r1, r1, #0
 80032ee:	00c9      	lsls	r1, r1, #3
 80032f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f4:	00d2      	lsls	r2, r2, #3
 80032f6:	1810      	adds	r0, r2, r0
 80032f8:	f141 0100 	adc.w	r1, r1, #0
 80032fc:	6862      	ldr	r2, [r4, #4]
 80032fe:	1892      	adds	r2, r2, r2
 8003300:	415b      	adcs	r3, r3
 8003302:	f7fc ffbd 	bl	8000280 <__aeabi_uldivmod>
 8003306:	4a0c      	ldr	r2, [pc, #48]	@ (8003338 <UART_SetConfig+0x10c>)
 8003308:	fba2 3100 	umull	r3, r1, r2, r0
 800330c:	0949      	lsrs	r1, r1, #5
 800330e:	2364      	movs	r3, #100	@ 0x64
 8003310:	fb03 0311 	mls	r3, r3, r1, r0
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	3332      	adds	r3, #50	@ 0x32
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	005a      	lsls	r2, r3, #1
 8003320:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003324:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	6821      	ldr	r1, [r4, #0]
 800332e:	4413      	add	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
 8003332:	e7d4      	b.n	80032de <UART_SetConfig+0xb2>
 8003334:	40011000 	.word	0x40011000
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <UART_WaitOnFlagUntilTimeout>:
{
 800333c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003340:	b083      	sub	sp, #12
 8003342:	4605      	mov	r5, r0
 8003344:	460e      	mov	r6, r1
 8003346:	4617      	mov	r7, r2
 8003348:	4699      	mov	r9, r3
 800334a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	681c      	ldr	r4, [r3, #0]
 8003352:	ea36 0404 	bics.w	r4, r6, r4
 8003356:	bf0c      	ite	eq
 8003358:	2401      	moveq	r4, #1
 800335a:	2400      	movne	r4, #0
 800335c:	42bc      	cmp	r4, r7
 800335e:	d128      	bne.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003360:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003364:	d0f3      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fac3 	bl	80018f0 <HAL_GetTick>
 800336a:	eba0 0009 	sub.w	r0, r0, r9
 800336e:	4540      	cmp	r0, r8
 8003370:	d823      	bhi.n	80033ba <UART_WaitOnFlagUntilTimeout+0x7e>
 8003372:	f1b8 0f00 	cmp.w	r8, #0
 8003376:	d022      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	f012 0f04 	tst.w	r2, #4
 8003380:	d0e5      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
 8003382:	2e80      	cmp	r6, #128	@ 0x80
 8003384:	d0e3      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
 8003386:	2e40      	cmp	r6, #64	@ 0x40
 8003388:	d0e1      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f012 0f08 	tst.w	r2, #8
 8003390:	d0dd      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003392:	2400      	movs	r4, #0
 8003394:	9401      	str	r4, [sp, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	9201      	str	r2, [sp, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80033a0:	4628      	mov	r0, r5
 80033a2:	f7ff ff15 	bl	80031d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a6:	2308      	movs	r3, #8
 80033a8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80033aa:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
 80033b0:	e000      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80033b2:	2000      	movs	r0, #0
}
 80033b4:	b003      	add	sp, #12
 80033b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e7fa      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x78>
 80033be:	2003      	movs	r0, #3
 80033c0:	e7f8      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x78>

080033c2 <HAL_UART_Init>:
  if (huart == NULL)
 80033c2:	b360      	cbz	r0, 800341e <HAL_UART_Init+0x5c>
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80033c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80033cc:	b313      	cbz	r3, 8003414 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80033ce:	2324      	movs	r3, #36	@ 0x24
 80033d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	68d3      	ldr	r3, [r2, #12]
 80033d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033dc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033de:	4620      	mov	r0, r4
 80033e0:	f7ff ff24 	bl	800322c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	6913      	ldr	r3, [r2, #16]
 80033e8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80033ec:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	6953      	ldr	r3, [r2, #20]
 80033f2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80033f6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	68d3      	ldr	r3, [r2, #12]
 80033fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003400:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	2000      	movs	r0, #0
 8003404:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003406:	2320      	movs	r3, #32
 8003408:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003410:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003412:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003414:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003418:	f7fe f96c 	bl	80016f4 <HAL_UART_MspInit>
 800341c:	e7d7      	b.n	80033ce <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800341e:	2001      	movs	r0, #1
}
 8003420:	4770      	bx	lr

08003422 <HAL_UART_Transmit>:
{
 8003422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800342a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	d156      	bne.n	80034e2 <HAL_UART_Transmit+0xc0>
 8003434:	4604      	mov	r4, r0
 8003436:	460d      	mov	r5, r1
 8003438:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800343a:	2900      	cmp	r1, #0
 800343c:	d055      	beq.n	80034ea <HAL_UART_Transmit+0xc8>
 800343e:	b90a      	cbnz	r2, 8003444 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003440:	2001      	movs	r0, #1
 8003442:	e04f      	b.n	80034e4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003448:	2321      	movs	r3, #33	@ 0x21
 800344a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800344e:	f7fe fa4f 	bl	80018f0 <HAL_GetTick>
 8003452:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003454:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003458:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003462:	d002      	beq.n	800346a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003464:	f04f 0800 	mov.w	r8, #0
 8003468:	e014      	b.n	8003494 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	b32b      	cbz	r3, 80034ba <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800346e:	f04f 0800 	mov.w	r8, #0
 8003472:	e00f      	b.n	8003494 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003474:	2320      	movs	r3, #32
 8003476:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800347a:	2003      	movs	r0, #3
 800347c:	e032      	b.n	80034e4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003488:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800348a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800348c:	b292      	uxth	r2, r2
 800348e:	3a01      	subs	r2, #1
 8003490:	b292      	uxth	r2, r2
 8003492:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003494:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003496:	b29b      	uxth	r3, r3
 8003498:	b193      	cbz	r3, 80034c0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	9600      	str	r6, [sp, #0]
 800349c:	463b      	mov	r3, r7
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff ff4a 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d1e3      	bne.n	8003474 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d0e6      	beq.n	800347e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b8:	e7e7      	b.n	800348a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80034ba:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80034bc:	2500      	movs	r5, #0
 80034be:	e7e9      	b.n	8003494 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c0:	9600      	str	r6, [sp, #0]
 80034c2:	463b      	mov	r3, r7
 80034c4:	2200      	movs	r2, #0
 80034c6:	2140      	movs	r1, #64	@ 0x40
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff ff37 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 80034ce:	b918      	cbnz	r0, 80034d8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	2320      	movs	r3, #32
 80034d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80034d6:	e005      	b.n	80034e4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80034d8:	2320      	movs	r3, #32
 80034da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80034de:	2003      	movs	r0, #3
 80034e0:	e000      	b.n	80034e4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80034e2:	2002      	movs	r0, #2
}
 80034e4:	b002      	add	sp, #8
 80034e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7fa      	b.n	80034e4 <HAL_UART_Transmit+0xc2>
	...

080034f0 <sniprintf>:
 80034f0:	b40c      	push	{r2, r3}
 80034f2:	b530      	push	{r4, r5, lr}
 80034f4:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <sniprintf+0x68>)
 80034f6:	1e0c      	subs	r4, r1, #0
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	b09d      	sub	sp, #116	@ 0x74
 80034fc:	da08      	bge.n	8003510 <sniprintf+0x20>
 80034fe:	238b      	movs	r3, #139	@ 0x8b
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	b01d      	add	sp, #116	@ 0x74
 8003508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800350c:	b002      	add	sp, #8
 800350e:	4770      	bx	lr
 8003510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003514:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800351e:	bf14      	ite	ne
 8003520:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003524:	4623      	moveq	r3, r4
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	9307      	str	r3, [sp, #28]
 800352a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800352e:	9002      	str	r0, [sp, #8]
 8003530:	9006      	str	r0, [sp, #24]
 8003532:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003536:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003538:	ab21      	add	r3, sp, #132	@ 0x84
 800353a:	a902      	add	r1, sp, #8
 800353c:	4628      	mov	r0, r5
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	f000 f9de 	bl	8003900 <_svfiprintf_r>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	bfbc      	itt	lt
 8003548:	238b      	movlt	r3, #139	@ 0x8b
 800354a:	602b      	strlt	r3, [r5, #0]
 800354c:	2c00      	cmp	r4, #0
 800354e:	d0da      	beq.n	8003506 <sniprintf+0x16>
 8003550:	9b02      	ldr	r3, [sp, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e7d6      	b.n	8003506 <sniprintf+0x16>
 8003558:	20000010 	.word	0x20000010

0800355c <siprintf>:
 800355c:	b40e      	push	{r1, r2, r3}
 800355e:	b510      	push	{r4, lr}
 8003560:	b09d      	sub	sp, #116	@ 0x74
 8003562:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003564:	9002      	str	r0, [sp, #8]
 8003566:	9006      	str	r0, [sp, #24]
 8003568:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800356c:	480a      	ldr	r0, [pc, #40]	@ (8003598 <siprintf+0x3c>)
 800356e:	9107      	str	r1, [sp, #28]
 8003570:	9104      	str	r1, [sp, #16]
 8003572:	490a      	ldr	r1, [pc, #40]	@ (800359c <siprintf+0x40>)
 8003574:	f853 2b04 	ldr.w	r2, [r3], #4
 8003578:	9105      	str	r1, [sp, #20]
 800357a:	2400      	movs	r4, #0
 800357c:	a902      	add	r1, sp, #8
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003584:	f000 f9bc 	bl	8003900 <_svfiprintf_r>
 8003588:	9b02      	ldr	r3, [sp, #8]
 800358a:	701c      	strb	r4, [r3, #0]
 800358c:	b01d      	add	sp, #116	@ 0x74
 800358e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003592:	b003      	add	sp, #12
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000010 	.word	0x20000010
 800359c:	ffff0208 	.word	0xffff0208

080035a0 <memmove>:
 80035a0:	4288      	cmp	r0, r1
 80035a2:	b510      	push	{r4, lr}
 80035a4:	eb01 0402 	add.w	r4, r1, r2
 80035a8:	d902      	bls.n	80035b0 <memmove+0x10>
 80035aa:	4284      	cmp	r4, r0
 80035ac:	4623      	mov	r3, r4
 80035ae:	d807      	bhi.n	80035c0 <memmove+0x20>
 80035b0:	1e43      	subs	r3, r0, #1
 80035b2:	42a1      	cmp	r1, r4
 80035b4:	d008      	beq.n	80035c8 <memmove+0x28>
 80035b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035be:	e7f8      	b.n	80035b2 <memmove+0x12>
 80035c0:	4402      	add	r2, r0
 80035c2:	4601      	mov	r1, r0
 80035c4:	428a      	cmp	r2, r1
 80035c6:	d100      	bne.n	80035ca <memmove+0x2a>
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035d2:	e7f7      	b.n	80035c4 <memmove+0x24>

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <__errno>:
 80035e4:	4b01      	ldr	r3, [pc, #4]	@ (80035ec <__errno+0x8>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	@ (800362c <__libc_init_array+0x3c>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2600      	movs	r6, #0
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4d0b      	ldr	r5, [pc, #44]	@ (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	@ (8003634 <__libc_init_array+0x44>)
 8003604:	f001 f812 	bl	800462c <_init>
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2600      	movs	r6, #0
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08004f2c 	.word	0x08004f2c
 800362c:	08004f2c 	.word	0x08004f2c
 8003630:	08004f2c 	.word	0x08004f2c
 8003634:	08004f30 	.word	0x08004f30

08003638 <__retarget_lock_acquire_recursive>:
 8003638:	4770      	bx	lr

0800363a <__retarget_lock_release_recursive>:
 800363a:	4770      	bx	lr

0800363c <memcpy>:
 800363c:	440a      	add	r2, r1
 800363e:	4291      	cmp	r1, r2
 8003640:	f100 33ff 	add.w	r3, r0, #4294967295
 8003644:	d100      	bne.n	8003648 <memcpy+0xc>
 8003646:	4770      	bx	lr
 8003648:	b510      	push	{r4, lr}
 800364a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800364e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003652:	4291      	cmp	r1, r2
 8003654:	d1f9      	bne.n	800364a <memcpy+0xe>
 8003656:	bd10      	pop	{r4, pc}

08003658 <_free_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	2900      	cmp	r1, #0
 800365e:	d041      	beq.n	80036e4 <_free_r+0x8c>
 8003660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	bfb8      	it	lt
 800366a:	18e4      	addlt	r4, r4, r3
 800366c:	f000 f8e0 	bl	8003830 <__malloc_lock>
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <_free_r+0x90>)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	b933      	cbnz	r3, 8003684 <_free_r+0x2c>
 8003676:	6063      	str	r3, [r4, #4]
 8003678:	6014      	str	r4, [r2, #0]
 800367a:	4628      	mov	r0, r5
 800367c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003680:	f000 b8dc 	b.w	800383c <__malloc_unlock>
 8003684:	42a3      	cmp	r3, r4
 8003686:	d908      	bls.n	800369a <_free_r+0x42>
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	1821      	adds	r1, r4, r0
 800368c:	428b      	cmp	r3, r1
 800368e:	bf01      	itttt	eq
 8003690:	6819      	ldreq	r1, [r3, #0]
 8003692:	685b      	ldreq	r3, [r3, #4]
 8003694:	1809      	addeq	r1, r1, r0
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	e7ed      	b.n	8003676 <_free_r+0x1e>
 800369a:	461a      	mov	r2, r3
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b10b      	cbz	r3, 80036a4 <_free_r+0x4c>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d9fa      	bls.n	800369a <_free_r+0x42>
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	1850      	adds	r0, r2, r1
 80036a8:	42a0      	cmp	r0, r4
 80036aa:	d10b      	bne.n	80036c4 <_free_r+0x6c>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	1850      	adds	r0, r2, r1
 80036b2:	4283      	cmp	r3, r0
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	d1e0      	bne.n	800367a <_free_r+0x22>
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6053      	str	r3, [r2, #4]
 80036be:	4408      	add	r0, r1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	e7da      	b.n	800367a <_free_r+0x22>
 80036c4:	d902      	bls.n	80036cc <_free_r+0x74>
 80036c6:	230c      	movs	r3, #12
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	e7d6      	b.n	800367a <_free_r+0x22>
 80036cc:	6820      	ldr	r0, [r4, #0]
 80036ce:	1821      	adds	r1, r4, r0
 80036d0:	428b      	cmp	r3, r1
 80036d2:	bf04      	itt	eq
 80036d4:	6819      	ldreq	r1, [r3, #0]
 80036d6:	685b      	ldreq	r3, [r3, #4]
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	bf04      	itt	eq
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	6054      	str	r4, [r2, #4]
 80036e2:	e7ca      	b.n	800367a <_free_r+0x22>
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
 80036e6:	bf00      	nop
 80036e8:	20000778 	.word	0x20000778

080036ec <sbrk_aligned>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0f      	ldr	r6, [pc, #60]	@ (800372c <sbrk_aligned+0x40>)
 80036f0:	460c      	mov	r4, r1
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	4605      	mov	r5, r0
 80036f6:	b911      	cbnz	r1, 80036fe <sbrk_aligned+0x12>
 80036f8:	f000 fb8a 	bl	8003e10 <_sbrk_r>
 80036fc:	6030      	str	r0, [r6, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	4628      	mov	r0, r5
 8003702:	f000 fb85 	bl	8003e10 <_sbrk_r>
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	d103      	bne.n	8003712 <sbrk_aligned+0x26>
 800370a:	f04f 34ff 	mov.w	r4, #4294967295
 800370e:	4620      	mov	r0, r4
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0f8      	beq.n	800370e <sbrk_aligned+0x22>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fb76 	bl	8003e10 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1f2      	bne.n	800370e <sbrk_aligned+0x22>
 8003728:	e7ef      	b.n	800370a <sbrk_aligned+0x1e>
 800372a:	bf00      	nop
 800372c:	20000774 	.word	0x20000774

08003730 <_malloc_r>:
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	1ccd      	adds	r5, r1, #3
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	2d00      	cmp	r5, #0
 8003744:	4606      	mov	r6, r0
 8003746:	db01      	blt.n	800374c <_malloc_r+0x1c>
 8003748:	42a9      	cmp	r1, r5
 800374a:	d904      	bls.n	8003756 <_malloc_r+0x26>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	2000      	movs	r0, #0
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800382c <_malloc_r+0xfc>
 800375a:	f000 f869 	bl	8003830 <__malloc_lock>
 800375e:	f8d8 3000 	ldr.w	r3, [r8]
 8003762:	461c      	mov	r4, r3
 8003764:	bb44      	cbnz	r4, 80037b8 <_malloc_r+0x88>
 8003766:	4629      	mov	r1, r5
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbf 	bl	80036ec <sbrk_aligned>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	4604      	mov	r4, r0
 8003772:	d158      	bne.n	8003826 <_malloc_r+0xf6>
 8003774:	f8d8 4000 	ldr.w	r4, [r8]
 8003778:	4627      	mov	r7, r4
 800377a:	2f00      	cmp	r7, #0
 800377c:	d143      	bne.n	8003806 <_malloc_r+0xd6>
 800377e:	2c00      	cmp	r4, #0
 8003780:	d04b      	beq.n	800381a <_malloc_r+0xea>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4639      	mov	r1, r7
 8003786:	4630      	mov	r0, r6
 8003788:	eb04 0903 	add.w	r9, r4, r3
 800378c:	f000 fb40 	bl	8003e10 <_sbrk_r>
 8003790:	4581      	cmp	r9, r0
 8003792:	d142      	bne.n	800381a <_malloc_r+0xea>
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	1a6d      	subs	r5, r5, r1
 8003798:	4629      	mov	r1, r5
 800379a:	4630      	mov	r0, r6
 800379c:	f7ff ffa6 	bl	80036ec <sbrk_aligned>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d03a      	beq.n	800381a <_malloc_r+0xea>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	442b      	add	r3, r5
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	f8d8 3000 	ldr.w	r3, [r8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	bb62      	cbnz	r2, 800380c <_malloc_r+0xdc>
 80037b2:	f8c8 7000 	str.w	r7, [r8]
 80037b6:	e00f      	b.n	80037d8 <_malloc_r+0xa8>
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	1b52      	subs	r2, r2, r5
 80037bc:	d420      	bmi.n	8003800 <_malloc_r+0xd0>
 80037be:	2a0b      	cmp	r2, #11
 80037c0:	d917      	bls.n	80037f2 <_malloc_r+0xc2>
 80037c2:	1961      	adds	r1, r4, r5
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	6025      	str	r5, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	6059      	strne	r1, [r3, #4]
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	bf08      	it	eq
 80037d0:	f8c8 1000 	streq.w	r1, [r8]
 80037d4:	5162      	str	r2, [r4, r5]
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f82f 	bl	800383c <__malloc_unlock>
 80037de:	f104 000b 	add.w	r0, r4, #11
 80037e2:	1d23      	adds	r3, r4, #4
 80037e4:	f020 0007 	bic.w	r0, r0, #7
 80037e8:	1ac2      	subs	r2, r0, r3
 80037ea:	bf1c      	itt	ne
 80037ec:	1a1b      	subne	r3, r3, r0
 80037ee:	50a3      	strne	r3, [r4, r2]
 80037f0:	e7af      	b.n	8003752 <_malloc_r+0x22>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	bf0c      	ite	eq
 80037f8:	f8c8 2000 	streq.w	r2, [r8]
 80037fc:	605a      	strne	r2, [r3, #4]
 80037fe:	e7eb      	b.n	80037d8 <_malloc_r+0xa8>
 8003800:	4623      	mov	r3, r4
 8003802:	6864      	ldr	r4, [r4, #4]
 8003804:	e7ae      	b.n	8003764 <_malloc_r+0x34>
 8003806:	463c      	mov	r4, r7
 8003808:	687f      	ldr	r7, [r7, #4]
 800380a:	e7b6      	b.n	800377a <_malloc_r+0x4a>
 800380c:	461a      	mov	r2, r3
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	42a3      	cmp	r3, r4
 8003812:	d1fb      	bne.n	800380c <_malloc_r+0xdc>
 8003814:	2300      	movs	r3, #0
 8003816:	6053      	str	r3, [r2, #4]
 8003818:	e7de      	b.n	80037d8 <_malloc_r+0xa8>
 800381a:	230c      	movs	r3, #12
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	4630      	mov	r0, r6
 8003820:	f000 f80c 	bl	800383c <__malloc_unlock>
 8003824:	e794      	b.n	8003750 <_malloc_r+0x20>
 8003826:	6005      	str	r5, [r0, #0]
 8003828:	e7d6      	b.n	80037d8 <_malloc_r+0xa8>
 800382a:	bf00      	nop
 800382c:	20000778 	.word	0x20000778

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	@ (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf01 	b.w	8003638 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000770 	.word	0x20000770

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff befc 	b.w	800363a <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000770 	.word	0x20000770

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	688e      	ldr	r6, [r1, #8]
 800384e:	461f      	mov	r7, r3
 8003850:	42be      	cmp	r6, r7
 8003852:	680b      	ldr	r3, [r1, #0]
 8003854:	4682      	mov	sl, r0
 8003856:	460c      	mov	r4, r1
 8003858:	4690      	mov	r8, r2
 800385a:	d82d      	bhi.n	80038b8 <__ssputs_r+0x70>
 800385c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003864:	d026      	beq.n	80038b4 <__ssputs_r+0x6c>
 8003866:	6965      	ldr	r5, [r4, #20]
 8003868:	6909      	ldr	r1, [r1, #16]
 800386a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386e:	eba3 0901 	sub.w	r9, r3, r1
 8003872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003876:	1c7b      	adds	r3, r7, #1
 8003878:	444b      	add	r3, r9
 800387a:	106d      	asrs	r5, r5, #1
 800387c:	429d      	cmp	r5, r3
 800387e:	bf38      	it	cc
 8003880:	461d      	movcc	r5, r3
 8003882:	0553      	lsls	r3, r2, #21
 8003884:	d527      	bpl.n	80038d6 <__ssputs_r+0x8e>
 8003886:	4629      	mov	r1, r5
 8003888:	f7ff ff52 	bl	8003730 <_malloc_r>
 800388c:	4606      	mov	r6, r0
 800388e:	b360      	cbz	r0, 80038ea <__ssputs_r+0xa2>
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	464a      	mov	r2, r9
 8003894:	f7ff fed2 	bl	800363c <memcpy>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800389e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	6126      	str	r6, [r4, #16]
 80038a6:	6165      	str	r5, [r4, #20]
 80038a8:	444e      	add	r6, r9
 80038aa:	eba5 0509 	sub.w	r5, r5, r9
 80038ae:	6026      	str	r6, [r4, #0]
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	463e      	mov	r6, r7
 80038b4:	42be      	cmp	r6, r7
 80038b6:	d900      	bls.n	80038ba <__ssputs_r+0x72>
 80038b8:	463e      	mov	r6, r7
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	4632      	mov	r2, r6
 80038be:	4641      	mov	r1, r8
 80038c0:	f7ff fe6e 	bl	80035a0 <memmove>
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	1b9b      	subs	r3, r3, r6
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4433      	add	r3, r6
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	2000      	movs	r0, #0
 80038d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d6:	462a      	mov	r2, r5
 80038d8:	f000 faaa 	bl	8003e30 <_realloc_r>
 80038dc:	4606      	mov	r6, r0
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1e0      	bne.n	80038a4 <__ssputs_r+0x5c>
 80038e2:	6921      	ldr	r1, [r4, #16]
 80038e4:	4650      	mov	r0, sl
 80038e6:	f7ff feb7 	bl	8003658 <_free_r>
 80038ea:	230c      	movs	r3, #12
 80038ec:	f8ca 3000 	str.w	r3, [sl]
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	e7e9      	b.n	80038d2 <__ssputs_r+0x8a>
	...

08003900 <_svfiprintf_r>:
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	4698      	mov	r8, r3
 8003906:	898b      	ldrh	r3, [r1, #12]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	b09d      	sub	sp, #116	@ 0x74
 800390c:	4607      	mov	r7, r0
 800390e:	460d      	mov	r5, r1
 8003910:	4614      	mov	r4, r2
 8003912:	d510      	bpl.n	8003936 <_svfiprintf_r+0x36>
 8003914:	690b      	ldr	r3, [r1, #16]
 8003916:	b973      	cbnz	r3, 8003936 <_svfiprintf_r+0x36>
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	f7ff ff09 	bl	8003730 <_malloc_r>
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	6128      	str	r0, [r5, #16]
 8003922:	b930      	cbnz	r0, 8003932 <_svfiprintf_r+0x32>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	b01d      	add	sp, #116	@ 0x74
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	2340      	movs	r3, #64	@ 0x40
 8003934:	616b      	str	r3, [r5, #20]
 8003936:	2300      	movs	r3, #0
 8003938:	9309      	str	r3, [sp, #36]	@ 0x24
 800393a:	2320      	movs	r3, #32
 800393c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003940:	f8cd 800c 	str.w	r8, [sp, #12]
 8003944:	2330      	movs	r3, #48	@ 0x30
 8003946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ae4 <_svfiprintf_r+0x1e4>
 800394a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800394e:	f04f 0901 	mov.w	r9, #1
 8003952:	4623      	mov	r3, r4
 8003954:	469a      	mov	sl, r3
 8003956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395a:	b10a      	cbz	r2, 8003960 <_svfiprintf_r+0x60>
 800395c:	2a25      	cmp	r2, #37	@ 0x25
 800395e:	d1f9      	bne.n	8003954 <_svfiprintf_r+0x54>
 8003960:	ebba 0b04 	subs.w	fp, sl, r4
 8003964:	d00b      	beq.n	800397e <_svfiprintf_r+0x7e>
 8003966:	465b      	mov	r3, fp
 8003968:	4622      	mov	r2, r4
 800396a:	4629      	mov	r1, r5
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ff6b 	bl	8003848 <__ssputs_r>
 8003972:	3001      	adds	r0, #1
 8003974:	f000 80a7 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800397a:	445a      	add	r2, fp
 800397c:	9209      	str	r2, [sp, #36]	@ 0x24
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809f 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003988:	2300      	movs	r3, #0
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003992:	f10a 0a01 	add.w	sl, sl, #1
 8003996:	9304      	str	r3, [sp, #16]
 8003998:	9307      	str	r3, [sp, #28]
 800399a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800399e:	931a      	str	r3, [sp, #104]	@ 0x68
 80039a0:	4654      	mov	r4, sl
 80039a2:	2205      	movs	r2, #5
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	484e      	ldr	r0, [pc, #312]	@ (8003ae4 <_svfiprintf_r+0x1e4>)
 80039aa:	f7fc fc19 	bl	80001e0 <memchr>
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	b9d8      	cbnz	r0, 80039ea <_svfiprintf_r+0xea>
 80039b2:	06d0      	lsls	r0, r2, #27
 80039b4:	bf44      	itt	mi
 80039b6:	2320      	movmi	r3, #32
 80039b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039bc:	0711      	lsls	r1, r2, #28
 80039be:	bf44      	itt	mi
 80039c0:	232b      	movmi	r3, #43	@ 0x2b
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80039cc:	d015      	beq.n	80039fa <_svfiprintf_r+0xfa>
 80039ce:	9a07      	ldr	r2, [sp, #28]
 80039d0:	4654      	mov	r4, sl
 80039d2:	2000      	movs	r0, #0
 80039d4:	f04f 0c0a 	mov.w	ip, #10
 80039d8:	4621      	mov	r1, r4
 80039da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039de:	3b30      	subs	r3, #48	@ 0x30
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d94b      	bls.n	8003a7c <_svfiprintf_r+0x17c>
 80039e4:	b1b0      	cbz	r0, 8003a14 <_svfiprintf_r+0x114>
 80039e6:	9207      	str	r2, [sp, #28]
 80039e8:	e014      	b.n	8003a14 <_svfiprintf_r+0x114>
 80039ea:	eba0 0308 	sub.w	r3, r0, r8
 80039ee:	fa09 f303 	lsl.w	r3, r9, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	46a2      	mov	sl, r4
 80039f8:	e7d2      	b.n	80039a0 <_svfiprintf_r+0xa0>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfbb      	ittet	lt
 8003a06:	425b      	neglt	r3, r3
 8003a08:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0c:	9307      	strge	r3, [sp, #28]
 8003a0e:	9307      	strlt	r3, [sp, #28]
 8003a10:	bfb8      	it	lt
 8003a12:	9204      	strlt	r2, [sp, #16]
 8003a14:	7823      	ldrb	r3, [r4, #0]
 8003a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a18:	d10a      	bne.n	8003a30 <_svfiprintf_r+0x130>
 8003a1a:	7863      	ldrb	r3, [r4, #1]
 8003a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1e:	d132      	bne.n	8003a86 <_svfiprintf_r+0x186>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	9203      	str	r2, [sp, #12]
 8003a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a2c:	3402      	adds	r4, #2
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003af4 <_svfiprintf_r+0x1f4>
 8003a34:	7821      	ldrb	r1, [r4, #0]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4650      	mov	r0, sl
 8003a3a:	f7fc fbd1 	bl	80001e0 <memchr>
 8003a3e:	b138      	cbz	r0, 8003a50 <_svfiprintf_r+0x150>
 8003a40:	9b04      	ldr	r3, [sp, #16]
 8003a42:	eba0 000a 	sub.w	r0, r0, sl
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	4082      	lsls	r2, r0
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a54:	4824      	ldr	r0, [pc, #144]	@ (8003ae8 <_svfiprintf_r+0x1e8>)
 8003a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	f7fc fbc0 	bl	80001e0 <memchr>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d036      	beq.n	8003ad2 <_svfiprintf_r+0x1d2>
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <_svfiprintf_r+0x1ec>)
 8003a66:	bb1b      	cbnz	r3, 8003ab0 <_svfiprintf_r+0x1b0>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	3307      	adds	r3, #7
 8003a6c:	f023 0307 	bic.w	r3, r3, #7
 8003a70:	3308      	adds	r3, #8
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a76:	4433      	add	r3, r6
 8003a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a7a:	e76a      	b.n	8003952 <_svfiprintf_r+0x52>
 8003a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a80:	460c      	mov	r4, r1
 8003a82:	2001      	movs	r0, #1
 8003a84:	e7a8      	b.n	80039d8 <_svfiprintf_r+0xd8>
 8003a86:	2300      	movs	r3, #0
 8003a88:	3401      	adds	r4, #1
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0c0a 	mov.w	ip, #10
 8003a92:	4620      	mov	r0, r4
 8003a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a98:	3a30      	subs	r2, #48	@ 0x30
 8003a9a:	2a09      	cmp	r2, #9
 8003a9c:	d903      	bls.n	8003aa6 <_svfiprintf_r+0x1a6>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0c6      	beq.n	8003a30 <_svfiprintf_r+0x130>
 8003aa2:	9105      	str	r1, [sp, #20]
 8003aa4:	e7c4      	b.n	8003a30 <_svfiprintf_r+0x130>
 8003aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aaa:	4604      	mov	r4, r0
 8003aac:	2301      	movs	r3, #1
 8003aae:	e7f0      	b.n	8003a92 <_svfiprintf_r+0x192>
 8003ab0:	ab03      	add	r3, sp, #12
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <_svfiprintf_r+0x1f0>)
 8003ab8:	a904      	add	r1, sp, #16
 8003aba:	4638      	mov	r0, r7
 8003abc:	f3af 8000 	nop.w
 8003ac0:	1c42      	adds	r2, r0, #1
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	d1d6      	bne.n	8003a74 <_svfiprintf_r+0x174>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	065b      	lsls	r3, r3, #25
 8003aca:	f53f af2d 	bmi.w	8003928 <_svfiprintf_r+0x28>
 8003ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ad0:	e72c      	b.n	800392c <_svfiprintf_r+0x2c>
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <_svfiprintf_r+0x1f0>)
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	4638      	mov	r0, r7
 8003ade:	f000 f879 	bl	8003bd4 <_printf_i>
 8003ae2:	e7ed      	b.n	8003ac0 <_svfiprintf_r+0x1c0>
 8003ae4:	08004ed8 	.word	0x08004ed8
 8003ae8:	08004ee2 	.word	0x08004ee2
 8003aec:	00000000 	.word	0x00000000
 8003af0:	08003849 	.word	0x08003849
 8003af4:	08004ede 	.word	0x08004ede

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4698      	mov	r8, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bfb8      	it	lt
 8003b0c:	4613      	movlt	r3, r2
 8003b0e:	6033      	str	r3, [r6, #0]
 8003b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b14:	4607      	mov	r7, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc26      	bgt.n	8003b8e <_printf_common+0x96>
 8003b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	3b00      	subs	r3, #0
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d42b      	bmi.n	8003ba8 <_printf_common+0xb0>
 8003b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b54:	4641      	mov	r1, r8
 8003b56:	4638      	mov	r0, r7
 8003b58:	47c8      	blx	r9
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d01e      	beq.n	8003b9c <_printf_common+0xa4>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf02      	ittt	eq
 8003b6a:	68e5      	ldreq	r5, [r4, #12]
 8003b6c:	6833      	ldreq	r3, [r6, #0]
 8003b6e:	1aed      	subeq	r5, r5, r3
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	bf0c      	ite	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	2500      	movne	r5, #0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bfc4      	itt	gt
 8003b7e:	1a9b      	subgt	r3, r3, r2
 8003b80:	18ed      	addgt	r5, r5, r3
 8003b82:	2600      	movs	r6, #0
 8003b84:	341a      	adds	r4, #26
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d11a      	bne.n	8003bc0 <_printf_common+0xc8>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e008      	b.n	8003ba0 <_printf_common+0xa8>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4652      	mov	r2, sl
 8003b92:	4641      	mov	r1, r8
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c8      	blx	r9
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_printf_common+0xac>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7c6      	b.n	8003b36 <_printf_common+0x3e>
 8003ba8:	18e1      	adds	r1, r4, r3
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	2030      	movs	r0, #48	@ 0x30
 8003bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bb2:	4422      	add	r2, r4
 8003bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	e7c7      	b.n	8003b50 <_printf_common+0x58>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c8      	blx	r9
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0e6      	beq.n	8003b9c <_printf_common+0xa4>
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7d9      	b.n	8003b86 <_printf_common+0x8e>
	...

08003bd4 <_printf_i>:
 8003bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	7e0f      	ldrb	r7, [r1, #24]
 8003bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bdc:	2f78      	cmp	r7, #120	@ 0x78
 8003bde:	4691      	mov	r9, r2
 8003be0:	4680      	mov	r8, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	469a      	mov	sl, r3
 8003be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bea:	d807      	bhi.n	8003bfc <_printf_i+0x28>
 8003bec:	2f62      	cmp	r7, #98	@ 0x62
 8003bee:	d80a      	bhi.n	8003c06 <_printf_i+0x32>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	f000 80d1 	beq.w	8003d98 <_printf_i+0x1c4>
 8003bf6:	2f58      	cmp	r7, #88	@ 0x58
 8003bf8:	f000 80b8 	beq.w	8003d6c <_printf_i+0x198>
 8003bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c04:	e03a      	b.n	8003c7c <_printf_i+0xa8>
 8003c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c0a:	2b15      	cmp	r3, #21
 8003c0c:	d8f6      	bhi.n	8003bfc <_printf_i+0x28>
 8003c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c14 <_printf_i+0x40>)
 8003c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003bfd 	.word	0x08003bfd
 8003c20:	08003bfd 	.word	0x08003bfd
 8003c24:	08003bfd 	.word	0x08003bfd
 8003c28:	08003bfd 	.word	0x08003bfd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bfd 	.word	0x08003bfd
 8003c34:	08003bfd 	.word	0x08003bfd
 8003c38:	08003bfd 	.word	0x08003bfd
 8003c3c:	08003bfd 	.word	0x08003bfd
 8003c40:	08003d7f 	.word	0x08003d7f
 8003c44:	08003cab 	.word	0x08003cab
 8003c48:	08003d39 	.word	0x08003d39
 8003c4c:	08003bfd 	.word	0x08003bfd
 8003c50:	08003bfd 	.word	0x08003bfd
 8003c54:	08003da1 	.word	0x08003da1
 8003c58:	08003bfd 	.word	0x08003bfd
 8003c5c:	08003cab 	.word	0x08003cab
 8003c60:	08003bfd 	.word	0x08003bfd
 8003c64:	08003bfd 	.word	0x08003bfd
 8003c68:	08003d41 	.word	0x08003d41
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6032      	str	r2, [r6, #0]
 8003c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e09c      	b.n	8003dba <_printf_i+0x1e6>
 8003c80:	6833      	ldr	r3, [r6, #0]
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	1d19      	adds	r1, r3, #4
 8003c86:	6031      	str	r1, [r6, #0]
 8003c88:	0606      	lsls	r6, r0, #24
 8003c8a:	d501      	bpl.n	8003c90 <_printf_i+0xbc>
 8003c8c:	681d      	ldr	r5, [r3, #0]
 8003c8e:	e003      	b.n	8003c98 <_printf_i+0xc4>
 8003c90:	0645      	lsls	r5, r0, #25
 8003c92:	d5fb      	bpl.n	8003c8c <_printf_i+0xb8>
 8003c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	da03      	bge.n	8003ca4 <_printf_i+0xd0>
 8003c9c:	232d      	movs	r3, #45	@ 0x2d
 8003c9e:	426d      	negs	r5, r5
 8003ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca4:	4858      	ldr	r0, [pc, #352]	@ (8003e08 <_printf_i+0x234>)
 8003ca6:	230a      	movs	r3, #10
 8003ca8:	e011      	b.n	8003cce <_printf_i+0xfa>
 8003caa:	6821      	ldr	r1, [r4, #0]
 8003cac:	6833      	ldr	r3, [r6, #0]
 8003cae:	0608      	lsls	r0, r1, #24
 8003cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cb4:	d402      	bmi.n	8003cbc <_printf_i+0xe8>
 8003cb6:	0649      	lsls	r1, r1, #25
 8003cb8:	bf48      	it	mi
 8003cba:	b2ad      	uxthmi	r5, r5
 8003cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cbe:	4852      	ldr	r0, [pc, #328]	@ (8003e08 <_printf_i+0x234>)
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	bf14      	ite	ne
 8003cc4:	230a      	movne	r3, #10
 8003cc6:	2308      	moveq	r3, #8
 8003cc8:	2100      	movs	r1, #0
 8003cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cce:	6866      	ldr	r6, [r4, #4]
 8003cd0:	60a6      	str	r6, [r4, #8]
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	db05      	blt.n	8003ce2 <_printf_i+0x10e>
 8003cd6:	6821      	ldr	r1, [r4, #0]
 8003cd8:	432e      	orrs	r6, r5
 8003cda:	f021 0104 	bic.w	r1, r1, #4
 8003cde:	6021      	str	r1, [r4, #0]
 8003ce0:	d04b      	beq.n	8003d7a <_printf_i+0x1a6>
 8003ce2:	4616      	mov	r6, r2
 8003ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cec:	5dc7      	ldrb	r7, [r0, r7]
 8003cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cf2:	462f      	mov	r7, r5
 8003cf4:	42bb      	cmp	r3, r7
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	d9f4      	bls.n	8003ce4 <_printf_i+0x110>
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d10b      	bne.n	8003d16 <_printf_i+0x142>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07df      	lsls	r7, r3, #31
 8003d02:	d508      	bpl.n	8003d16 <_printf_i+0x142>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6861      	ldr	r1, [r4, #4]
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	bfde      	ittt	le
 8003d0c:	2330      	movle	r3, #48	@ 0x30
 8003d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d16:	1b92      	subs	r2, r2, r6
 8003d18:	6122      	str	r2, [r4, #16]
 8003d1a:	f8cd a000 	str.w	sl, [sp]
 8003d1e:	464b      	mov	r3, r9
 8003d20:	aa03      	add	r2, sp, #12
 8003d22:	4621      	mov	r1, r4
 8003d24:	4640      	mov	r0, r8
 8003d26:	f7ff fee7 	bl	8003af8 <_printf_common>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d14a      	bne.n	8003dc4 <_printf_i+0x1f0>
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	b004      	add	sp, #16
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	4832      	ldr	r0, [pc, #200]	@ (8003e0c <_printf_i+0x238>)
 8003d42:	2778      	movs	r7, #120	@ 0x78
 8003d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	6831      	ldr	r1, [r6, #0]
 8003d4c:	061f      	lsls	r7, r3, #24
 8003d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d52:	d402      	bmi.n	8003d5a <_printf_i+0x186>
 8003d54:	065f      	lsls	r7, r3, #25
 8003d56:	bf48      	it	mi
 8003d58:	b2ad      	uxthmi	r5, r5
 8003d5a:	6031      	str	r1, [r6, #0]
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	bf44      	itt	mi
 8003d60:	f043 0320 	orrmi.w	r3, r3, #32
 8003d64:	6023      	strmi	r3, [r4, #0]
 8003d66:	b11d      	cbz	r5, 8003d70 <_printf_i+0x19c>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	e7ad      	b.n	8003cc8 <_printf_i+0xf4>
 8003d6c:	4826      	ldr	r0, [pc, #152]	@ (8003e08 <_printf_i+0x234>)
 8003d6e:	e7e9      	b.n	8003d44 <_printf_i+0x170>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	f023 0320 	bic.w	r3, r3, #32
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	e7f6      	b.n	8003d68 <_printf_i+0x194>
 8003d7a:	4616      	mov	r6, r2
 8003d7c:	e7bd      	b.n	8003cfa <_printf_i+0x126>
 8003d7e:	6833      	ldr	r3, [r6, #0]
 8003d80:	6825      	ldr	r5, [r4, #0]
 8003d82:	6961      	ldr	r1, [r4, #20]
 8003d84:	1d18      	adds	r0, r3, #4
 8003d86:	6030      	str	r0, [r6, #0]
 8003d88:	062e      	lsls	r6, r5, #24
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0x1be>
 8003d8e:	6019      	str	r1, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <_printf_i+0x1c4>
 8003d92:	0668      	lsls	r0, r5, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0x1ba>
 8003d96:	8019      	strh	r1, [r3, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	e7bc      	b.n	8003d1a <_printf_i+0x146>
 8003da0:	6833      	ldr	r3, [r6, #0]
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	6032      	str	r2, [r6, #0]
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	6862      	ldr	r2, [r4, #4]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4630      	mov	r0, r6
 8003dae:	f7fc fa17 	bl	80001e0 <memchr>
 8003db2:	b108      	cbz	r0, 8003db8 <_printf_i+0x1e4>
 8003db4:	1b80      	subs	r0, r0, r6
 8003db6:	6060      	str	r0, [r4, #4]
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dc2:	e7aa      	b.n	8003d1a <_printf_i+0x146>
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	4649      	mov	r1, r9
 8003dca:	4640      	mov	r0, r8
 8003dcc:	47d0      	blx	sl
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d0ad      	beq.n	8003d2e <_printf_i+0x15a>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	079b      	lsls	r3, r3, #30
 8003dd6:	d413      	bmi.n	8003e00 <_printf_i+0x22c>
 8003dd8:	68e0      	ldr	r0, [r4, #12]
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	bfb8      	it	lt
 8003de0:	4618      	movlt	r0, r3
 8003de2:	e7a6      	b.n	8003d32 <_printf_i+0x15e>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4632      	mov	r2, r6
 8003de8:	4649      	mov	r1, r9
 8003dea:	4640      	mov	r0, r8
 8003dec:	47d0      	blx	sl
 8003dee:	3001      	adds	r0, #1
 8003df0:	d09d      	beq.n	8003d2e <_printf_i+0x15a>
 8003df2:	3501      	adds	r5, #1
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	9903      	ldr	r1, [sp, #12]
 8003df8:	1a5b      	subs	r3, r3, r1
 8003dfa:	42ab      	cmp	r3, r5
 8003dfc:	dcf2      	bgt.n	8003de4 <_printf_i+0x210>
 8003dfe:	e7eb      	b.n	8003dd8 <_printf_i+0x204>
 8003e00:	2500      	movs	r5, #0
 8003e02:	f104 0619 	add.w	r6, r4, #25
 8003e06:	e7f5      	b.n	8003df4 <_printf_i+0x220>
 8003e08:	08004ee9 	.word	0x08004ee9
 8003e0c:	08004efa 	.word	0x08004efa

08003e10 <_sbrk_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d06      	ldr	r5, [pc, #24]	@ (8003e2c <_sbrk_r+0x1c>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	f7fd fcc4 	bl	80017a8 <_sbrk>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_sbrk_r+0x1a>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_sbrk_r+0x1a>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	2000076c 	.word	0x2000076c

08003e30 <_realloc_r>:
 8003e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e34:	4607      	mov	r7, r0
 8003e36:	4614      	mov	r4, r2
 8003e38:	460d      	mov	r5, r1
 8003e3a:	b921      	cbnz	r1, 8003e46 <_realloc_r+0x16>
 8003e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e40:	4611      	mov	r1, r2
 8003e42:	f7ff bc75 	b.w	8003730 <_malloc_r>
 8003e46:	b92a      	cbnz	r2, 8003e54 <_realloc_r+0x24>
 8003e48:	f7ff fc06 	bl	8003658 <_free_r>
 8003e4c:	4625      	mov	r5, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e54:	f000 f81a 	bl	8003e8c <_malloc_usable_size_r>
 8003e58:	4284      	cmp	r4, r0
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	d802      	bhi.n	8003e64 <_realloc_r+0x34>
 8003e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e62:	d8f4      	bhi.n	8003e4e <_realloc_r+0x1e>
 8003e64:	4621      	mov	r1, r4
 8003e66:	4638      	mov	r0, r7
 8003e68:	f7ff fc62 	bl	8003730 <_malloc_r>
 8003e6c:	4680      	mov	r8, r0
 8003e6e:	b908      	cbnz	r0, 8003e74 <_realloc_r+0x44>
 8003e70:	4645      	mov	r5, r8
 8003e72:	e7ec      	b.n	8003e4e <_realloc_r+0x1e>
 8003e74:	42b4      	cmp	r4, r6
 8003e76:	4622      	mov	r2, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	bf28      	it	cs
 8003e7c:	4632      	movcs	r2, r6
 8003e7e:	f7ff fbdd 	bl	800363c <memcpy>
 8003e82:	4629      	mov	r1, r5
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff fbe7 	bl	8003658 <_free_r>
 8003e8a:	e7f1      	b.n	8003e70 <_realloc_r+0x40>

08003e8c <_malloc_usable_size_r>:
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f18      	subs	r0, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfbc      	itt	lt
 8003e96:	580b      	ldrlt	r3, [r1, r0]
 8003e98:	18c0      	addlt	r0, r0, r3
 8003e9a:	4770      	bx	lr

08003e9c <powf>:
 8003e9c:	b508      	push	{r3, lr}
 8003e9e:	ed2d 8b04 	vpush	{d8-d9}
 8003ea2:	eeb0 8a60 	vmov.f32	s16, s1
 8003ea6:	eeb0 9a40 	vmov.f32	s18, s0
 8003eaa:	f000 f859 	bl	8003f60 <__ieee754_powf>
 8003eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	eef0 8a40 	vmov.f32	s17, s0
 8003eba:	d63e      	bvs.n	8003f3a <powf+0x9e>
 8003ebc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec4:	d112      	bne.n	8003eec <powf+0x50>
 8003ec6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ece:	d039      	beq.n	8003f44 <powf+0xa8>
 8003ed0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ed4:	f000 f839 	bl	8003f4a <finitef>
 8003ed8:	b378      	cbz	r0, 8003f3a <powf+0x9e>
 8003eda:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	d52a      	bpl.n	8003f3a <powf+0x9e>
 8003ee4:	f7ff fb7e 	bl	80035e4 <__errno>
 8003ee8:	2322      	movs	r3, #34	@ 0x22
 8003eea:	e014      	b.n	8003f16 <powf+0x7a>
 8003eec:	f000 f82d 	bl	8003f4a <finitef>
 8003ef0:	b998      	cbnz	r0, 8003f1a <powf+0x7e>
 8003ef2:	eeb0 0a49 	vmov.f32	s0, s18
 8003ef6:	f000 f828 	bl	8003f4a <finitef>
 8003efa:	b170      	cbz	r0, 8003f1a <powf+0x7e>
 8003efc:	eeb0 0a48 	vmov.f32	s0, s16
 8003f00:	f000 f823 	bl	8003f4a <finitef>
 8003f04:	b148      	cbz	r0, 8003f1a <powf+0x7e>
 8003f06:	eef4 8a68 	vcmp.f32	s17, s17
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	d7e9      	bvc.n	8003ee4 <powf+0x48>
 8003f10:	f7ff fb68 	bl	80035e4 <__errno>
 8003f14:	2321      	movs	r3, #33	@ 0x21
 8003f16:	6003      	str	r3, [r0, #0]
 8003f18:	e00f      	b.n	8003f3a <powf+0x9e>
 8003f1a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d10a      	bne.n	8003f3a <powf+0x9e>
 8003f24:	eeb0 0a49 	vmov.f32	s0, s18
 8003f28:	f000 f80f 	bl	8003f4a <finitef>
 8003f2c:	b128      	cbz	r0, 8003f3a <powf+0x9e>
 8003f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8003f32:	f000 f80a 	bl	8003f4a <finitef>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d1d4      	bne.n	8003ee4 <powf+0x48>
 8003f3a:	eeb0 0a68 	vmov.f32	s0, s17
 8003f3e:	ecbd 8b04 	vpop	{d8-d9}
 8003f42:	bd08      	pop	{r3, pc}
 8003f44:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8003f48:	e7f7      	b.n	8003f3a <powf+0x9e>

08003f4a <finitef>:
 8003f4a:	ee10 3a10 	vmov	r3, s0
 8003f4e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003f52:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003f56:	bfac      	ite	ge
 8003f58:	2000      	movge	r0, #0
 8003f5a:	2001      	movlt	r0, #1
 8003f5c:	4770      	bx	lr
	...

08003f60 <__ieee754_powf>:
 8003f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f64:	ee10 4a90 	vmov	r4, s1
 8003f68:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8003f6c:	ed2d 8b02 	vpush	{d8}
 8003f70:	ee10 6a10 	vmov	r6, s0
 8003f74:	eeb0 8a40 	vmov.f32	s16, s0
 8003f78:	eef0 8a60 	vmov.f32	s17, s1
 8003f7c:	d10c      	bne.n	8003f98 <__ieee754_powf+0x38>
 8003f7e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8003f82:	0076      	lsls	r6, r6, #1
 8003f84:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003f88:	f240 8274 	bls.w	8004474 <__ieee754_powf+0x514>
 8003f8c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8003f90:	ecbd 8b02 	vpop	{d8}
 8003f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f98:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8003f9c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003fa0:	d802      	bhi.n	8003fa8 <__ieee754_powf+0x48>
 8003fa2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003fa6:	d908      	bls.n	8003fba <__ieee754_powf+0x5a>
 8003fa8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003fac:	d1ee      	bne.n	8003f8c <__ieee754_powf+0x2c>
 8003fae:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8003fb2:	0064      	lsls	r4, r4, #1
 8003fb4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003fb8:	e7e6      	b.n	8003f88 <__ieee754_powf+0x28>
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	da1f      	bge.n	8003ffe <__ieee754_powf+0x9e>
 8003fbe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8003fc2:	f080 8260 	bcs.w	8004486 <__ieee754_powf+0x526>
 8003fc6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003fca:	d32f      	bcc.n	800402c <__ieee754_powf+0xcc>
 8003fcc:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8003fd0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8003fd4:	fa49 f503 	asr.w	r5, r9, r3
 8003fd8:	fa05 f303 	lsl.w	r3, r5, r3
 8003fdc:	454b      	cmp	r3, r9
 8003fde:	d123      	bne.n	8004028 <__ieee754_powf+0xc8>
 8003fe0:	f005 0501 	and.w	r5, r5, #1
 8003fe4:	f1c5 0502 	rsb	r5, r5, #2
 8003fe8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003fec:	d11f      	bne.n	800402e <__ieee754_powf+0xce>
 8003fee:	2c00      	cmp	r4, #0
 8003ff0:	f280 8246 	bge.w	8004480 <__ieee754_powf+0x520>
 8003ff4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003ff8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003ffc:	e7c8      	b.n	8003f90 <__ieee754_powf+0x30>
 8003ffe:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8004002:	d111      	bne.n	8004028 <__ieee754_powf+0xc8>
 8004004:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8004008:	f000 8234 	beq.w	8004474 <__ieee754_powf+0x514>
 800400c:	d906      	bls.n	800401c <__ieee754_powf+0xbc>
 800400e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8004324 <__ieee754_powf+0x3c4>
 8004012:	2c00      	cmp	r4, #0
 8004014:	bfa8      	it	ge
 8004016:	eeb0 0a68 	vmovge.f32	s0, s17
 800401a:	e7b9      	b.n	8003f90 <__ieee754_powf+0x30>
 800401c:	2c00      	cmp	r4, #0
 800401e:	f280 822c 	bge.w	800447a <__ieee754_powf+0x51a>
 8004022:	eeb1 0a68 	vneg.f32	s0, s17
 8004026:	e7b3      	b.n	8003f90 <__ieee754_powf+0x30>
 8004028:	2500      	movs	r5, #0
 800402a:	e7dd      	b.n	8003fe8 <__ieee754_powf+0x88>
 800402c:	2500      	movs	r5, #0
 800402e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8004032:	d102      	bne.n	800403a <__ieee754_powf+0xda>
 8004034:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004038:	e7aa      	b.n	8003f90 <__ieee754_powf+0x30>
 800403a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800403e:	f040 8227 	bne.w	8004490 <__ieee754_powf+0x530>
 8004042:	2e00      	cmp	r6, #0
 8004044:	f2c0 8224 	blt.w	8004490 <__ieee754_powf+0x530>
 8004048:	eeb0 0a48 	vmov.f32	s0, s16
 800404c:	ecbd 8b02 	vpop	{d8}
 8004050:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004054:	f000 bae6 	b.w	8004624 <__ieee754_sqrtf>
 8004058:	2d01      	cmp	r5, #1
 800405a:	d199      	bne.n	8003f90 <__ieee754_powf+0x30>
 800405c:	eeb1 0a40 	vneg.f32	s0, s0
 8004060:	e796      	b.n	8003f90 <__ieee754_powf+0x30>
 8004062:	0ff0      	lsrs	r0, r6, #31
 8004064:	3801      	subs	r0, #1
 8004066:	ea55 0300 	orrs.w	r3, r5, r0
 800406a:	d104      	bne.n	8004076 <__ieee754_powf+0x116>
 800406c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004070:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004074:	e78c      	b.n	8003f90 <__ieee754_powf+0x30>
 8004076:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800407a:	d96d      	bls.n	8004158 <__ieee754_powf+0x1f8>
 800407c:	4baa      	ldr	r3, [pc, #680]	@ (8004328 <__ieee754_powf+0x3c8>)
 800407e:	4598      	cmp	r8, r3
 8004080:	d808      	bhi.n	8004094 <__ieee754_powf+0x134>
 8004082:	2c00      	cmp	r4, #0
 8004084:	da0b      	bge.n	800409e <__ieee754_powf+0x13e>
 8004086:	2000      	movs	r0, #0
 8004088:	ecbd 8b02 	vpop	{d8}
 800408c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004090:	f000 bac2 	b.w	8004618 <__math_oflowf>
 8004094:	4ba5      	ldr	r3, [pc, #660]	@ (800432c <__ieee754_powf+0x3cc>)
 8004096:	4598      	cmp	r8, r3
 8004098:	d908      	bls.n	80040ac <__ieee754_powf+0x14c>
 800409a:	2c00      	cmp	r4, #0
 800409c:	dcf3      	bgt.n	8004086 <__ieee754_powf+0x126>
 800409e:	2000      	movs	r0, #0
 80040a0:	ecbd 8b02 	vpop	{d8}
 80040a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a8:	f000 bab0 	b.w	800460c <__math_uflowf>
 80040ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80040b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80040b4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8004330 <__ieee754_powf+0x3d0>
 80040b8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80040bc:	eee0 6a67 	vfms.f32	s13, s0, s15
 80040c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80040c4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80040c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80040cc:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8004334 <__ieee754_powf+0x3d4>
 80040d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8004338 <__ieee754_powf+0x3d8>
 80040d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80040dc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800433c <__ieee754_powf+0x3dc>
 80040e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80040e4:	eeb0 7a67 	vmov.f32	s14, s15
 80040e8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80040ec:	ee17 3a10 	vmov	r3, s14
 80040f0:	f36f 030b 	bfc	r3, #0, #12
 80040f4:	ee07 3a10 	vmov	s14, r3
 80040f8:	eeb0 6a47 	vmov.f32	s12, s14
 80040fc:	eea0 6a66 	vfms.f32	s12, s0, s13
 8004100:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004104:	3d01      	subs	r5, #1
 8004106:	4305      	orrs	r5, r0
 8004108:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8004110:	f36f 040b 	bfc	r4, #0, #12
 8004114:	bf18      	it	ne
 8004116:	eeb0 8a66 	vmovne.f32	s16, s13
 800411a:	ee06 4a90 	vmov	s13, r4
 800411e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004122:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8004126:	ee67 7a26 	vmul.f32	s15, s14, s13
 800412a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800412e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004132:	ee17 1a10 	vmov	r1, s14
 8004136:	2900      	cmp	r1, #0
 8004138:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800413c:	f340 80dd 	ble.w	80042fa <__ieee754_powf+0x39a>
 8004140:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004144:	f240 80ca 	bls.w	80042dc <__ieee754_powf+0x37c>
 8004148:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	bf4c      	ite	mi
 8004152:	2001      	movmi	r0, #1
 8004154:	2000      	movpl	r0, #0
 8004156:	e797      	b.n	8004088 <__ieee754_powf+0x128>
 8004158:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800415c:	bf01      	itttt	eq
 800415e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8004340 <__ieee754_powf+0x3e0>
 8004162:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004166:	f06f 0317 	mvneq.w	r3, #23
 800416a:	ee17 7a90 	vmoveq	r7, s15
 800416e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8004172:	bf18      	it	ne
 8004174:	2300      	movne	r3, #0
 8004176:	3a7f      	subs	r2, #127	@ 0x7f
 8004178:	441a      	add	r2, r3
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <__ieee754_powf+0x3e4>)
 800417c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8004180:	429f      	cmp	r7, r3
 8004182:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8004186:	dd06      	ble.n	8004196 <__ieee754_powf+0x236>
 8004188:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <__ieee754_powf+0x3e8>)
 800418a:	429f      	cmp	r7, r3
 800418c:	f340 80a4 	ble.w	80042d8 <__ieee754_powf+0x378>
 8004190:	3201      	adds	r2, #1
 8004192:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8004196:	2600      	movs	r6, #0
 8004198:	4b6c      	ldr	r3, [pc, #432]	@ (800434c <__ieee754_powf+0x3ec>)
 800419a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800419e:	ee07 1a10 	vmov	s14, r1
 80041a2:	edd3 5a00 	vldr	s11, [r3]
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <__ieee754_powf+0x3f0>)
 80041a8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80041ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041b0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80041b4:	1049      	asrs	r1, r1, #1
 80041b6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80041ba:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80041be:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80041c2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80041c6:	ee07 1a90 	vmov	s15, r1
 80041ca:	ee26 5a24 	vmul.f32	s10, s12, s9
 80041ce:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80041d2:	ee15 7a10 	vmov	r7, s10
 80041d6:	401f      	ands	r7, r3
 80041d8:	ee06 7a90 	vmov	s13, r7
 80041dc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80041e0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80041e4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80041e8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80041ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004354 <__ieee754_powf+0x3f4>
 80041f0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8004358 <__ieee754_powf+0x3f8>
 80041f4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80041f8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800435c <__ieee754_powf+0x3fc>
 80041fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004200:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8004330 <__ieee754_powf+0x3d0>
 8004204:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004208:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004360 <__ieee754_powf+0x400>
 800420c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004210:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8004364 <__ieee754_powf+0x404>
 8004214:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004218:	eee7 5a27 	vfma.f32	s11, s14, s15
 800421c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8004220:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8004224:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004228:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800422c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8004230:	eef0 5a67 	vmov.f32	s11, s15
 8004234:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8004238:	ee75 5a87 	vadd.f32	s11, s11, s14
 800423c:	ee15 1a90 	vmov	r1, s11
 8004240:	4019      	ands	r1, r3
 8004242:	ee05 1a90 	vmov	s11, r1
 8004246:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800424a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800424e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004252:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004256:	eee6 7a25 	vfma.f32	s15, s12, s11
 800425a:	eeb0 6a67 	vmov.f32	s12, s15
 800425e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8004262:	ee16 1a10 	vmov	r1, s12
 8004266:	4019      	ands	r1, r3
 8004268:	ee06 1a10 	vmov	s12, r1
 800426c:	eeb0 7a46 	vmov.f32	s14, s12
 8004270:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8004274:	493c      	ldr	r1, [pc, #240]	@ (8004368 <__ieee754_powf+0x408>)
 8004276:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800427a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800427e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800436c <__ieee754_powf+0x40c>
 8004282:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8004370 <__ieee754_powf+0x410>
 8004286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800428a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004374 <__ieee754_powf+0x414>
 800428e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004292:	ed91 7a00 	vldr	s14, [r1]
 8004296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800429a:	ee07 2a10 	vmov	s14, r2
 800429e:	4a36      	ldr	r2, [pc, #216]	@ (8004378 <__ieee754_powf+0x418>)
 80042a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80042a4:	eeb0 7a67 	vmov.f32	s14, s15
 80042a8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80042ac:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80042b0:	ed92 5a00 	vldr	s10, [r2]
 80042b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80042b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80042bc:	ee17 2a10 	vmov	r2, s14
 80042c0:	401a      	ands	r2, r3
 80042c2:	ee07 2a10 	vmov	s14, r2
 80042c6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80042ca:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80042ce:	eee6 6a65 	vfms.f32	s13, s12, s11
 80042d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042d6:	e715      	b.n	8004104 <__ieee754_powf+0x1a4>
 80042d8:	2601      	movs	r6, #1
 80042da:	e75d      	b.n	8004198 <__ieee754_powf+0x238>
 80042dc:	d152      	bne.n	8004384 <__ieee754_powf+0x424>
 80042de:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800437c <__ieee754_powf+0x41c>
 80042e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042e6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80042ea:	eef4 6ac7 	vcmpe.f32	s13, s14
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	f73f af29 	bgt.w	8004148 <__ieee754_powf+0x1e8>
 80042f6:	2386      	movs	r3, #134	@ 0x86
 80042f8:	e048      	b.n	800438c <__ieee754_powf+0x42c>
 80042fa:	4a21      	ldr	r2, [pc, #132]	@ (8004380 <__ieee754_powf+0x420>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d907      	bls.n	8004310 <__ieee754_powf+0x3b0>
 8004300:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	bf4c      	ite	mi
 800430a:	2001      	movmi	r0, #1
 800430c:	2000      	movpl	r0, #0
 800430e:	e6c7      	b.n	80040a0 <__ieee754_powf+0x140>
 8004310:	d138      	bne.n	8004384 <__ieee754_powf+0x424>
 8004312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004316:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	dbea      	blt.n	80042f6 <__ieee754_powf+0x396>
 8004320:	e7ee      	b.n	8004300 <__ieee754_powf+0x3a0>
 8004322:	bf00      	nop
 8004324:	00000000 	.word	0x00000000
 8004328:	3f7ffff3 	.word	0x3f7ffff3
 800432c:	3f800007 	.word	0x3f800007
 8004330:	3eaaaaab 	.word	0x3eaaaaab
 8004334:	3fb8aa00 	.word	0x3fb8aa00
 8004338:	3fb8aa3b 	.word	0x3fb8aa3b
 800433c:	36eca570 	.word	0x36eca570
 8004340:	4b800000 	.word	0x4b800000
 8004344:	001cc471 	.word	0x001cc471
 8004348:	005db3d6 	.word	0x005db3d6
 800434c:	08004f1c 	.word	0x08004f1c
 8004350:	fffff000 	.word	0xfffff000
 8004354:	3e6c3255 	.word	0x3e6c3255
 8004358:	3e53f142 	.word	0x3e53f142
 800435c:	3e8ba305 	.word	0x3e8ba305
 8004360:	3edb6db7 	.word	0x3edb6db7
 8004364:	3f19999a 	.word	0x3f19999a
 8004368:	08004f0c 	.word	0x08004f0c
 800436c:	3f76384f 	.word	0x3f76384f
 8004370:	3f763800 	.word	0x3f763800
 8004374:	369dc3a0 	.word	0x369dc3a0
 8004378:	08004f14 	.word	0x08004f14
 800437c:	3338aa3c 	.word	0x3338aa3c
 8004380:	43160000 	.word	0x43160000
 8004384:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8004388:	d96f      	bls.n	800446a <__ieee754_powf+0x50a>
 800438a:	15db      	asrs	r3, r3, #23
 800438c:	3b7e      	subs	r3, #126	@ 0x7e
 800438e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004392:	4118      	asrs	r0, r3
 8004394:	4408      	add	r0, r1
 8004396:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800439a:	4a4e      	ldr	r2, [pc, #312]	@ (80044d4 <__ieee754_powf+0x574>)
 800439c:	3b7f      	subs	r3, #127	@ 0x7f
 800439e:	411a      	asrs	r2, r3
 80043a0:	4002      	ands	r2, r0
 80043a2:	ee07 2a10 	vmov	s14, r2
 80043a6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80043aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80043ae:	f1c3 0317 	rsb	r3, r3, #23
 80043b2:	4118      	asrs	r0, r3
 80043b4:	2900      	cmp	r1, #0
 80043b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043ba:	bfb8      	it	lt
 80043bc:	4240      	neglt	r0, r0
 80043be:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80043c2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80044d8 <__ieee754_powf+0x578>
 80043c6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80044dc <__ieee754_powf+0x57c>
 80043ca:	ee16 3a90 	vmov	r3, s13
 80043ce:	f36f 030b 	bfc	r3, #0, #12
 80043d2:	ee06 3a90 	vmov	s13, r3
 80043d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043da:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80043e2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80044e0 <__ieee754_powf+0x580>
 80043e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ea:	eee0 7a87 	vfma.f32	s15, s1, s14
 80043ee:	eeb0 7a67 	vmov.f32	s14, s15
 80043f2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80043f6:	eef0 5a47 	vmov.f32	s11, s14
 80043fa:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80043fe:	ee67 6a07 	vmul.f32	s13, s14, s14
 8004402:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004406:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80044e4 <__ieee754_powf+0x584>
 800440a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80044e8 <__ieee754_powf+0x588>
 800440e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8004412:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80044ec <__ieee754_powf+0x58c>
 8004416:	eee6 5a26 	vfma.f32	s11, s12, s13
 800441a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80044f0 <__ieee754_powf+0x590>
 800441e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8004422:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044f4 <__ieee754_powf+0x594>
 8004426:	eee6 5a26 	vfma.f32	s11, s12, s13
 800442a:	eeb0 6a47 	vmov.f32	s12, s14
 800442e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8004432:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004436:	ee67 5a06 	vmul.f32	s11, s14, s12
 800443a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800443e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8004442:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004446:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800444a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004452:	ee10 3a10 	vmov	r3, s0
 8004456:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800445a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800445e:	da06      	bge.n	800446e <__ieee754_powf+0x50e>
 8004460:	f000 f854 	bl	800450c <scalbnf>
 8004464:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004468:	e592      	b.n	8003f90 <__ieee754_powf+0x30>
 800446a:	2000      	movs	r0, #0
 800446c:	e7a7      	b.n	80043be <__ieee754_powf+0x45e>
 800446e:	ee00 3a10 	vmov	s0, r3
 8004472:	e7f7      	b.n	8004464 <__ieee754_powf+0x504>
 8004474:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004478:	e58a      	b.n	8003f90 <__ieee754_powf+0x30>
 800447a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80044f8 <__ieee754_powf+0x598>
 800447e:	e587      	b.n	8003f90 <__ieee754_powf+0x30>
 8004480:	eeb0 0a48 	vmov.f32	s0, s16
 8004484:	e584      	b.n	8003f90 <__ieee754_powf+0x30>
 8004486:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800448a:	f43f adbb 	beq.w	8004004 <__ieee754_powf+0xa4>
 800448e:	2502      	movs	r5, #2
 8004490:	eeb0 0a48 	vmov.f32	s0, s16
 8004494:	f000 f832 	bl	80044fc <fabsf>
 8004498:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800449c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80044a0:	4647      	mov	r7, r8
 80044a2:	d003      	beq.n	80044ac <__ieee754_powf+0x54c>
 80044a4:	f1b8 0f00 	cmp.w	r8, #0
 80044a8:	f47f addb 	bne.w	8004062 <__ieee754_powf+0x102>
 80044ac:	2c00      	cmp	r4, #0
 80044ae:	bfbc      	itt	lt
 80044b0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80044b4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	f6bf ad69 	bge.w	8003f90 <__ieee754_powf+0x30>
 80044be:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80044c2:	ea58 0805 	orrs.w	r8, r8, r5
 80044c6:	f47f adc7 	bne.w	8004058 <__ieee754_powf+0xf8>
 80044ca:	ee70 7a40 	vsub.f32	s15, s0, s0
 80044ce:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80044d2:	e55d      	b.n	8003f90 <__ieee754_powf+0x30>
 80044d4:	ff800000 	.word	0xff800000
 80044d8:	3f317218 	.word	0x3f317218
 80044dc:	3f317200 	.word	0x3f317200
 80044e0:	35bfbe8c 	.word	0x35bfbe8c
 80044e4:	b5ddea0e 	.word	0xb5ddea0e
 80044e8:	3331bb4c 	.word	0x3331bb4c
 80044ec:	388ab355 	.word	0x388ab355
 80044f0:	bb360b61 	.word	0xbb360b61
 80044f4:	3e2aaaab 	.word	0x3e2aaaab
 80044f8:	00000000 	.word	0x00000000

080044fc <fabsf>:
 80044fc:	ee10 3a10 	vmov	r3, s0
 8004500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004504:	ee00 3a10 	vmov	s0, r3
 8004508:	4770      	bx	lr
	...

0800450c <scalbnf>:
 800450c:	ee10 3a10 	vmov	r3, s0
 8004510:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004514:	d02b      	beq.n	800456e <scalbnf+0x62>
 8004516:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800451a:	d302      	bcc.n	8004522 <scalbnf+0x16>
 800451c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004520:	4770      	bx	lr
 8004522:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004526:	d123      	bne.n	8004570 <scalbnf+0x64>
 8004528:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <scalbnf+0xb0>)
 800452a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80045c0 <scalbnf+0xb4>
 800452e:	4298      	cmp	r0, r3
 8004530:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004534:	db17      	blt.n	8004566 <scalbnf+0x5a>
 8004536:	ee10 3a10 	vmov	r3, s0
 800453a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800453e:	3a19      	subs	r2, #25
 8004540:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004544:	4288      	cmp	r0, r1
 8004546:	dd15      	ble.n	8004574 <scalbnf+0x68>
 8004548:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80045c4 <scalbnf+0xb8>
 800454c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80045c8 <scalbnf+0xbc>
 8004550:	ee10 3a10 	vmov	r3, s0
 8004554:	eeb0 7a67 	vmov.f32	s14, s15
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfb8      	it	lt
 800455c:	eef0 7a66 	vmovlt.f32	s15, s13
 8004560:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004564:	4770      	bx	lr
 8004566:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80045cc <scalbnf+0xc0>
 800456a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800456e:	4770      	bx	lr
 8004570:	0dd2      	lsrs	r2, r2, #23
 8004572:	e7e5      	b.n	8004540 <scalbnf+0x34>
 8004574:	4410      	add	r0, r2
 8004576:	28fe      	cmp	r0, #254	@ 0xfe
 8004578:	dce6      	bgt.n	8004548 <scalbnf+0x3c>
 800457a:	2800      	cmp	r0, #0
 800457c:	dd06      	ble.n	800458c <scalbnf+0x80>
 800457e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004582:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004586:	ee00 3a10 	vmov	s0, r3
 800458a:	4770      	bx	lr
 800458c:	f110 0f16 	cmn.w	r0, #22
 8004590:	da09      	bge.n	80045a6 <scalbnf+0x9a>
 8004592:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80045cc <scalbnf+0xc0>
 8004596:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80045d0 <scalbnf+0xc4>
 800459a:	ee10 3a10 	vmov	r3, s0
 800459e:	eeb0 7a67 	vmov.f32	s14, s15
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	e7d9      	b.n	800455a <scalbnf+0x4e>
 80045a6:	3019      	adds	r0, #25
 80045a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80045ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80045b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80045d4 <scalbnf+0xc8>
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	e7d7      	b.n	800456a <scalbnf+0x5e>
 80045ba:	bf00      	nop
 80045bc:	ffff3cb0 	.word	0xffff3cb0
 80045c0:	4c000000 	.word	0x4c000000
 80045c4:	7149f2ca 	.word	0x7149f2ca
 80045c8:	f149f2ca 	.word	0xf149f2ca
 80045cc:	0da24260 	.word	0x0da24260
 80045d0:	8da24260 	.word	0x8da24260
 80045d4:	33000000 	.word	0x33000000

080045d8 <with_errnof>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	ed2d 8b02 	vpush	{d8}
 80045de:	eeb0 8a40 	vmov.f32	s16, s0
 80045e2:	4604      	mov	r4, r0
 80045e4:	f7fe fffe 	bl	80035e4 <__errno>
 80045e8:	eeb0 0a48 	vmov.f32	s0, s16
 80045ec:	ecbd 8b02 	vpop	{d8}
 80045f0:	6004      	str	r4, [r0, #0]
 80045f2:	bd10      	pop	{r4, pc}

080045f4 <xflowf>:
 80045f4:	b130      	cbz	r0, 8004604 <xflowf+0x10>
 80045f6:	eef1 7a40 	vneg.f32	s15, s0
 80045fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80045fe:	2022      	movs	r0, #34	@ 0x22
 8004600:	f7ff bfea 	b.w	80045d8 <with_errnof>
 8004604:	eef0 7a40 	vmov.f32	s15, s0
 8004608:	e7f7      	b.n	80045fa <xflowf+0x6>
	...

0800460c <__math_uflowf>:
 800460c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004614 <__math_uflowf+0x8>
 8004610:	f7ff bff0 	b.w	80045f4 <xflowf>
 8004614:	10000000 	.word	0x10000000

08004618 <__math_oflowf>:
 8004618:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004620 <__math_oflowf+0x8>
 800461c:	f7ff bfea 	b.w	80045f4 <xflowf>
 8004620:	70000000 	.word	0x70000000

08004624 <__ieee754_sqrtf>:
 8004624:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004628:	4770      	bx	lr
	...

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
